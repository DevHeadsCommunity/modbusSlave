
modbusSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  08009c88  08009c88  0000ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a800  0800a800  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a800  0800a800  0000b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a808  0800a808  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a808  0800a808  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a80c  0800a80c  0000b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a810  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c060  2**0
                  CONTENTS
 10 .bss          00002744  20000060  20000060  0000c060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200027a4  200027a4  0000c060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1a9  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047c2  00000000  00000000  00029239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d8  00000000  00000000  0002f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235f9  00000000  00000000  00030530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ffe  00000000  00000000  00053b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6e01  00000000  00000000  00074b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b928  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d7c  00000000  00000000  0012b96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001326e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c70 	.word	0x08009c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009c70 	.word	0x08009c70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	200004d8 	.word	0x200004d8
 80002b0:	20000578 	.word	0x20000578

080002b4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b096      	sub	sp, #88	@ 0x58
 80002b8:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of lcdTask */
	osThreadDef(lcdTask, lcdHandlerTask, osPriorityNormal, 0, 400);
 80002ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <MX_FREERTOS_Init+0x7c>)
 80002bc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80002c0:	461d      	mov	r5, r3
 80002c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 80002ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f007 f84c 	bl	8007372 <osThreadCreate>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a15      	ldr	r2, [pc, #84]	@ (8000334 <MX_FREERTOS_Init+0x80>)
 80002de:	6013      	str	r3, [r2, #0]

	/* definition and creation of modbusTask */
	osThreadDef(modbusTask, ModbusSlaveTask, osPriorityHigh, 0, 512);
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_FREERTOS_Init+0x84>)
 80002e2:	f107 0420 	add.w	r4, r7, #32
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTaskHandle = osThreadCreate(osThread(modbusTask), NULL);
 80002f4:	f107 0320 	add.w	r3, r7, #32
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f007 f839 	bl	8007372 <osThreadCreate>
 8000300:	4603      	mov	r3, r0
 8000302:	4a0e      	ldr	r2, [pc, #56]	@ (800033c <MX_FREERTOS_Init+0x88>)
 8000304:	6013      	str	r3, [r2, #0]

	/* definition and creation of console */
	osThreadDef(console, consoleTask, osPriorityIdle, 0, 256);
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_FREERTOS_Init+0x8c>)
 8000308:	1d3c      	adds	r4, r7, #4
 800030a:	461d      	mov	r5, r3
 800030c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	consoleHandle = osThreadCreate(osThread(console), NULL);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f007 f828 	bl	8007372 <osThreadCreate>
 8000322:	4603      	mov	r3, r0
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <MX_FREERTOS_Init+0x90>)
 8000326:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8000328:	bf00      	nop
 800032a:	3758      	adds	r7, #88	@ 0x58
 800032c:	46bd      	mov	sp, r7
 800032e:	bdb0      	pop	{r4, r5, r7, pc}
 8000330:	08009c90 	.word	0x08009c90
 8000334:	200004cc 	.word	0x200004cc
 8000338:	08009cb8 	.word	0x08009cb8
 800033c:	200004d0 	.word	0x200004d0
 8000340:	08009cdc 	.word	0x08009cdc
 8000344:	200004d4 	.word	0x200004d4

08000348 <lcdHandlerTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_lcdHandlerTask */
void lcdHandlerTask(void const * argument)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b091      	sub	sp, #68	@ 0x44
 800034c:	af02      	add	r7, sp, #8
 800034e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN lcdHandlerTask */
	char textBuffer[32];
	rtcTime time;
	time.SubSeconds = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	823b      	strh	r3, [r7, #16]

	ssd1306_Init();
 8000354:	f001 feea 	bl	800212c <ssd1306_Init>
	ssd1306_Fill(Black);
 8000358:	2000      	movs	r0, #0
 800035a:	f001 ff51 	bl	8002200 <ssd1306_Fill>
	ssd1306_DrawRectangle(0,0,127,63,1);
 800035e:	2301      	movs	r3, #1
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	233f      	movs	r3, #63	@ 0x3f
 8000364:	227f      	movs	r2, #127	@ 0x7f
 8000366:	2100      	movs	r1, #0
 8000368:	2000      	movs	r0, #0
 800036a:	f002 f917 	bl	800259c <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 800036e:	f001 ff5f 	bl	8002230 <ssd1306_UpdateScreen>

	// Read the date
	DS1307_GetDate(&time.day, &time.date, &time.month, &time.year);
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	f103 0408 	add.w	r4, r3, #8
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	1dda      	adds	r2, r3, #7
 8000380:	f107 030c 	add.w	r3, r7, #12
 8000384:	1d99      	adds	r1, r3, #6
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	f103 0009 	add.w	r0, r3, #9
 800038e:	4623      	mov	r3, r4
 8000390:	f000 ff8e 	bl	80012b0 <DS1307_GetDate>
	//read time
	DS1307_GetTime(&time.hours, &time.minutes, &time.seconds);
 8000394:	f107 030c 	add.w	r3, r7, #12
 8000398:	1c9a      	adds	r2, r3, #2
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	1c59      	adds	r1, r3, #1
 80003a0:	f107 030c 	add.w	r3, r7, #12
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 ff43 	bl	8001230 <DS1307_GetTime>

	setRTC(&time);
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fe0a 	bl	8000fc8 <setRTC>

	/* Infinite loop */
	for(;;)
	{
		readRTC(&time);
 80003b4:	f107 030c 	add.w	r3, r7, #12
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fe51 	bl	8001060 <readRTC>


		ssd1306_SetCursor(16, 6);
 80003be:	2106      	movs	r1, #6
 80003c0:	2010      	movs	r0, #16
 80003c2:	f002 f867 	bl	8002494 <ssd1306_SetCursor>
		sprintf(textBuffer, "Time %.2d:%.2d:%.2d.%.3d", time.hours,
 80003c6:	7b3b      	ldrb	r3, [r7, #12]
 80003c8:	4619      	mov	r1, r3
				time.minutes, time.seconds, time.SubSeconds);
 80003ca:	7b7b      	ldrb	r3, [r7, #13]
		sprintf(textBuffer, "Time %.2d:%.2d:%.2d.%.3d", time.hours,
 80003cc:	461c      	mov	r4, r3
				time.minutes, time.seconds, time.SubSeconds);
 80003ce:	7bbb      	ldrb	r3, [r7, #14]
 80003d0:	8a3a      	ldrh	r2, [r7, #16]
		sprintf(textBuffer, "Time %.2d:%.2d:%.2d.%.3d", time.hours,
 80003d2:	f107 0018 	add.w	r0, r7, #24
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	4623      	mov	r3, r4
 80003dc:	460a      	mov	r2, r1
 80003de:	4931      	ldr	r1, [pc, #196]	@ (80004a4 <lcdHandlerTask+0x15c>)
 80003e0:	f008 fb0c 	bl	80089fc <siprintf>
		ssd1306_WriteString(textBuffer, Font_6x8, White);
 80003e4:	4b30      	ldr	r3, [pc, #192]	@ (80004a8 <lcdHandlerTask+0x160>)
 80003e6:	f107 0018 	add.w	r0, r7, #24
 80003ea:	2201      	movs	r2, #1
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003f0:	f002 f82a 	bl	8002448 <ssd1306_WriteString>

		ssd1306_SetCursor(10, 26);
 80003f4:	211a      	movs	r1, #26
 80003f6:	200a      	movs	r0, #10
 80003f8:	f002 f84c 	bl	8002494 <ssd1306_SetCursor>
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 80003fc:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <lcdHandlerTask+0x164>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
				eventTime[0].minutes, eventTime[0].seconds,
 8000402:	4b2a      	ldr	r3, [pc, #168]	@ (80004ac <lcdHandlerTask+0x164>)
 8000404:	785b      	ldrb	r3, [r3, #1]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 8000406:	461c      	mov	r4, r3
				eventTime[0].minutes, eventTime[0].seconds,
 8000408:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <lcdHandlerTask+0x164>)
 800040a:	789b      	ldrb	r3, [r3, #2]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 800040c:	461a      	mov	r2, r3
				eventTime[0].SubSeconds);
 800040e:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <lcdHandlerTask+0x164>)
 8000410:	889b      	ldrh	r3, [r3, #4]
		sprintf(textBuffer, "Event %.2d:%.2d:%.2d.%.3d", eventTime[0].hours,
 8000412:	f107 0018 	add.w	r0, r7, #24
 8000416:	9301      	str	r3, [sp, #4]
 8000418:	9200      	str	r2, [sp, #0]
 800041a:	4623      	mov	r3, r4
 800041c:	460a      	mov	r2, r1
 800041e:	4924      	ldr	r1, [pc, #144]	@ (80004b0 <lcdHandlerTask+0x168>)
 8000420:	f008 faec 	bl	80089fc <siprintf>
		ssd1306_WriteString(textBuffer, Font_6x8, White);
 8000424:	4b20      	ldr	r3, [pc, #128]	@ (80004a8 <lcdHandlerTask+0x160>)
 8000426:	f107 0018 	add.w	r0, r7, #24
 800042a:	2201      	movs	r2, #1
 800042c:	9200      	str	r2, [sp, #0]
 800042e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000430:	f002 f80a 	bl	8002448 <ssd1306_WriteString>


		setHoldingRegister(&modbusSlave, RTC_HOURS, (uint16_t)time.hours);
 8000434:	7b3b      	ldrb	r3, [r7, #12]
 8000436:	461a      	mov	r2, r3
 8000438:	f649 4145 	movw	r1, #40005	@ 0x9c45
 800043c:	481d      	ldr	r0, [pc, #116]	@ (80004b4 <lcdHandlerTask+0x16c>)
 800043e:	f001 fa75 	bl	800192c <setHoldingRegister>
		setHoldingRegister(&modbusSlave, RTC_MINUTES, (uint16_t)time.minutes);
 8000442:	7b7b      	ldrb	r3, [r7, #13]
 8000444:	461a      	mov	r2, r3
 8000446:	f649 4146 	movw	r1, #40006	@ 0x9c46
 800044a:	481a      	ldr	r0, [pc, #104]	@ (80004b4 <lcdHandlerTask+0x16c>)
 800044c:	f001 fa6e 	bl	800192c <setHoldingRegister>
		setHoldingRegister(&modbusSlave, RTC_SECONDS, (uint16_t)time.seconds);
 8000450:	7bbb      	ldrb	r3, [r7, #14]
 8000452:	461a      	mov	r2, r3
 8000454:	f649 4147 	movw	r1, #40007	@ 0x9c47
 8000458:	4816      	ldr	r0, [pc, #88]	@ (80004b4 <lcdHandlerTask+0x16c>)
 800045a:	f001 fa67 	bl	800192c <setHoldingRegister>
		setHoldingRegister(&modbusSlave, RTC_SUBSECONDS, (uint16_t)time.SubSeconds);
 800045e:	8a3b      	ldrh	r3, [r7, #16]
 8000460:	461a      	mov	r2, r3
 8000462:	f649 4148 	movw	r1, #40008	@ 0x9c48
 8000466:	4813      	ldr	r0, [pc, #76]	@ (80004b4 <lcdHandlerTask+0x16c>)
 8000468:	f001 fa60 	bl	800192c <setHoldingRegister>
		setHoldingRegister(&modbusSlave, RTC_DATE, (uint16_t)time.date);
 800046c:	7cbb      	ldrb	r3, [r7, #18]
 800046e:	461a      	mov	r2, r3
 8000470:	f649 4141 	movw	r1, #40001	@ 0x9c41
 8000474:	480f      	ldr	r0, [pc, #60]	@ (80004b4 <lcdHandlerTask+0x16c>)
 8000476:	f001 fa59 	bl	800192c <setHoldingRegister>
		setHoldingRegister(&modbusSlave, RTC_MONTH, (uint16_t)time.month);
 800047a:	7cfb      	ldrb	r3, [r7, #19]
 800047c:	461a      	mov	r2, r3
 800047e:	f649 4142 	movw	r1, #40002	@ 0x9c42
 8000482:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <lcdHandlerTask+0x16c>)
 8000484:	f001 fa52 	bl	800192c <setHoldingRegister>
		setHoldingRegister(&modbusSlave, RTC_YEAR, (uint16_t)time.year);
 8000488:	7d3b      	ldrb	r3, [r7, #20]
 800048a:	461a      	mov	r2, r3
 800048c:	f649 4143 	movw	r1, #40003	@ 0x9c43
 8000490:	4808      	ldr	r0, [pc, #32]	@ (80004b4 <lcdHandlerTask+0x16c>)
 8000492:	f001 fa4b 	bl	800192c <setHoldingRegister>


		ssd1306_UpdateScreen();
 8000496:	f001 fecb 	bl	8002230 <ssd1306_UpdateScreen>

		osDelay(50);
 800049a:	2032      	movs	r0, #50	@ 0x32
 800049c:	f006 ffb5 	bl	800740a <osDelay>
		readRTC(&time);
 80004a0:	bf00      	nop
 80004a2:	e787      	b.n	80003b4 <lcdHandlerTask+0x6c>
 80004a4:	08009cf8 	.word	0x08009cf8
 80004a8:	0800a684 	.word	0x0800a684
 80004ac:	200000a0 	.word	0x200000a0
 80004b0:	08009d14 	.word	0x08009d14
 80004b4:	2000007c 	.word	0x2000007c

080004b8 <myPrintf>:
 * @brief  Function to print debug messages to UART2.
 * @param  format: Format string (similar to printf).
 * @retval None
 */
void myPrintf(uint8_t debugLevel, const char *format, ...)
{
 80004b8:	b40e      	push	{r1, r2, r3}
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b0a7      	sub	sp, #156	@ 0x9c
 80004be:	af00      	add	r7, sp, #0
 80004c0:	4603      	mov	r3, r0
 80004c2:	71fb      	strb	r3, [r7, #7]
	if (debugLevel <= DEBUG_LEVEL)
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	d836      	bhi.n	8000538 <myPrintf+0x80>
	{
		char buffer[128];
		va_list args;
		va_start(args, format);
 80004ca:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80004ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		vsnprintf(buffer, sizeof(buffer), format, args);
 80004d2:	f107 000c 	add.w	r0, r7, #12
 80004d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80004de:	2180      	movs	r1, #128	@ 0x80
 80004e0:	f008 fb04 	bl	8008aec <vsniprintf>
		va_end(args);

		// Ensure the buffer does not overflow
		size_t length = strlen(buffer);
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fe71 	bl	80001d0 <strlen>
 80004ee:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		size_t index = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		while (length)
 80004f8:	e01a      	b.n	8000530 <myPrintf+0x78>
		{
			uart2Stream.txBuffer[uart2Stream.txFillIndex++] = buffer[index++];
 80004fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000504:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <myPrintf+0x90>)
 8000506:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800050a:	1c51      	adds	r1, r2, #1
 800050c:	b2c8      	uxtb	r0, r1
 800050e:	490e      	ldr	r1, [pc, #56]	@ (8000548 <myPrintf+0x90>)
 8000510:	f881 0202 	strb.w	r0, [r1, #514]	@ 0x202
 8000514:	4611      	mov	r1, r2
 8000516:	3398      	adds	r3, #152	@ 0x98
 8000518:	443b      	add	r3, r7
 800051a:	f813 2c8c 	ldrb.w	r2, [r3, #-140]
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <myPrintf+0x90>)
 8000520:	440b      	add	r3, r1
 8000522:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
			if (uart2Stream.txFillIndex >= RX_BUFFER_SIZE)
			{
				uart2Stream.txFillIndex = 0;  // Reset index on overflow
			}
			length--;
 8000526:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800052a:	3b01      	subs	r3, #1
 800052c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		while (length)
 8000530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1e0      	bne.n	80004fa <myPrintf+0x42>
		}
	}
}
 8000538:	bf00      	nop
 800053a:	379c      	adds	r7, #156	@ 0x9c
 800053c:	46bd      	mov	sp, r7
 800053e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000542:	b003      	add	sp, #12
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200002c0 	.word	0x200002c0

0800054c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	b08b      	sub	sp, #44	@ 0x2c
 8000550:	af06      	add	r7, sp, #24
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3)
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d13b      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0x88>
	{
		// Button pressed
		uint8_t buttonStatus = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800055c:	2108      	movs	r1, #8
 800055e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000562:	f002 fbd7 	bl	8002d14 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	73fb      	strb	r3, [r7, #15]

		setDiscreteInputState(&modbusSlave, DI_buttonStatus, buttonStatus);
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	f242 7111 	movw	r1, #10001	@ 0x2711
 800057c:	4817      	ldr	r0, [pc, #92]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x90>)
 800057e:	f001 f9fa 	bl	8001976 <setDiscreteInputState>
		readRTC(&eventTime[0]);
 8000582:	4817      	ldr	r0, [pc, #92]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000584:	f000 fd6c 	bl	8001060 <readRTC>
		printInfo("Button state=%d\t",buttonStatus);
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	461a      	mov	r2, r3
 800058c:	4915      	ldr	r1, [pc, #84]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x98>)
 800058e:	2003      	movs	r0, #3
 8000590:	f7ff ff92 	bl	80004b8 <myPrintf>
		printInfo("TimeStamp= %.2d/%.2d/%.4d %.2d:%.2d:%.2d.%.3d\n",\
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000596:	799b      	ldrb	r3, [r3, #6]
 8000598:	461d      	mov	r5, r3
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 800059c:	79db      	ldrb	r3, [r3, #7]
 800059e:	461e      	mov	r6, r3
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 80005a2:	7a1b      	ldrb	r3, [r3, #8]
 80005a4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 80005b0:	7852      	ldrb	r2, [r2, #1]
 80005b2:	4610      	mov	r0, r2
 80005b4:	4a0a      	ldr	r2, [pc, #40]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	4614      	mov	r4, r2
 80005ba:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x94>)
 80005bc:	8892      	ldrh	r2, [r2, #4]
 80005be:	9204      	str	r2, [sp, #16]
 80005c0:	9403      	str	r4, [sp, #12]
 80005c2:	9002      	str	r0, [sp, #8]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	4633      	mov	r3, r6
 80005ca:	462a      	mov	r2, r5
 80005cc:	4906      	ldr	r1, [pc, #24]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80005ce:	2003      	movs	r0, #3
 80005d0:	f7ff ff72 	bl	80004b8 <myPrintf>
				eventTime[0].date,eventTime[0].month,eventTime[0].year+2000, \
				eventTime[0].hours,eventTime[0].minutes,eventTime[0].seconds,eventTime[0].SubSeconds);

	}
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	200000a0 	.word	0x200000a0
 80005e4:	08009d30 	.word	0x08009d30
 80005e8:	08009d48 	.word	0x08009d48

080005ec <HAL_UART_RxCpltCallback>:



/// Interrupt callback when a byte is received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uartStream *stream = NULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == USART1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a17      	ldr	r2, [pc, #92]	@ (800065c <HAL_UART_RxCpltCallback+0x70>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d102      	bne.n	8000608 <HAL_UART_RxCpltCallback+0x1c>
	{
		stream = &uart1Stream;
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <HAL_UART_RxCpltCallback+0x74>)
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e006      	b.n	8000616 <HAL_UART_RxCpltCallback+0x2a>
	}
	else if (huart->Instance == USART2)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <HAL_UART_RxCpltCallback+0x78>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d101      	bne.n	8000616 <HAL_UART_RxCpltCallback+0x2a>
	{
		stream = &uart2Stream;
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <HAL_UART_RxCpltCallback+0x7c>)
 8000614:	60fb      	str	r3, [r7, #12]
	}

	if (stream != NULL)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d01b      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x68>
	{
		// Store received byte in the buffer directly from UART
		stream->rxBuffer[stream->rxFillIndex++] = stream->rxByte;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	b2d1      	uxtb	r1, r2
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	f882 1201 	strb.w	r1, [r2, #513]	@ 0x201
 800062c:	461a      	mov	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	5499      	strb	r1, [r3, r2]

		stream->lastByteTimestamp = xTaskGetTickCount();
 8000638:	f007 faa2 	bl	8007b80 <xTaskGetTickCount>
 800063c:	4602      	mov	r2, r0
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (stream->rxFillIndex >= RX_BUFFER_SIZE)
		{
			stream->rxFillIndex = 0;  // Reset index on overflow
		}
		// Restart UART reception for the next byte
		HAL_UART_Receive_IT(huart, &stream->rxByte, 1);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f005 fd1b 	bl	800608a <HAL_UART_Receive_IT>
	}
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013800 	.word	0x40013800
 8000660:	200000b4 	.word	0x200000b4
 8000664:	40004400 	.word	0x40004400
 8000668:	200002c0 	.word	0x200002c0

0800066c <isModbusFrameReady>:


// Function to detect if a Modbus frame is ready for UART1
uint8_t isModbusFrameReady(uint8_t slaveID)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	uint8_t frameReady = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	75fb      	strb	r3, [r7, #23]
	uartStream *stream = &uart1Stream;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <isModbusFrameReady+0x48>)
 800067c:	613b      	str	r3, [r7, #16]

	// Calculate elapsed time since last byte received
	uint32_t elapsedTime = xTaskGetTickCount() - stream->lastByteTimestamp;
 800067e:	f007 fa7f 	bl	8007b80 <xTaskGetTickCount>
 8000682:	4602      	mov	r2, r0
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	60fb      	str	r3, [r7, #12]

	// Check if 3.5 character times have passed (frame is ready)
	if (elapsedTime >= MODBUS_RTU_SILENCE_TIME)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d909      	bls.n	80006a8 <isModbusFrameReady+0x3c>
	{
		if((stream->rxFillIndex != stream->rxReadIndex))
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d001      	beq.n	80006a8 <isModbusFrameReady+0x3c>
		{
			frameReady = 1;  // Frame is ready for processing
 80006a4:	2301      	movs	r3, #1
 80006a6:	75fb      	strb	r3, [r7, #23]
		}
	}
	return frameReady;
 80006a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000b4 	.word	0x200000b4

080006b8 <RS485_Transmit>:



void RS485_Transmit(uint8_t *data, uint16_t dataLen)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	// Set DE high and RE low (transmit mode)
	HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f002 fb39 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	4810      	ldr	r0, [pc, #64]	@ (8000718 <RS485_Transmit+0x60>)
 80006d8:	f002 fb34 	bl	8002d44 <HAL_GPIO_WritePin>

	printInfo("sendLen=%d\n",dataLen);
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	461a      	mov	r2, r3
 80006e0:	490e      	ldr	r1, [pc, #56]	@ (800071c <RS485_Transmit+0x64>)
 80006e2:	2003      	movs	r0, #3
 80006e4:	f7ff fee8 	bl	80004b8 <myPrintf>

	HAL_UART_Transmit(&huart1, data, dataLen, osWaitForever);
 80006e8:	887a      	ldrh	r2, [r7, #2]
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <RS485_Transmit+0x68>)
 80006f2:	f005 fc41 	bl	8005f78 <HAL_UART_Transmit>

	// Set DE and RE low (receive mode) after transmission is complete
	HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f002 fb20 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <RS485_Transmit+0x60>)
 800070a:	f002 fb1b 	bl	8002d44 <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	48000400 	.word	0x48000400
 800071c:	08009d80 	.word	0x08009d80
 8000720:	2000083c 	.word	0x2000083c

08000724 <slaveCallback>:



void slaveCallback(uint16_t regAddress, uint16_t numOfRegisters)
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b08d      	sub	sp, #52	@ 0x34
 8000728:	af06      	add	r7, sp, #24
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	80fb      	strh	r3, [r7, #6]
 8000730:	4613      	mov	r3, r2
 8000732:	80bb      	strh	r3, [r7, #4]
	switch (regAddress)
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	f649 4241 	movw	r2, #40001	@ 0x9c41
 800073a:	4293      	cmp	r3, r2
 800073c:	f040 80ab 	bne.w	8000896 <slaveCallback+0x172>
	{
	case RTC_DATE:
		if (numOfRegisters > RTC_DATE - RTC_SUBSECONDS)
		{
			regAddress += RTC_SUBSECONDS;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	f5a3 43c7 	sub.w	r3, r3, #25472	@ 0x6380
 8000746:	3b38      	subs	r3, #56	@ 0x38
 8000748:	80fb      	strh	r3, [r7, #6]

			uint16_t tempVal;
			rtcTime newTime;

			readRTC(&newTime);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fc86 	bl	8001060 <readRTC>
			printInfo("old Time= %.2d/%.2d/%.4d %.2d:%.2d:%.2d.%.3d\n",
 8000754:	7cbb      	ldrb	r3, [r7, #18]
 8000756:	461d      	mov	r5, r3
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	461e      	mov	r6, r3
 800075c:	7d3b      	ldrb	r3, [r7, #20]
 800075e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000762:	7b3a      	ldrb	r2, [r7, #12]
 8000764:	7b79      	ldrb	r1, [r7, #13]
 8000766:	7bb8      	ldrb	r0, [r7, #14]
 8000768:	8a3c      	ldrh	r4, [r7, #16]
 800076a:	9404      	str	r4, [sp, #16]
 800076c:	9003      	str	r0, [sp, #12]
 800076e:	9102      	str	r1, [sp, #8]
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4633      	mov	r3, r6
 8000776:	462a      	mov	r2, r5
 8000778:	4949      	ldr	r1, [pc, #292]	@ (80008a0 <slaveCallback+0x17c>)
 800077a:	2003      	movs	r0, #3
 800077c:	f7ff fe9c 	bl	80004b8 <myPrintf>
					newTime.date, newTime.month, newTime.year + 2000,
					newTime.hours, newTime.minutes, newTime.seconds, newTime.SubSeconds);

			if (getHoldingRegister(&modbusSlave, RTC_HOURS, &tempVal))
 8000780:	f107 0316 	add.w	r3, r7, #22
 8000784:	461a      	mov	r2, r3
 8000786:	f649 4145 	movw	r1, #40005	@ 0x9c45
 800078a:	4846      	ldr	r0, [pc, #280]	@ (80008a4 <slaveCallback+0x180>)
 800078c:	f001 f8a6 	bl	80018dc <getHoldingRegister>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <slaveCallback+0x78>
			{
				newTime.hours = tempVal;
 8000796:	8afb      	ldrh	r3, [r7, #22]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	733b      	strb	r3, [r7, #12]
			}
			if (getHoldingRegister(&modbusSlave, RTC_MINUTES, &tempVal))
 800079c:	f107 0316 	add.w	r3, r7, #22
 80007a0:	461a      	mov	r2, r3
 80007a2:	f649 4146 	movw	r1, #40006	@ 0x9c46
 80007a6:	483f      	ldr	r0, [pc, #252]	@ (80008a4 <slaveCallback+0x180>)
 80007a8:	f001 f898 	bl	80018dc <getHoldingRegister>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <slaveCallback+0x94>
			{
				newTime.minutes = tempVal;
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	737b      	strb	r3, [r7, #13]
			}
			if (getHoldingRegister(&modbusSlave, RTC_SECONDS, &tempVal))
 80007b8:	f107 0316 	add.w	r3, r7, #22
 80007bc:	461a      	mov	r2, r3
 80007be:	f649 4147 	movw	r1, #40007	@ 0x9c47
 80007c2:	4838      	ldr	r0, [pc, #224]	@ (80008a4 <slaveCallback+0x180>)
 80007c4:	f001 f88a 	bl	80018dc <getHoldingRegister>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <slaveCallback+0xb0>
			{
				newTime.seconds = tempVal;
 80007ce:	8afb      	ldrh	r3, [r7, #22]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	73bb      	strb	r3, [r7, #14]
			}
			if (getHoldingRegister(&modbusSlave, RTC_SUBSECONDS, &tempVal))
 80007d4:	f107 0316 	add.w	r3, r7, #22
 80007d8:	461a      	mov	r2, r3
 80007da:	f649 4148 	movw	r1, #40008	@ 0x9c48
 80007de:	4831      	ldr	r0, [pc, #196]	@ (80008a4 <slaveCallback+0x180>)
 80007e0:	f001 f87c 	bl	80018dc <getHoldingRegister>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <slaveCallback+0xca>
			{
				newTime.SubSeconds = tempVal;
 80007ea:	8afb      	ldrh	r3, [r7, #22]
 80007ec:	823b      	strh	r3, [r7, #16]
			}

			if (getHoldingRegister(&modbusSlave, RTC_DATE, &tempVal))
 80007ee:	f107 0316 	add.w	r3, r7, #22
 80007f2:	461a      	mov	r2, r3
 80007f4:	f649 4141 	movw	r1, #40001	@ 0x9c41
 80007f8:	482a      	ldr	r0, [pc, #168]	@ (80008a4 <slaveCallback+0x180>)
 80007fa:	f001 f86f 	bl	80018dc <getHoldingRegister>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <slaveCallback+0xe6>
			{
				newTime.date = tempVal;
 8000804:	8afb      	ldrh	r3, [r7, #22]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	74bb      	strb	r3, [r7, #18]
			}
			if (getHoldingRegister(&modbusSlave, RTC_MONTH, &tempVal))
 800080a:	f107 0316 	add.w	r3, r7, #22
 800080e:	461a      	mov	r2, r3
 8000810:	f649 4142 	movw	r1, #40002	@ 0x9c42
 8000814:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <slaveCallback+0x180>)
 8000816:	f001 f861 	bl	80018dc <getHoldingRegister>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <slaveCallback+0x102>
			{
				newTime.month = tempVal;
 8000820:	8afb      	ldrh	r3, [r7, #22]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	74fb      	strb	r3, [r7, #19]
			}
			if (getHoldingRegister(&modbusSlave, RTC_YEAR, &tempVal))
 8000826:	f107 0316 	add.w	r3, r7, #22
 800082a:	461a      	mov	r2, r3
 800082c:	f649 4143 	movw	r1, #40003	@ 0x9c43
 8000830:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <slaveCallback+0x180>)
 8000832:	f001 f853 	bl	80018dc <getHoldingRegister>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <slaveCallback+0x122>
			{
				newTime.year = tempVal - 2000;
 800083c:	8afb      	ldrh	r3, [r7, #22]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3330      	adds	r3, #48	@ 0x30
 8000842:	b2db      	uxtb	r3, r3
 8000844:	753b      	strb	r3, [r7, #20]
			}

			DS1307_SetTime(newTime.hours, newTime.minutes, newTime.seconds);
 8000846:	7b3b      	ldrb	r3, [r7, #12]
 8000848:	7b79      	ldrb	r1, [r7, #13]
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fcc1 	bl	80011d4 <DS1307_SetTime>

			// Set the RTC date
			DS1307_SetDate(0, newTime.date, newTime.month, newTime.year);
 8000852:	7cb9      	ldrb	r1, [r7, #18]
 8000854:	7cfa      	ldrb	r2, [r7, #19]
 8000856:	7d3b      	ldrb	r3, [r7, #20]
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fc81 	bl	8001160 <DS1307_SetDate>

			setRTC(&newTime);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fbb0 	bl	8000fc8 <setRTC>

			printInfo("New Time= %.2d/%.2d/%.4d %.2d:%.2d:%.2d.%.3d\n",
 8000868:	7cbb      	ldrb	r3, [r7, #18]
 800086a:	461d      	mov	r5, r3
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	461e      	mov	r6, r3
 8000870:	7d3b      	ldrb	r3, [r7, #20]
 8000872:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000876:	7b3a      	ldrb	r2, [r7, #12]
 8000878:	7b79      	ldrb	r1, [r7, #13]
 800087a:	7bb8      	ldrb	r0, [r7, #14]
 800087c:	8a3c      	ldrh	r4, [r7, #16]
 800087e:	9404      	str	r4, [sp, #16]
 8000880:	9003      	str	r0, [sp, #12]
 8000882:	9102      	str	r1, [sp, #8]
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	4633      	mov	r3, r6
 800088a:	462a      	mov	r2, r5
 800088c:	4906      	ldr	r1, [pc, #24]	@ (80008a8 <slaveCallback+0x184>)
 800088e:	2003      	movs	r0, #3
 8000890:	f7ff fe12 	bl	80004b8 <myPrintf>
					newTime.date, newTime.month, newTime.year + 2000,
					newTime.hours, newTime.minutes, newTime.seconds, newTime.SubSeconds);
		}
		break;
 8000894:	e000      	b.n	8000898 <slaveCallback+0x174>

	default:
		break;
 8000896:	bf00      	nop
	}
}
 8000898:	bf00      	nop
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	08009d94 	.word	0x08009d94
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	08009dc8 	.word	0x08009dc8

080008ac <ModbusSlaveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ModbusSlaveTask */
void ModbusSlaveTask(void const * argument)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ModbusSlaveTask */

	initModbusSlaveData(&modbusSlave, slaveID, numOfHoldingRegs, numOfInputRegs, numOfCoils, numOfDisInput);
 80008b4:	2101      	movs	r1, #1
 80008b6:	2018      	movs	r0, #24
 80008b8:	2410      	movs	r4, #16
 80008ba:	2310      	movs	r3, #16
 80008bc:	2210      	movs	r2, #16
 80008be:	9201      	str	r2, [sp, #4]
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4623      	mov	r3, r4
 80008c4:	4602      	mov	r2, r0
 80008c6:	4832      	ldr	r0, [pc, #200]	@ (8000990 <ModbusSlaveTask+0xe4>)
 80008c8:	f000 ff3c 	bl	8001744 <initModbusSlaveData>


	//put max485 in reception mode
	HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f002 fa35 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	482d      	ldr	r0, [pc, #180]	@ (8000994 <ModbusSlaveTask+0xe8>)
 80008e0:	f002 fa30 	bl	8002d44 <HAL_GPIO_WritePin>

	// Start UART reception in interrupt mode
	HAL_UART_Receive_IT(&huart1, &uart1Stream.rxByte, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	492c      	ldr	r1, [pc, #176]	@ (8000998 <ModbusSlaveTask+0xec>)
 80008e8:	482c      	ldr	r0, [pc, #176]	@ (800099c <ModbusSlaveTask+0xf0>)
 80008ea:	f005 fbce 	bl	800608a <HAL_UART_Receive_IT>

	/* Infinite loop */
	for(;;)
	{
		// Example: Check if a complete Modbus frame has been received
		if (isModbusFrameReady(modbusSlave.slaveID))
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <ModbusSlaveTask+0xe4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff feba 	bl	800066c <isModbusFrameReady>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d043      	beq.n	8000986 <ModbusSlaveTask+0xda>
		{
			uint8_t modlen = getModSlaveFrameLen(uart1Stream.rxBuffer+uart1Stream.rxReadIndex);
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000900:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000904:	461a      	mov	r2, r3
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000908:	4413      	add	r3, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 face 	bl	8001eac <getModSlaveFrameLen>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

			printInfo("Request received=%d, modlen = %d\n", uart1Stream.rxFillIndex - uart1Stream.rxReadIndex,modlen);
 8000914:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000916:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800091a:	461a      	mov	r2, r3
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 800091e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000922:	1ad2      	subs	r2, r2, r3
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	491f      	ldr	r1, [pc, #124]	@ (80009a4 <ModbusSlaveTask+0xf8>)
 8000928:	2003      	movs	r0, #3
 800092a:	f7ff fdc5 	bl	80004b8 <myPrintf>

			if(modlen <= uart1Stream.rxFillIndex - uart1Stream.rxReadIndex,modlen)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d014      	beq.n	800095e <ModbusSlaveTask+0xb2>
			{
				handleModbusRequest(uart1Stream.rxBuffer+uart1Stream.rxReadIndex, modlen, &modbusSlave);
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000936:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800093a:	461a      	mov	r2, r3
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 800093e:	4413      	add	r3, r2
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	b291      	uxth	r1, r2
 8000944:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <ModbusSlaveTask+0xe4>)
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fb70 	bl	800202c <handleModbusRequest>
				uart1Stream.rxReadIndex += modlen;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 800094e:	f893 2203 	ldrb.w	r2, [r3, #515]	@ 0x203
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4413      	add	r3, r2
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 800095a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
			}

			/* This can be improved as circular buffer is used for UART reception
			   if consumption in circular manner no need of reset */
			if((uart1Stream.rxFillIndex == uart1Stream.rxReadIndex))
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000960:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000966:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800096a:	429a      	cmp	r2, r3
 800096c:	d107      	bne.n	800097e <ModbusSlaveTask+0xd2>
			{
				uart1Stream.rxFillIndex = 0;  // Reset index for next frame
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
				uart1Stream.rxReadIndex = 0;  // Reset index for next frame
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <ModbusSlaveTask+0xf4>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
			}
			printInfo("received Modbus packet\n");
 800097e:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <ModbusSlaveTask+0xfc>)
 8000980:	2003      	movs	r0, #3
 8000982:	f7ff fd99 	bl	80004b8 <myPrintf>

		}
		osDelay(5);
 8000986:	2005      	movs	r0, #5
 8000988:	f006 fd3f 	bl	800740a <osDelay>
		if (isModbusFrameReady(modbusSlave.slaveID))
 800098c:	e7af      	b.n	80008ee <ModbusSlaveTask+0x42>
 800098e:	bf00      	nop
 8000990:	2000007c 	.word	0x2000007c
 8000994:	48000400 	.word	0x48000400
 8000998:	200002b4 	.word	0x200002b4
 800099c:	2000083c 	.word	0x2000083c
 80009a0:	200000b4 	.word	0x200000b4
 80009a4:	08009dfc 	.word	0x08009dfc
 80009a8:	08009e24 	.word	0x08009e24

080009ac <consoleTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_consoleTask */
void consoleTask(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09a      	sub	sp, #104	@ 0x68
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN consoleTask */

	// Start UART reception in interrupt mode for UART2
	HAL_UART_Receive_IT(&huart2, &uart2Stream.rxByte, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	498c      	ldr	r1, [pc, #560]	@ (8000be8 <consoleTask+0x23c>)
 80009b8:	488c      	ldr	r0, [pc, #560]	@ (8000bec <consoleTask+0x240>)
 80009ba:	f005 fb66 	bl	800608a <HAL_UART_Receive_IT>

	for(;;)
	{
		// Check if data is received on UART2
		if (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex)
 80009be:	4b8c      	ldr	r3, [pc, #560]	@ (8000bf0 <consoleTask+0x244>)
 80009c0:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 80009c4:	4b8a      	ldr	r3, [pc, #552]	@ (8000bf0 <consoleTask+0x244>)
 80009c6:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80009ca:	429a      	cmp	r2, r3
 80009cc:	f000 8100 	beq.w	8000bd0 <consoleTask+0x224>
		{
			// Parse received data
			char commandBuffer[32];
			uint8_t commandIndex = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			while (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex && commandIndex < sizeof(commandBuffer) - 1)
 80009d6:	e015      	b.n	8000a04 <consoleTask+0x58>
			{
				commandBuffer[commandIndex++] = uart2Stream.rxBuffer[uart2Stream.rxReadIndex++];
 80009d8:	4b85      	ldr	r3, [pc, #532]	@ (8000bf0 <consoleTask+0x244>)
 80009da:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	b2d1      	uxtb	r1, r2
 80009e2:	4a83      	ldr	r2, [pc, #524]	@ (8000bf0 <consoleTask+0x244>)
 80009e4:	f882 1203 	strb.w	r1, [r2, #515]	@ 0x203
 80009e8:	461a      	mov	r2, r3
 80009ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80009ee:	1c59      	adds	r1, r3, #1
 80009f0:	f887 105f 	strb.w	r1, [r7, #95]	@ 0x5f
 80009f4:	4619      	mov	r1, r3
 80009f6:	4b7e      	ldr	r3, [pc, #504]	@ (8000bf0 <consoleTask+0x244>)
 80009f8:	5c9a      	ldrb	r2, [r3, r2]
 80009fa:	f101 0360 	add.w	r3, r1, #96	@ 0x60
 80009fe:	443b      	add	r3, r7
 8000a00:	f803 2c54 	strb.w	r2, [r3, #-84]
			while (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex && commandIndex < sizeof(commandBuffer) - 1)
 8000a04:	4b7a      	ldr	r3, [pc, #488]	@ (8000bf0 <consoleTask+0x244>)
 8000a06:	f893 2201 	ldrb.w	r2, [r3, #513]	@ 0x201
 8000a0a:	4b79      	ldr	r3, [pc, #484]	@ (8000bf0 <consoleTask+0x244>)
 8000a0c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d003      	beq.n	8000a1c <consoleTask+0x70>
 8000a14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000a18:	2b1e      	cmp	r3, #30
 8000a1a:	d9dd      	bls.n	80009d8 <consoleTask+0x2c>
				if (uart2Stream.rxReadIndex >= RX_BUFFER_SIZE)
				{
					uart2Stream.rxReadIndex = 0;  // Reset index on overflow
				}
			}
			commandBuffer[commandIndex] = '\0';  // Null-terminate the command string
 8000a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000a20:	3360      	adds	r3, #96	@ 0x60
 8000a22:	443b      	add	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	f803 2c54 	strb.w	r2, [r3, #-84]

			// Check if the command is "setTime HH:MM:SS"
			if (strncmp(commandBuffer, "setTime ", 8) == 0)
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2208      	movs	r2, #8
 8000a30:	4970      	ldr	r1, [pc, #448]	@ (8000bf4 <consoleTask+0x248>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f008 f88a 	bl	8008b4c <strncmp>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d152      	bne.n	8000ae4 <consoleTask+0x138>
			{
				RTC_TimeTypeDef newTime = {0};
 8000a3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
				int hours, minutes, seconds;

				if (sscanf(commandBuffer + 8, "%2d:%2d:%2d", &hours, &minutes, &seconds) == 3)
 8000a4e:	f107 000c 	add.w	r0, r7, #12
 8000a52:	3008      	adds	r0, #8
 8000a54:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000a58:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000a5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	4964      	ldr	r1, [pc, #400]	@ (8000bf8 <consoleTask+0x24c>)
 8000a66:	f007 ffe9 	bl	8008a3c <siscanf>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d134      	bne.n	8000ada <consoleTask+0x12e>
				{
					// Set the RTC time
					newTime.Hours = hours;
 8000a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
					newTime.Minutes = minutes;
 8000a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
					newTime.Seconds = seconds;
 8000a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
					newTime.SubSeconds = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c

					DS1307_SetTime(newTime.Hours, newTime.Minutes, newTime.Seconds);
 8000a8c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000a90:	f897 1049 	ldrb.w	r1, [r7, #73]	@ 0x49
 8000a94:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fb9b 	bl	80011d4 <DS1307_SetTime>

					// Set the internal RTC time
					if (HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4855      	ldr	r0, [pc, #340]	@ (8000bfc <consoleTask+0x250>)
 8000aa8:	f004 fd05 	bl	80054b6 <HAL_RTC_SetTime>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <consoleTask+0x110>
					{
						printInfo("Failed to set internal RTC time\n");
 8000ab2:	4953      	ldr	r1, [pc, #332]	@ (8000c00 <consoleTask+0x254>)
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f7ff fcff 	bl	80004b8 <myPrintf>
 8000aba:	e089      	b.n	8000bd0 <consoleTask+0x224>
					}
					else
					{
						printInfo("Time set to %.2d:%.2d:%.2d\n", newTime.Hours, newTime.Minutes, newTime.Seconds);
 8000abc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	494c      	ldr	r1, [pc, #304]	@ (8000c04 <consoleTask+0x258>)
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f7ff fcf0 	bl	80004b8 <myPrintf>
 8000ad8:	e07a      	b.n	8000bd0 <consoleTask+0x224>
					}
				}
				else
				{
					printInfo("Invalid time format. Use HH:MM:SS\n");
 8000ada:	494b      	ldr	r1, [pc, #300]	@ (8000c08 <consoleTask+0x25c>)
 8000adc:	2003      	movs	r0, #3
 8000ade:	f7ff fceb 	bl	80004b8 <myPrintf>
 8000ae2:	e075      	b.n	8000bd0 <consoleTask+0x224>
				}
			}

			// Check if the command is "setDate DD/MM/YYYY"
			else if (strncmp(commandBuffer, "setDate ", 8) == 0)
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4948      	ldr	r1, [pc, #288]	@ (8000c0c <consoleTask+0x260>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 f82d 	bl	8008b4c <strncmp>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <consoleTask+0x1ea>
			{
				RTC_DateTypeDef newDate = {0};
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	@ 0x38
				int day, month, year;

				if (sscanf(commandBuffer + 8, "%2d/%2d/%4d", &day, &month, &year) == 3)
 8000afc:	f107 000c 	add.w	r0, r7, #12
 8000b00:	3008      	adds	r0, #8
 8000b02:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000b06:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	460b      	mov	r3, r1
 8000b12:	493f      	ldr	r1, [pc, #252]	@ (8000c10 <consoleTask+0x264>)
 8000b14:	f007 ff92 	bl	8008a3c <siscanf>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d136      	bne.n	8000b8c <consoleTask+0x1e0>
				{
					newDate.Date = day;
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
					newDate.Month = month;
 8000b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
					newDate.Year = year - 2000; // Adjust year for internal RTC
 8000b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	3330      	adds	r3, #48	@ 0x30
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

					// Set the RTC date
					DS1307_SetDate(0,newDate.Date, newDate.Month, newDate.Year);
 8000b3a:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8000b3e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8000b42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 fb0a 	bl	8001160 <DS1307_SetDate>

					if (HAL_RTC_SetDate(&hrtc, &newDate, RTC_FORMAT_BIN) != HAL_OK)
 8000b4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4829      	ldr	r0, [pc, #164]	@ (8000bfc <consoleTask+0x250>)
 8000b56:	f004 fda6 	bl	80056a6 <HAL_RTC_SetDate>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <consoleTask+0x1be>
					{
						printInfo("Failed to set internal RTC date\n");
 8000b60:	492c      	ldr	r1, [pc, #176]	@ (8000c14 <consoleTask+0x268>)
 8000b62:	2003      	movs	r0, #3
 8000b64:	f7ff fca8 	bl	80004b8 <myPrintf>
 8000b68:	e032      	b.n	8000bd0 <consoleTask+0x224>
					}
					else
					{
						printInfo("Date set to %.2d/%.2d/%.4d\n", newDate.Date, newDate.Month, newDate.Year + 2000);
 8000b6a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000b74:	4619      	mov	r1, r3
 8000b76:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000b7a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	460b      	mov	r3, r1
 8000b82:	4925      	ldr	r1, [pc, #148]	@ (8000c18 <consoleTask+0x26c>)
 8000b84:	2003      	movs	r0, #3
 8000b86:	f7ff fc97 	bl	80004b8 <myPrintf>
 8000b8a:	e021      	b.n	8000bd0 <consoleTask+0x224>
					}
				}
				else
				{
					printInfo("Invalid date format. Use DD/MM/YYYY\n");
 8000b8c:	4923      	ldr	r1, [pc, #140]	@ (8000c1c <consoleTask+0x270>)
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f7ff fc92 	bl	80004b8 <myPrintf>
 8000b94:	e01c      	b.n	8000bd0 <consoleTask+0x224>
				}
			}
			else
			{
				printInfo("Unknown command: %s\n", commandBuffer);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4920      	ldr	r1, [pc, #128]	@ (8000c20 <consoleTask+0x274>)
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f7ff fc8a 	bl	80004b8 <myPrintf>
			}
		}


		// Check if there is data to send from txBuffer
		while (uart2Stream.txFillIndex != uart2Stream.txReadIndex)
 8000ba4:	e014      	b.n	8000bd0 <consoleTask+0x224>
		{
			// Calculate the number of bytes to send

			// Send all available data from txBuffer
			HAL_UART_Transmit(&huart2, &uart2Stream.txBuffer[uart2Stream.txReadIndex], 1, HAL_MAX_DELAY);
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <consoleTask+0x244>)
 8000ba8:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000bac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <consoleTask+0x244>)
 8000bb2:	1899      	adds	r1, r3, r2
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	2201      	movs	r2, #1
 8000bba:	480c      	ldr	r0, [pc, #48]	@ (8000bec <consoleTask+0x240>)
 8000bbc:	f005 f9dc 	bl	8005f78 <HAL_UART_Transmit>
			uart2Stream.txReadIndex++;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <consoleTask+0x244>)
 8000bc2:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <consoleTask+0x244>)
 8000bcc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		while (uart2Stream.txFillIndex != uart2Stream.txReadIndex)
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <consoleTask+0x244>)
 8000bd2:	f893 2202 	ldrb.w	r2, [r3, #514]	@ 0x202
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <consoleTask+0x244>)
 8000bd8:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d1e2      	bne.n	8000ba6 <consoleTask+0x1fa>
			{
				uart2Stream.txReadIndex = 0;  // Reset index on overflow
			}
		}

		osDelay(50);
 8000be0:	2032      	movs	r0, #50	@ 0x32
 8000be2:	f006 fc12 	bl	800740a <osDelay>
		if (uart2Stream.rxFillIndex != uart2Stream.rxReadIndex)
 8000be6:	e6ea      	b.n	80009be <consoleTask+0x12>
 8000be8:	200004c0 	.word	0x200004c0
 8000bec:	200008c4 	.word	0x200008c4
 8000bf0:	200002c0 	.word	0x200002c0
 8000bf4:	08009e44 	.word	0x08009e44
 8000bf8:	08009e50 	.word	0x08009e50
 8000bfc:	200007cc 	.word	0x200007cc
 8000c00:	08009e5c 	.word	0x08009e5c
 8000c04:	08009e84 	.word	0x08009e84
 8000c08:	08009ea8 	.word	0x08009ea8
 8000c0c:	08009ed4 	.word	0x08009ed4
 8000c10:	08009ee0 	.word	0x08009ee0
 8000c14:	08009eec 	.word	0x08009eec
 8000c18:	08009f14 	.word	0x08009f14
 8000c1c:	08009f38 	.word	0x08009f38
 8000c20:	08009f64 	.word	0x08009f64

08000c24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a33      	ldr	r2, [pc, #204]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c44:	6153      	str	r3, [r2, #20]
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a2d      	ldr	r2, [pc, #180]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	6153      	str	r3, [r2, #20]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(max485_RE_GPIO_Port, max485_RE_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	4822      	ldr	r0, [pc, #136]	@ (8000d10 <MX_GPIO_Init+0xec>)
 8000c88:	f002 f85c 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(max485_DE_GPIO_Port, max485_DE_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c96:	f002 f855 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c9e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb2:	f001 febd 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : max485_RE_Pin */
  GPIO_InitStruct.Pin = max485_RE_Pin;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(max485_RE_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <MX_GPIO_Init+0xec>)
 8000cce:	f001 feaf 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : max485_DE_Pin */
  GPIO_InitStruct.Pin = max485_DE_Pin;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(max485_DE_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cee:	f001 fe9f 	bl	8002a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	2009      	movs	r0, #9
 8000cf8:	f001 fdf4 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cfc:	2009      	movs	r0, #9
 8000cfe:	f001 fe0d 	bl	800291c <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400

08000d14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d8c <MX_I2C1_Init+0x78>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d20:	4a1b      	ldr	r2, [pc, #108]	@ (8000d90 <MX_I2C1_Init+0x7c>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d4e:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d50:	f002 f828 	bl	8002da4 <HAL_I2C_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d5a:	f000 f8e3 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d62:	f002 fed7 	bl	8003b14 <HAL_I2CEx_ConfigAnalogFilter>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d6c:	f000 f8da 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_I2C1_Init+0x74>)
 8000d74:	f002 ff19 	bl	8003baa <HAL_I2CEx_ConfigDigitalFilter>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f8d1 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000778 	.word	0x20000778
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	00201d2b 	.word	0x00201d2b

08000d94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <HAL_I2C_MspInit+0x7c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d127      	bne.n	8000e06 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <HAL_I2C_MspInit+0x80>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <HAL_I2C_MspInit+0x80>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <HAL_I2C_MspInit+0x80>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23c0      	movs	r3, #192	@ 0xc0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <HAL_I2C_MspInit+0x84>)
 8000dea:	f001 fe21 	bl	8002a30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <HAL_I2C_MspInit+0x80>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <HAL_I2C_MspInit+0x80>)
 8000df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_I2C_MspInit+0x80>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	@ 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f001 fc4e 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f810 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f7ff fefc 	bl	8000c24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e2c:	f000 fbd4 	bl	80015d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e30:	f7ff ff70 	bl	8000d14 <MX_I2C1_Init>
  MX_RTC_Init();
 8000e34:	f000 f87c 	bl	8000f30 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000e38:	f000 fb9e 	bl	8001578 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e3c:	f7ff fa3a 	bl	80002b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e40:	f006 fa90 	bl	8007364 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <main+0x28>

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b096      	sub	sp, #88	@ 0x58
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e52:	2228      	movs	r2, #40	@ 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f007 fe70 	bl	8008b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fed5 	bl	8003c44 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ea0:	f000 f840 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fefe 	bl	8004cc0 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000eca:	f000 f82b 	bl	8000f24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <SystemClock_Config+0xb4>)
 8000ed0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 f93e 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000eee:	f000 f819 	bl	8000f24 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3758      	adds	r7, #88	@ 0x58
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	00010021 	.word	0x00010021

08000f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f12:	f001 fbeb 	bl	80026ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40014800 	.word	0x40014800

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f36:	4a10      	ldr	r2, [pc, #64]	@ (8000f78 <MX_RTC_Init+0x48>)
 8000f38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f42:	227f      	movs	r2, #127	@ 0x7f
 8000f44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f48:	22ff      	movs	r2, #255	@ 0xff
 8000f4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_RTC_Init+0x44>)
 8000f60:	f004 fa26 	bl	80053b0 <HAL_RTC_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f6a:	f7ff ffdb 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200007cc 	.word	0x200007cc
 8000f78:	40002800 	.word	0x40002800

08000f7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <HAL_RTC_MspInit+0x44>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d111      	bne.n	8000fb2 <HAL_RTC_MspInit+0x36>
 8000f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f92:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <HAL_RTC_MspInit+0x48>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40002800 	.word	0x40002800
 8000fc4:	10908100 	.word	0x10908100

08000fc8 <setRTC>:
/* USER CODE BEGIN 1 */



void setRTC( rtcTime* newTime )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]

	sTime.Hours = newTime->hours;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = newTime->minutes;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = newTime->seconds;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	73bb      	strb	r3, [r7, #14]
	sTime.SubSeconds = newTime->SubSeconds;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	889b      	ldrh	r3, [r3, #4]
 8000ffa:	613b      	str	r3, [r7, #16]
	sTime.SecondFraction = 1000;
 8000ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001000:	617b      	str	r3, [r7, #20]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4812      	ldr	r0, [pc, #72]	@ (800105c <setRTC+0x94>)
 8001014:	f004 fa4f 	bl	80054b6 <HAL_RTC_SetTime>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <setRTC+0x5a>
	{
		Error_Handler();
 800101e:	f7ff ff81 	bl	8000f24 <Error_Handler>
	}

	sDate.WeekDay = newTime->day;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7a5b      	ldrb	r3, [r3, #9]
 8001026:	723b      	strb	r3, [r7, #8]
	sDate.Month = newTime->month;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	79db      	ldrb	r3, [r3, #7]
 800102c:	727b      	strb	r3, [r7, #9]
	sDate.Date = newTime->date;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	799b      	ldrb	r3, [r3, #6]
 8001032:	72bb      	strb	r3, [r7, #10]
	sDate.Year = newTime->year;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7a1b      	ldrb	r3, [r3, #8]
 8001038:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <setRTC+0x94>)
 8001044:	f004 fb2f 	bl	80056a6 <HAL_RTC_SetDate>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <setRTC+0x8a>
	{
		Error_Handler();
 800104e:	f7ff ff69 	bl	8000f24 <Error_Handler>
	}
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200007cc 	.word	0x200007cc

08001060 <readRTC>:

void readRTC(rtcTime *newTime)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stimestructureget;
	  RTC_DateTypeDef sdatestructureget;
	uint32_t subseconds, secondfraction;

	  /* Get the RTC current Time */
	  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	481b      	ldr	r0, [pc, #108]	@ (80010e0 <readRTC+0x80>)
 8001072:	f004 faba 	bl	80055ea <HAL_RTC_GetTime>

	  /*Date is not required but without reading data its returning
	   * time value = 0 */

	  /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	4818      	ldr	r0, [pc, #96]	@ (80010e0 <readRTC+0x80>)
 8001080:	f004 fb95 	bl	80057ae <HAL_RTC_GetDate>


	subseconds = stimestructureget.SubSeconds;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
	secondfraction = hrtc.Init.SynchPrediv;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <readRTC+0x80>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Calculate the exact time in milliseconds
	uint32_t milliseconds = ((secondfraction - subseconds) * 1000) / (secondfraction + 1);
 800108e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001098:	fb03 f202 	mul.w	r2, r3, r2
 800109c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800109e:	3301      	adds	r3, #1
 80010a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24

	newTime->SubSeconds = milliseconds;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	809a      	strh	r2, [r3, #4]
	newTime->seconds = stimestructureget.Seconds;
 80010ae:	7cba      	ldrb	r2, [r7, #18]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	709a      	strb	r2, [r3, #2]
	newTime->minutes = stimestructureget.Minutes;
 80010b4:	7c7a      	ldrb	r2, [r7, #17]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	705a      	strb	r2, [r3, #1]
	newTime->hours = stimestructureget.Hours;
 80010ba:	7c3a      	ldrb	r2, [r7, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	701a      	strb	r2, [r3, #0]

	newTime->date = sdatestructureget.Date;
 80010c0:	7bba      	ldrb	r2, [r7, #14]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	719a      	strb	r2, [r3, #6]
	newTime->month = sdatestructureget.Month;
 80010c6:	7b7a      	ldrb	r2, [r7, #13]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	71da      	strb	r2, [r3, #7]
	newTime->year = sdatestructureget.Year;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	721a      	strb	r2, [r3, #8]
	newTime->day = sdatestructureget.WeekDay;
 80010d2:	7b3a      	ldrb	r2, [r7, #12]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	725a      	strb	r2, [r3, #9]

}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	@ 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200007cc 	.word	0x200007cc

080010e4 <DecimalToBCD>:
#define DS1307_ADDRESS 0xD0  // 7-bit address shifted for HAL

extern I2C_HandleTypeDef hi2c1;

// Convert Decimal to Binary-Coded Decimal (BCD)
uint8_t DecimalToBCD(uint8_t val) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	return ((val / 10) << 4) | (val % 10);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <DecimalToBCD+0x44>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	b258      	sxtb	r0, r3
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <DecimalToBCD+0x44>)
 8001102:	fba3 1302 	umull	r1, r3, r3, r2
 8001106:	08d9      	lsrs	r1, r3, #3
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	b25b      	sxtb	r3, r3
 8001116:	4303      	orrs	r3, r0
 8001118:	b25b      	sxtb	r3, r3
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	cccccccd 	.word	0xcccccccd

0800112c <BCDToDecimal>:
uint8_t BCDToDecimal(uint8_t val) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	return ((val >> 4) * 10) + (val & 0x0F);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b2db      	uxtb	r3, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <DS1307_SetDate>:

void DS1307_SetDate(uint8_t dayOfWeek, uint8_t date, uint8_t month, uint8_t year) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af02      	add	r7, sp, #8
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	4603      	mov	r3, r0
 8001174:	71bb      	strb	r3, [r7, #6]
 8001176:	460b      	mov	r3, r1
 8001178:	717b      	strb	r3, [r7, #5]
 800117a:	4613      	mov	r3, r2
 800117c:	713b      	strb	r3, [r7, #4]
	uint8_t buffer[5];

	// Prepare data for date registers
	buffer[0] = 0x03;                     // Start at register 0x03 (day of the week)
 800117e:	2303      	movs	r3, #3
 8001180:	723b      	strb	r3, [r7, #8]
	buffer[1] = DecimalToBCD(dayOfWeek);  // Day of the week (1 = Sunday, 7 = Saturday)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffad 	bl	80010e4 <DecimalToBCD>
 800118a:	4603      	mov	r3, r0
 800118c:	727b      	strb	r3, [r7, #9]
	buffer[2] = DecimalToBCD(date);       // Date
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffa7 	bl	80010e4 <DecimalToBCD>
 8001196:	4603      	mov	r3, r0
 8001198:	72bb      	strb	r3, [r7, #10]
	buffer[3] = DecimalToBCD(month);      // Month
 800119a:	797b      	ldrb	r3, [r7, #5]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffa1 	bl	80010e4 <DecimalToBCD>
 80011a2:	4603      	mov	r3, r0
 80011a4:	72fb      	strb	r3, [r7, #11]
	buffer[4] = DecimalToBCD(year);       // Year (last two digits)
 80011a6:	793b      	ldrb	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff9b 	bl	80010e4 <DecimalToBCD>
 80011ae:	4603      	mov	r3, r0
 80011b0:	733b      	strb	r3, [r7, #12]

	// Write to DS1307
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, buffer, 5, HAL_MAX_DELAY);
 80011b2:	f107 0208 	add.w	r2, r7, #8
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2305      	movs	r3, #5
 80011be:	21d0      	movs	r1, #208	@ 0xd0
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <DS1307_SetDate+0x70>)
 80011c2:	f001 fe8b 	bl	8002edc <HAL_I2C_Master_Transmit>
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000778 	.word	0x20000778

080011d4 <DS1307_SetTime>:

void DS1307_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	460b      	mov	r3, r1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	4613      	mov	r3, r2
 80011e4:	717b      	strb	r3, [r7, #5]
	uint8_t buffer[4];

	// Prepare data for time registers
	buffer[0] = 0x00;                        // Start at register 0x00 (seconds)
 80011e6:	2300      	movs	r3, #0
 80011e8:	733b      	strb	r3, [r7, #12]
	buffer[1] = DecimalToBCD(seconds);       // Seconds (CH bit is cleared automatically)
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff79 	bl	80010e4 <DecimalToBCD>
 80011f2:	4603      	mov	r3, r0
 80011f4:	737b      	strb	r3, [r7, #13]
	buffer[2] = DecimalToBCD(minutes);       // Minutes
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff73 	bl	80010e4 <DecimalToBCD>
 80011fe:	4603      	mov	r3, r0
 8001200:	73bb      	strb	r3, [r7, #14]
	buffer[3] = DecimalToBCD(hours);         // Hours
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff6d 	bl	80010e4 <DecimalToBCD>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]

	// Write to DS1307
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, buffer, 4, HAL_MAX_DELAY);
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2304      	movs	r3, #4
 800121a:	21d0      	movs	r1, #208	@ 0xd0
 800121c:	4803      	ldr	r0, [pc, #12]	@ (800122c <DS1307_SetTime+0x58>)
 800121e:	f001 fe5d 	bl	8002edc <HAL_I2C_Master_Transmit>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000778 	.word	0x20000778

08001230 <DS1307_GetTime>:


void DS1307_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af02      	add	r7, sp, #8
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
	uint8_t buffer[3];
	uint8_t reg = 0x00;  // Start at register 0x00 (seconds)
 800123c:	2300      	movs	r3, #0
 800123e:	74fb      	strb	r3, [r7, #19]

	// Request data from DS1307 starting at seconds register
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8001240:	f107 0213 	add.w	r2, r7, #19
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	21d0      	movs	r1, #208	@ 0xd0
 800124e:	4817      	ldr	r0, [pc, #92]	@ (80012ac <DS1307_GetTime+0x7c>)
 8001250:	f001 fe44 	bl	8002edc <HAL_I2C_Master_Transmit>

	// Read 3 bytes (seconds, minutes, hours)
	HAL_I2C_Master_Receive(&hi2c1, DS1307_ADDRESS, buffer, 3, HAL_MAX_DELAY);
 8001254:	f107 0214 	add.w	r2, r7, #20
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2303      	movs	r3, #3
 8001260:	21d0      	movs	r1, #208	@ 0xd0
 8001262:	4812      	ldr	r0, [pc, #72]	@ (80012ac <DS1307_GetTime+0x7c>)
 8001264:	f001 ff52 	bl	800310c <HAL_I2C_Master_Receive>

	// Convert BCD to Decimal
	*seconds = BCDToDecimal(buffer[0] & 0x7F);  // Mask CH bit (bit 7)
 8001268:	7d3b      	ldrb	r3, [r7, #20]
 800126a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5b 	bl	800112c <BCDToDecimal>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	701a      	strb	r2, [r3, #0]
	*minutes = BCDToDecimal(buffer[1]);
 800127e:	7d7b      	ldrb	r3, [r7, #21]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff53 	bl	800112c <BCDToDecimal>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	701a      	strb	r2, [r3, #0]
	*hours = BCDToDecimal(buffer[2] & 0x3F);    // Mask 24-hour mode bits
 800128e:	7dbb      	ldrb	r3, [r7, #22]
 8001290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff48 	bl	800112c <BCDToDecimal>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000778 	.word	0x20000778

080012b0 <DS1307_GetDate>:

void DS1307_GetDate(uint8_t *dayOfWeek, uint8_t *date, uint8_t *month, uint8_t *year) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
	uint8_t buffer[4];
	uint8_t reg = 0x03;  // Start at register 0x03 (day of the week)
 80012be:	2303      	movs	r3, #3
 80012c0:	74fb      	strb	r3, [r7, #19]

	// Request data from DS1307 starting at day of the week register
	HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 80012c2:	f107 0213 	add.w	r2, r7, #19
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	21d0      	movs	r1, #208	@ 0xd0
 80012d0:	4818      	ldr	r0, [pc, #96]	@ (8001334 <DS1307_GetDate+0x84>)
 80012d2:	f001 fe03 	bl	8002edc <HAL_I2C_Master_Transmit>

	// Read 4 bytes (day of the week, date, month, year)
	HAL_I2C_Master_Receive(&hi2c1, DS1307_ADDRESS, buffer, 4, HAL_MAX_DELAY);
 80012d6:	f107 0214 	add.w	r2, r7, #20
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2304      	movs	r3, #4
 80012e2:	21d0      	movs	r1, #208	@ 0xd0
 80012e4:	4813      	ldr	r0, [pc, #76]	@ (8001334 <DS1307_GetDate+0x84>)
 80012e6:	f001 ff11 	bl	800310c <HAL_I2C_Master_Receive>

	// Convert BCD to Decimal
	*dayOfWeek = BCDToDecimal(buffer[0]);
 80012ea:	7d3b      	ldrb	r3, [r7, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff1d 	bl	800112c <BCDToDecimal>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	701a      	strb	r2, [r3, #0]
	*date = BCDToDecimal(buffer[1]);
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff15 	bl	800112c <BCDToDecimal>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	701a      	strb	r2, [r3, #0]
	*month = BCDToDecimal(buffer[2]);
 800130a:	7dbb      	ldrb	r3, [r7, #22]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff0d 	bl	800112c <BCDToDecimal>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	701a      	strb	r2, [r3, #0]
	*year = BCDToDecimal(buffer[3]);  // Last two digits of the year
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff05 	bl	800112c <BCDToDecimal>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000778 	.word	0x20000778

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_MspInit+0x4c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <HAL_MspInit+0x4c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6193      	str	r3, [r2, #24]
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_MspInit+0x4c>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_MspInit+0x4c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_MspInit+0x4c>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	210f      	movs	r1, #15
 8001372:	f06f 0001 	mvn.w	r0, #1
 8001376:	f001 fab5 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001398:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <HAL_InitTick+0xcc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a2d      	ldr	r2, [pc, #180]	@ (8001454 <HAL_InitTick+0xcc>)
 800139e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <HAL_InitTick+0xcc>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b0:	f107 020c 	add.w	r2, r7, #12
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fea0 	bl	8005100 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013c0:	f003 fe7c 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 80013c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c8:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <HAL_InitTick+0xd0>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	3b01      	subs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80013d4:	4b21      	ldr	r3, [pc, #132]	@ (800145c <HAL_InitTick+0xd4>)
 80013d6:	4a22      	ldr	r2, [pc, #136]	@ (8001460 <HAL_InitTick+0xd8>)
 80013d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_InitTick+0xd4>)
 80013dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013e0:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <HAL_InitTick+0xd4>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_InitTick+0xd4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_InitTick+0xd4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_InitTick+0xd4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80013fa:	4818      	ldr	r0, [pc, #96]	@ (800145c <HAL_InitTick+0xd4>)
 80013fc:	f004 fae4 	bl	80059c8 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001406:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11b      	bne.n	8001446 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800140e:	4813      	ldr	r0, [pc, #76]	@ (800145c <HAL_InitTick+0xd4>)
 8001410:	f004 fb3c 	bl	8005a8c <HAL_TIM_Base_Start_IT>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800141a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800141e:	2b00      	cmp	r3, #0
 8001420:	d111      	bne.n	8001446 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001422:	201a      	movs	r0, #26
 8001424:	f001 fa7a 	bl	800291c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d808      	bhi.n	8001440 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800142e:	2200      	movs	r2, #0
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	201a      	movs	r0, #26
 8001434:	f001 fa56 	bl	80028e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001438:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_InitTick+0xdc>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e002      	b.n	8001446 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800144a:	4618      	mov	r0, r3
 800144c:	3730      	adds	r7, #48	@ 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	431bde83 	.word	0x431bde83
 800145c:	200007ec 	.word	0x200007ec
 8001460:	40014800 	.word	0x40014800
 8001464:	20000004 	.word	0x20000004

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80014a2:	2008      	movs	r0, #8
 80014a4:	f001 fc66 	bl	8002d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80014b2:	f004 fb47 	bl	8005b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200007ec 	.word	0x200007ec

080014c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <USART1_IRQHandler+0x10>)
 80014c6:	f004 fe25 	bl	8006114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000083c 	.word	0x2000083c

080014d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <USART2_IRQHandler+0x10>)
 80014da:	f004 fe1b 	bl	8006114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200008c4 	.word	0x200008c4

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f007 fb90 	bl	8008c3c <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20003000 	.word	0x20003000
 8001548:	00000400 	.word	0x00000400
 800154c:	20000838 	.word	0x20000838
 8001550:	200027a8 	.word	0x200027a8

08001554 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <MX_USART1_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015bc:	f004 fc8e 	bl	8005edc <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f7ff fcad 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000083c 	.word	0x2000083c
 80015d4:	40013800 	.word	0x40013800

080015d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <MX_USART2_UART_Init+0x5c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_USART2_UART_Init+0x58>)
 800161c:	f004 fc5e 	bl	8005edc <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f7ff fc7d 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200008c4 	.word	0x200008c4
 8001634:	40004400 	.word	0x40004400

08001638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	@ 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a38      	ldr	r2, [pc, #224]	@ (8001738 <HAL_UART_MspInit+0x100>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d132      	bne.n	80016c0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800165a:	4b38      	ldr	r3, [pc, #224]	@ (800173c <HAL_UART_MspInit+0x104>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a37      	ldr	r2, [pc, #220]	@ (800173c <HAL_UART_MspInit+0x104>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b35      	ldr	r3, [pc, #212]	@ (800173c <HAL_UART_MspInit+0x104>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_UART_MspInit+0x104>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_UART_MspInit+0x104>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800167c:	6153      	str	r3, [r2, #20]
 800167e:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_UART_MspInit+0x104>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800168a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169c:	2307      	movs	r3, #7
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016aa:	f001 f9c1 	bl	8002a30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2105      	movs	r1, #5
 80016b2:	2025      	movs	r0, #37	@ 0x25
 80016b4:	f001 f916 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016b8:	2025      	movs	r0, #37	@ 0x25
 80016ba:	f001 f92f 	bl	800291c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016be:	e036      	b.n	800172e <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <HAL_UART_MspInit+0x108>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d131      	bne.n	800172e <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_UART_MspInit+0x104>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a1b      	ldr	r2, [pc, #108]	@ (800173c <HAL_UART_MspInit+0x104>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_UART_MspInit+0x104>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_UART_MspInit+0x104>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a15      	ldr	r2, [pc, #84]	@ (800173c <HAL_UART_MspInit+0x104>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_UART_MspInit+0x104>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80016fa:	f248 0304 	movw	r3, #32772	@ 0x8004
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170c:	2307      	movs	r3, #7
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171a:	f001 f989 	bl	8002a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2026      	movs	r0, #38	@ 0x26
 8001724:	f001 f8de 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001728:	2026      	movs	r0, #38	@ 0x26
 800172a:	f001 f8f7 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3730      	adds	r7, #48	@ 0x30
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40013800 	.word	0x40013800
 800173c:	40021000 	.word	0x40021000
 8001740:	40004400 	.word	0x40004400

08001744 <initModbusSlaveData>:
 * @param numCoils Number of coils.
 * @param numDiscreteInputs Number of discrete inputs.
 * @return int 0 on success, -1 on failure.
 */
int initModbusSlaveData(ModbusSlaveData *data, uint8_t id, size_t numHoldingRegs, size_t numInputRegs, size_t numCoils, size_t numDiscreteInputs)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	460b      	mov	r3, r1
 8001752:	72fb      	strb	r3, [r7, #11]
    data->slaveID = id;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	7afa      	ldrb	r2, [r7, #11]
 8001758:	701a      	strb	r2, [r3, #0]
    data->numHoldingRegs = numHoldingRegs;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	615a      	str	r2, [r3, #20]
    data->numInputRegs = numInputRegs;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	619a      	str	r2, [r3, #24]
    data->numCoils = numCoils;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	61da      	str	r2, [r3, #28]
    data->numDiscreteInputs = numDiscreteInputs;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	621a      	str	r2, [r3, #32]

    data->holdingRegisters = (uint16_t *)calloc(numHoldingRegs, sizeof(uint16_t));
 8001772:	2102      	movs	r1, #2
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f007 f86f 	bl	8008858 <calloc>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
    if (data->holdingRegisters == NULL)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <initModbusSlaveData+0x4c>
    {
        return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e021      	b.n	80017d4 <initModbusSlaveData+0x90>
    }

    data->discreteInputs = (uint8_t *)calloc((numDiscreteInputs + 7) / 8, sizeof(uint8_t));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3307      	adds	r3, #7
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	2101      	movs	r1, #1
 8001798:	4618      	mov	r0, r3
 800179a:	f007 f85d 	bl	8008858 <calloc>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	611a      	str	r2, [r3, #16]
    if (data->discreteInputs == NULL)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <initModbusSlaveData+0x8e>
    {
        free(data->holdingRegisters);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f007 f86c 	bl	8008890 <free>
        free(data->inputRegisters);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4618      	mov	r0, r3
 80017be:	f007 f867 	bl	8008890 <free>
        free(data->coils);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 f862 	bl	8008890 <free>
        return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	e000      	b.n	80017d4 <initModbusSlaveData+0x90>
    }

    return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <dbGetDiscreteInputState>:


// Access the nth discrete input (0-based index) with boundary check
// Returns the state of the discrete input (0 or 1)
bool dbGetDiscreteInputState(uint8_t *discreteInputs, size_t n)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    size_t byteIndex = n / 8;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	60fb      	str	r3, [r7, #12]
    size_t bitIndex = n % 8;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60bb      	str	r3, [r7, #8]
    return (discreteInputs[byteIndex] & (1 << bitIndex)) != 0;
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fa42 f303 	asr.w	r3, r2, r3
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <dbSetDiscreteInputState>:

// Set the nth discrete input (0-based index) with boundary check
// Sets the state of the discrete input to the given value (0 or 1)
void dbSetDiscreteInputState(uint8_t *discreteInputs, size_t n, bool state)
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	4613      	mov	r3, r2
 800182a:	71fb      	strb	r3, [r7, #7]
    size_t byteIndex = n / 8;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	617b      	str	r3, [r7, #20]
    size_t bitIndex = n % 8;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	613b      	str	r3, [r7, #16]
    if (state)
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d011      	beq.n	8001864 <dbSetDiscreteInputState+0x46>
    {
        discreteInputs[byteIndex] |= (1 << bitIndex); // Set the bit
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25a      	sxtb	r2, r3
 800184a:	2101      	movs	r1, #1
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b259      	sxtb	r1, r3
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	4413      	add	r3, r2
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        discreteInputs[byteIndex] &= ~(1 << bitIndex); // Clear the bit
    }
}
 8001862:	e012      	b.n	800188a <dbSetDiscreteInputState+0x6c>
        discreteInputs[byteIndex] &= ~(1 << bitIndex); // Clear the bit
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b25a      	sxtb	r2, r3
 800186e:	2101      	movs	r1, #1
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	b25b      	sxtb	r3, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	b25b      	sxtb	r3, r3
 800187c:	4013      	ands	r3, r2
 800187e:	b259      	sxtb	r1, r3
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4413      	add	r3, r2
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <dbGetHoldingRegister>:

// Access the nth holding register (0-based index) with boundary check
// Returns the value of the holding register
uint16_t dbGetHoldingRegister(uint16_t *holdingRegisters, size_t n)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
    return holdingRegisters[n];
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	881b      	ldrh	r3, [r3, #0]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <dbSetHoldingRegister>:

// Set the nth holding register (0-based index) with boundary check
// Sets the value of the holding register to the given value
void dbSetHoldingRegister(uint16_t *holdingRegisters, size_t n, uint16_t value)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	4613      	mov	r3, r2
 80018c2:	80fb      	strh	r3, [r7, #6]
    holdingRegisters[n] = value;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	801a      	strh	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <getHoldingRegister>:
}

// Function to get the value of a holding register with boundary check
// Returns TRUE if successful, FALSE if the address is out of bounds
bool getHoldingRegister(ModbusSlaveData *data, size_t n, uint16_t *value)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
    if (n < HOLDING_REGISTERS_START_ADDRESS || n - HOLDING_REGISTERS_START_ADDRESS >= data->numHoldingRegs)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d907      	bls.n	8001902 <getHoldingRegister+0x26>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 80018f8:	3b41      	subs	r3, #65	@ 0x41
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6952      	ldr	r2, [r2, #20]
 80018fe:	4293      	cmp	r3, r2
 8001900:	d301      	bcc.n	8001906 <getHoldingRegister+0x2a>
    {
        return FALSE; // Boundary condition error
 8001902:	2300      	movs	r3, #0
 8001904:	e00e      	b.n	8001924 <getHoldingRegister+0x48>
    }
    *value = dbGetHoldingRegister(data->holdingRegisters, n - HOLDING_REGISTERS_START_ADDRESS);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8001910:	3b41      	subs	r3, #65	@ 0x41
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f7ff ffbe 	bl	8001896 <dbGetHoldingRegister>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	801a      	strh	r2, [r3, #0]
    return TRUE; // Success
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <setHoldingRegister>:

// Function to set the value of a holding register with boundary check
// Returns TRUE if successful, FALSE if the address is out of bounds
bool setHoldingRegister(ModbusSlaveData *data, size_t n, uint16_t value)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
    if (n < HOLDING_REGISTERS_START_ADDRESS || n - HOLDING_REGISTERS_START_ADDRESS >= data->numHoldingRegs)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001940:	4293      	cmp	r3, r2
 8001942:	d907      	bls.n	8001954 <setHoldingRegister+0x28>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 800194a:	3b41      	subs	r3, #65	@ 0x41
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	6952      	ldr	r2, [r2, #20]
 8001950:	4293      	cmp	r3, r2
 8001952:	d301      	bcc.n	8001958 <setHoldingRegister+0x2c>
    {
        return FALSE; // Boundary condition error
 8001954:	2300      	movs	r3, #0
 8001956:	e00a      	b.n	800196e <setHoldingRegister+0x42>
    }
    dbSetHoldingRegister(data->holdingRegisters, n - HOLDING_REGISTERS_START_ADDRESS, value);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6858      	ldr	r0, [r3, #4]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8001962:	3b41      	subs	r3, #65	@ 0x41
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff ffa5 	bl	80018b6 <dbSetHoldingRegister>
    return TRUE; // Success
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <setDiscreteInputState>:

// Function to set the state of a discrete input with boundary check
// Returns TRUE if successful, FALSE if the address is out of bounds
bool setDiscreteInputState(ModbusSlaveData *data, size_t n, bool state)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	4613      	mov	r3, r2
 8001982:	71fb      	strb	r3, [r7, #7]
    if (n < DISCRETE_INPUTS_START_ADDRESS || n - DISCRETE_INPUTS_START_ADDRESS >= data->numDiscreteInputs)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f242 7210 	movw	r2, #10000	@ 0x2710
 800198a:	4293      	cmp	r3, r2
 800198c:	d907      	bls.n	800199e <setDiscreteInputState+0x28>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001994:	3b11      	subs	r3, #17
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	6a12      	ldr	r2, [r2, #32]
 800199a:	4293      	cmp	r3, r2
 800199c:	d301      	bcc.n	80019a2 <setDiscreteInputState+0x2c>
    {
        return FALSE; // Boundary condition error
 800199e:	2300      	movs	r3, #0
 80019a0:	e00a      	b.n	80019b8 <setDiscreteInputState+0x42>
    }
    dbSetDiscreteInputState(data->discreteInputs, n - DISCRETE_INPUTS_START_ADDRESS, state);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6918      	ldr	r0, [r3, #16]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80019ac:	3b11      	subs	r3, #17
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff ff34 	bl	800181e <dbSetDiscreteInputState>
    return TRUE; // Success
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <modbus_crc16>:
// Function to calculate the CRC16 for Modbus RTU
// data: Pointer to the data array
// length: Length of the data array
// Returns the calculated CRC16 value
 uint16_t modbus_crc16(const uint8_t *data, uint16_t length)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // Initialize CRC to 0xFFFF
 80019cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d0:	81fb      	strh	r3, [r7, #14]

    // Loop through each byte in the data array
    for (uint16_t pos = 0; pos < length; pos++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	81bb      	strh	r3, [r7, #12]
 80019d6:	e026      	b.n	8001a26 <modbus_crc16+0x66>
    {
        crc ^= (uint16_t)data[pos]; // XOR byte into least significant byte of CRC
 80019d8:	89bb      	ldrh	r3, [r7, #12]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	89fb      	ldrh	r3, [r7, #14]
 80019e4:	4053      	eors	r3, r2
 80019e6:	81fb      	strh	r3, [r7, #14]

        // Loop through each bit in the current byte
        for (int i = 8; i != 0; i--)
 80019e8:	2308      	movs	r3, #8
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	e015      	b.n	8001a1a <modbus_crc16+0x5a>
        {
            // If the least significant bit is set
            if ((crc & 0x0001) != 0)
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <modbus_crc16+0x4e>
            {
                crc >>= 1;     // Shift right
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001; // XOR with polynomial 0xA001
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001a04:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	81fb      	strh	r3, [r7, #14]
 8001a0c:	e002      	b.n	8001a14 <modbus_crc16+0x54>
            }
            else
            {
                crc >>= 1; // Just shift right
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	81fb      	strh	r3, [r7, #14]
        for (int i = 8; i != 0; i--)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e6      	bne.n	80019ee <modbus_crc16+0x2e>
    for (uint16_t pos = 0; pos < length; pos++)
 8001a20:	89bb      	ldrh	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	81bb      	strh	r3, [r7, #12]
 8001a26:	89ba      	ldrh	r2, [r7, #12]
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3d4      	bcc.n	80019d8 <modbus_crc16+0x18>
            }
        }
    }
    return crc; // Return the calculated CRC16 value
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <generateModbusException>:
// length: Length of the Modbus frame
// exceptionCode: The Modbus exception code
// response: Pointer to the response buffer
// responseLength: Pointer to the length of the response buffer
static void generateModbusException(const uint8_t *frame, uint8_t exceptionCode, uint8_t *response, uint16_t *responseLength)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	72fb      	strb	r3, [r7, #11]
    // Prepare the response frame
    response[0] = frame[0];        // Slave ID
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	701a      	strb	r2, [r3, #0]
    response[1] = frame[1] | 0x80; // Function code with high bit set to indicate exception
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
    response[2] = exceptionCode;   // Exception code
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3302      	adds	r3, #2
 8001a6a:	7afa      	ldrb	r2, [r7, #11]
 8001a6c:	701a      	strb	r2, [r3, #0]

    // Calculate the CRC for the response
    uint16_t crc = modbus_crc16(response, 3);
 8001a6e:	2103      	movs	r1, #3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffa5 	bl	80019c0 <modbus_crc16>
 8001a76:	4603      	mov	r3, r0
 8001a78:	82fb      	strh	r3, [r7, #22]
    response[3] = crc & 0xFF;        // CRC low byte
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	8afa      	ldrh	r2, [r7, #22]
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]
    response[4] = (crc >> 8) & 0xFF; // CRC high byte
 8001a84:	8afb      	ldrh	r3, [r7, #22]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    printDebug("crc=%04X\n", crc);
 8001a92:	8afb      	ldrh	r3, [r7, #22]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4905      	ldr	r1, [pc, #20]	@ (8001aac <generateModbusException+0x70>)
 8001a98:	2004      	movs	r0, #4
 8001a9a:	f7fe fd0d 	bl	80004b8 <myPrintf>

    // Set the response length
    *responseLength = 5;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2205      	movs	r2, #5
 8001aa2:	801a      	strh	r2, [r3, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08009f80 	.word	0x08009f80

08001ab0 <handleReadDiscreteInputs>:

static bool handleReadDiscreteInputs(const uint8_t *frame, ModbusSlaveData *slave, uint8_t *response, uint16_t *responseLength)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
    uint16_t startAddress = (uint16_t)frame[2] << 8 | (uint16_t)frame[3];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3303      	adds	r3, #3
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	83bb      	strh	r3, [r7, #28]
    uint16_t quantityOfInputs = (uint16_t)frame[4] << 8 | (uint16_t)frame[5];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3305      	adds	r3, #5
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	837b      	strh	r3, [r7, #26]

    if ((startAddress + quantityOfInputs) > slave->numDiscreteInputs)
 8001aee:	8bba      	ldrh	r2, [r7, #28]
 8001af0:	8b7b      	ldrh	r3, [r7, #26]
 8001af2:	4413      	add	r3, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d907      	bls.n	8001b0e <handleReadDiscreteInputs+0x5e>
    {
        generateModbusException(frame, ILLEGAL_DATA_ADDRESS, response, responseLength);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	2102      	movs	r1, #2
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff ff99 	bl	8001a3c <generateModbusException>
        return FALSE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e091      	b.n	8001c32 <handleReadDiscreteInputs+0x182>
    }

    response[0] = slave->slaveID;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	701a      	strb	r2, [r3, #0]
    response[1] = frame[1];
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	701a      	strb	r2, [r3, #0]
    response[2] = (quantityOfInputs + 7) / 8;
 8001b22:	8b7b      	ldrh	r3, [r7, #26]
 8001b24:	3307      	adds	r3, #7
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da00      	bge.n	8001b2c <handleReadDiscreteInputs+0x7c>
 8001b2a:	3307      	adds	r3, #7
 8001b2c:	10db      	asrs	r3, r3, #3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3302      	adds	r3, #2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]

    for (uint16_t i = 0; i < quantityOfInputs; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	83fb      	strh	r3, [r7, #30]
 8001b3c:	e046      	b.n	8001bcc <handleReadDiscreteInputs+0x11c>
    {
        bool state;
        state = dbGetDiscreteInputState(slave->discreteInputs, startAddress + i);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6918      	ldr	r0, [r3, #16]
 8001b42:	8bba      	ldrh	r2, [r7, #28]
 8001b44:	8bfb      	ldrh	r3, [r7, #30]
 8001b46:	4413      	add	r3, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff fe47 	bl	80017dc <dbGetDiscreteInputState>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	75fb      	strb	r3, [r7, #23]
        if (state)
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01a      	beq.n	8001b8e <handleReadDiscreteInputs+0xde>
        {
            response[3 + (i / 8)] |= (1 << (i % 8));
 8001b58:	8bfb      	ldrh	r3, [r7, #30]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	3303      	adds	r3, #3
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	8bfb      	ldrh	r3, [r7, #30]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	2101      	movs	r1, #1
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b25a      	sxtb	r2, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	3303      	adds	r3, #3
 8001b82:	4619      	mov	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	440b      	add	r3, r1
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e01b      	b.n	8001bc6 <handleReadDiscreteInputs+0x116>
        }
        else
        {
            response[3 + (i / 8)] &= ~(1 << (i % 8));
 8001b8e:	8bfb      	ldrh	r3, [r7, #30]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	b298      	uxth	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	3303      	adds	r3, #3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	8bfb      	ldrh	r3, [r7, #30]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	3303      	adds	r3, #3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantityOfInputs; i++)
 8001bc6:	8bfb      	ldrh	r3, [r7, #30]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	83fb      	strh	r3, [r7, #30]
 8001bcc:	8bfa      	ldrh	r2, [r7, #30]
 8001bce:	8b7b      	ldrh	r3, [r7, #26]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3b4      	bcc.n	8001b3e <handleReadDiscreteInputs+0x8e>
        }
    }

    uint16_t crc = modbus_crc16(response, RESPONSE_HEADER_LENGTH + response[BYTE_COUNT_OFFSET]);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3303      	adds	r3, #3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff feed 	bl	80019c0 <modbus_crc16>
 8001be6:	4603      	mov	r3, r0
 8001be8:	833b      	strh	r3, [r7, #24]
    response[CRC_LOW_BYTE_OFFSET + response[BYTE_COUNT_OFFSET]] = crc & 0xFF;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3302      	adds	r3, #2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	8b3a      	ldrh	r2, [r7, #24]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]
    response[CRC_HIGH_BYTE_OFFSET + response[BYTE_COUNT_OFFSET]] = (crc >> 8) & 0xFF;
 8001bfe:	8b3b      	ldrh	r3, [r7, #24]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3302      	adds	r3, #2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	440b      	add	r3, r1
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    printDebug("crc=%04X\n", crc);
 8001c16:	8b3b      	ldrh	r3, [r7, #24]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	@ (8001c3c <handleReadDiscreteInputs+0x18c>)
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7fe fc4b 	bl	80004b8 <myPrintf>

    *responseLength = EXCEPTION_RESPONSE_LENGTH + response[BYTE_COUNT_OFFSET];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3302      	adds	r3, #2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3305      	adds	r3, #5
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	08009f80 	.word	0x08009f80

08001c40 <handleReadHoldingRegisters>:

static bool handleReadHoldingRegisters(const uint8_t *frame, ModbusSlaveData *slave, uint8_t *response, uint16_t *responseLength)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
    uint16_t startAddress = (uint16_t)frame[2] << 8 | (uint16_t)frame[3];
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3302      	adds	r3, #2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3303      	adds	r3, #3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	83bb      	strh	r3, [r7, #28]
    uint16_t quantityOfRegisters = (uint16_t)frame[4] << 8 | (uint16_t)frame[5];
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3305      	adds	r3, #5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	837b      	strh	r3, [r7, #26]

    if ((startAddress + quantityOfRegisters) > slave->numHoldingRegs)
 8001c7e:	8bba      	ldrh	r2, [r7, #28]
 8001c80:	8b7b      	ldrh	r3, [r7, #26]
 8001c82:	4413      	add	r3, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d907      	bls.n	8001c9e <handleReadHoldingRegisters+0x5e>
    {
        generateModbusException(frame, ILLEGAL_DATA_ADDRESS, response, responseLength);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	2102      	movs	r1, #2
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fed1 	bl	8001a3c <generateModbusException>
        return FALSE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e067      	b.n	8001d6e <handleReadHoldingRegisters+0x12e>
    }

    response[0] = slave->slaveID;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	701a      	strb	r2, [r3, #0]
    response[1] = frame[1];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]
    response[2] = quantityOfRegisters * 2;
 8001cb2:	8b7b      	ldrh	r3, [r7, #26]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	0052      	lsls	r2, r2, #1
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]

    for (uint16_t i = 0; i < quantityOfRegisters; i++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	83fb      	strh	r3, [r7, #30]
 8001cc4:	e020      	b.n	8001d08 <handleReadHoldingRegisters+0xc8>
    {
        uint16_t value;
        value = dbGetHoldingRegister(slave->holdingRegisters, startAddress + i);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	6858      	ldr	r0, [r3, #4]
 8001cca:	8bba      	ldrh	r2, [r7, #28]
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7ff fde0 	bl	8001896 <dbGetHoldingRegister>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	82fb      	strh	r3, [r7, #22]
        response[3 + (i * 2)] = (value >> 8) & 0xFF;
 8001cda:	8afb      	ldrh	r3, [r7, #22]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	8bfb      	ldrh	r3, [r7, #30]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	440b      	add	r3, r1
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
        response[4 + (i * 2)] = value & 0xFF;
 8001cf0:	8bfb      	ldrh	r3, [r7, #30]
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	8afa      	ldrh	r2, [r7, #22]
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantityOfRegisters; i++)
 8001d02:	8bfb      	ldrh	r3, [r7, #30]
 8001d04:	3301      	adds	r3, #1
 8001d06:	83fb      	strh	r3, [r7, #30]
 8001d08:	8bfa      	ldrh	r2, [r7, #30]
 8001d0a:	8b7b      	ldrh	r3, [r7, #26]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d3da      	bcc.n	8001cc6 <handleReadHoldingRegisters+0x86>
    }

    uint16_t crc = modbus_crc16(response, RESPONSE_HEADER_LENGTH + response[BYTE_COUNT_OFFSET]);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3302      	adds	r3, #2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3303      	adds	r3, #3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fe4f 	bl	80019c0 <modbus_crc16>
 8001d22:	4603      	mov	r3, r0
 8001d24:	833b      	strh	r3, [r7, #24]
    response[CRC_LOW_BYTE_OFFSET + response[BYTE_COUNT_OFFSET]] = crc & 0xFF;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	8b3a      	ldrh	r2, [r7, #24]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
    response[CRC_HIGH_BYTE_OFFSET + response[BYTE_COUNT_OFFSET]] = (crc >> 8) & 0xFF;
 8001d3a:	8b3b      	ldrh	r3, [r7, #24]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3302      	adds	r3, #2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	440b      	add	r3, r1
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    printDebug("crc=%04X\n", crc);
 8001d52:	8b3b      	ldrh	r3, [r7, #24]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <handleReadHoldingRegisters+0x138>)
 8001d58:	2004      	movs	r0, #4
 8001d5a:	f7fe fbad 	bl	80004b8 <myPrintf>

    *responseLength = EXCEPTION_RESPONSE_LENGTH + response[BYTE_COUNT_OFFSET];
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3302      	adds	r3, #2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	3305      	adds	r3, #5
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08009f80 	.word	0x08009f80

08001d7c <handleWriteMultipleRegisters>:

static bool handleWriteMultipleRegisters(const uint8_t *frame, ModbusSlaveData *slave, uint8_t *response, uint16_t *responseLength)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
    uint16_t startAddress = (uint16_t)frame[2] << 8 | (uint16_t)frame[3];
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3303      	adds	r3, #3
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	837b      	strh	r3, [r7, #26]
    uint16_t quantityOfRegisters = (uint16_t)frame[4] << 8 | (uint16_t)frame[5];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3305      	adds	r3, #5
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	833b      	strh	r3, [r7, #24]
    uint8_t byteCount = frame[6];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3306      	adds	r3, #6
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	75fb      	strb	r3, [r7, #23]

    if ((startAddress + quantityOfRegisters) > slave->numHoldingRegs)
 8001dc2:	8b7a      	ldrh	r2, [r7, #26]
 8001dc4:	8b3b      	ldrh	r3, [r7, #24]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d907      	bls.n	8001de2 <handleWriteMultipleRegisters+0x66>
    {
        generateModbusException(frame, ILLEGAL_DATA_ADDRESS, response, responseLength);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff fe2f 	bl	8001a3c <generateModbusException>
        return FALSE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e05d      	b.n	8001e9e <handleWriteMultipleRegisters+0x122>
    }

    for (uint16_t i = 0; i < quantityOfRegisters; i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	83fb      	strh	r3, [r7, #30]
 8001de6:	e020      	b.n	8001e2a <handleWriteMultipleRegisters+0xae>
    {
        uint16_t value = (uint16_t)frame[7 + (i * 2)] << 8 | (uint16_t)frame[8 + (i * 2)];
 8001de8:	8bfb      	ldrh	r3, [r7, #30]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	3307      	adds	r3, #7
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	8bfb      	ldrh	r3, [r7, #30]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4619      	mov	r1, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	440b      	add	r3, r1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	827b      	strh	r3, [r7, #18]
        dbSetHoldingRegister(slave->holdingRegisters, startAddress + i, value);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6858      	ldr	r0, [r3, #4]
 8001e14:	8b7a      	ldrh	r2, [r7, #26]
 8001e16:	8bfb      	ldrh	r3, [r7, #30]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	8a7b      	ldrh	r3, [r7, #18]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f7ff fd49 	bl	80018b6 <dbSetHoldingRegister>
    for (uint16_t i = 0; i < quantityOfRegisters; i++)
 8001e24:	8bfb      	ldrh	r3, [r7, #30]
 8001e26:	3301      	adds	r3, #1
 8001e28:	83fb      	strh	r3, [r7, #30]
 8001e2a:	8bfa      	ldrh	r2, [r7, #30]
 8001e2c:	8b3b      	ldrh	r3, [r7, #24]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3da      	bcc.n	8001de8 <handleWriteMultipleRegisters+0x6c>
    }

    for (uint16_t i = 0; i < 6; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	83bb      	strh	r3, [r7, #28]
 8001e36:	e00a      	b.n	8001e4e <handleWriteMultipleRegisters+0xd2>
    {
        response[i] = frame[i];
 8001e38:	8bbb      	ldrh	r3, [r7, #28]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	441a      	add	r2, r3
 8001e3e:	8bbb      	ldrh	r3, [r7, #28]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	440b      	add	r3, r1
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < 6; i++)
 8001e48:	8bbb      	ldrh	r3, [r7, #28]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	83bb      	strh	r3, [r7, #28]
 8001e4e:	8bbb      	ldrh	r3, [r7, #28]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d9f1      	bls.n	8001e38 <handleWriteMultipleRegisters+0xbc>
    }

    uint16_t crc = modbus_crc16(response, 6);
 8001e54:	2106      	movs	r1, #6
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fdb2 	bl	80019c0 <modbus_crc16>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	82bb      	strh	r3, [r7, #20]
    response[6] = crc & 0xFF;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3306      	adds	r3, #6
 8001e64:	8aba      	ldrh	r2, [r7, #20]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
    response[7] = (crc >> 8) & 0xFF;
 8001e6a:	8abb      	ldrh	r3, [r7, #20]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3307      	adds	r3, #7
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]

    printDebug("crc=%04X\n", crc);
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	490a      	ldr	r1, [pc, #40]	@ (8001ea8 <handleWriteMultipleRegisters+0x12c>)
 8001e7e:	2004      	movs	r0, #4
 8001e80:	f7fe fb1a 	bl	80004b8 <myPrintf>

    *responseLength = 8;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2208      	movs	r2, #8
 8001e88:	801a      	strh	r2, [r3, #0]

        slaveCallback(startAddress + HOLDING_REGISTERS_START_ADDRESS, quantityOfRegisters);
 8001e8a:	8b7b      	ldrh	r3, [r7, #26]
 8001e8c:	f503 431c 	add.w	r3, r3, #39936	@ 0x9c00
 8001e90:	3341      	adds	r3, #65	@ 0x41
 8001e92:	8b3a      	ldrh	r2, [r7, #24]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fc44 	bl	8000724 <slaveCallback>
    return TRUE;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08009f80 	.word	0x08009f80

08001eac <getModSlaveFrameLen>:



// Function to calculate the length of the Modbus frame
uint16_t getModSlaveFrameLen(const uint8_t *frame)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	   uint8_t function_code = frame[1];
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	73fb      	strb	r3, [r7, #15]

	    switch (function_code) {
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	dc17      	bgt.n	8001ef2 <getModSlaveFrameLen+0x46>
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	da0c      	bge.n	8001ee0 <getModSlaveFrameLen+0x34>
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	dc02      	bgt.n	8001ed0 <getModSlaveFrameLen+0x24>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dc04      	bgt.n	8001ed8 <getModSlaveFrameLen+0x2c>
 8001ece:	e010      	b.n	8001ef2 <getModSlaveFrameLen+0x46>
 8001ed0:	3b05      	subs	r3, #5
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d80d      	bhi.n	8001ef2 <getModSlaveFrameLen+0x46>
 8001ed6:	e001      	b.n	8001edc <getModSlaveFrameLen+0x30>
	        case 1: case 2: case 3: case 4: // Read Coils, Inputs, Holding Registers, Input Registers
	            return 8;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	e00c      	b.n	8001ef6 <getModSlaveFrameLen+0x4a>
	        case 5: case 6: // Write Single Coil/Register
	            return 8;
 8001edc:	2308      	movs	r3, #8
 8001ede:	e00a      	b.n	8001ef6 <getModSlaveFrameLen+0x4a>
	        case 15: case 16: { // Write Multiple Coils/Registers
	            uint8_t byte_count = frame[6];
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3306      	adds	r3, #6
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	73bb      	strb	r3, [r7, #14]
	            return 9 + byte_count;
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3309      	adds	r3, #9
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	e001      	b.n	8001ef6 <getModSlaveFrameLen+0x4a>
	        }
	        default:
	            return -1; // Unsupported function code
 8001ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	    }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <parseModbusFrame>:
// slave: Pointer to the ModbusSlaveData structure
// response: Pointer to the response buffer
// responseLength: Pointer to the length of the response buffer
// Returns TRUE if the frame is valid, FALSE otherwise
static bool parseModbusFrame(const uint8_t *frame, uint16_t length, ModbusSlaveData *slave, uint8_t *response, uint16_t *responseLength)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
    ExceptionCodes exceptionCode = NO_EXCEPTION;
 8001f14:	2300      	movs	r3, #0
 8001f16:	75fb      	strb	r3, [r7, #23]

    // A valid Modbus frame must be at least 4 bytes long (address, function, data, CRC)
    if (length < MIN_MODBUS_FRAME_LENGTH)
 8001f18:	897b      	ldrh	r3, [r7, #10]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d809      	bhi.n	8001f32 <parseModbusFrame+0x2e>
    {
        printDebug("Invalid frame length, function code:%d\n", frame[1]);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	493d      	ldr	r1, [pc, #244]	@ (800201c <parseModbusFrame+0x118>)
 8001f28:	2004      	movs	r0, #4
 8001f2a:	f7fe fac5 	bl	80004b8 <myPrintf>
        return FALSE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e06f      	b.n	8002012 <parseModbusFrame+0x10e>
    }

    // Check if the slave ID matches or if it's a broadcast message (slave ID 0)
    if (frame[0] != slave->slaveID && frame[0] != MODBUS_BROADCAST_ADDRESS)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d00d      	beq.n	8001f5a <parseModbusFrame+0x56>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <parseModbusFrame+0x56>
    {
        printDebug("Invalid slave ID, function code:%d\n", frame[1]);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4934      	ldr	r1, [pc, #208]	@ (8002020 <parseModbusFrame+0x11c>)
 8001f50:	2004      	movs	r0, #4
 8001f52:	f7fe fab1 	bl	80004b8 <myPrintf>
        return FALSE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e05b      	b.n	8002012 <parseModbusFrame+0x10e>
    }

    // Calculate the CRC of the frame excluding the last two bytes (CRC)
    uint16_t calculatedCrc = modbus_crc16(frame, length - CRC_LENGTH);
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	3b02      	subs	r3, #2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fd2c 	bl	80019c0 <modbus_crc16>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	82bb      	strh	r3, [r7, #20]

    // Extract the CRC from the frame (last two bytes)
    uint16_t receivedCrc = (uint16_t)frame[length - CRC_LENGTH] | ((uint16_t)frame[length - 1] << 8);
 8001f6c:	897b      	ldrh	r3, [r7, #10]
 8001f6e:	3b02      	subs	r3, #2
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	897b      	ldrh	r3, [r7, #10]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	440b      	add	r3, r1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	827b      	strh	r3, [r7, #18]

    printDebug("receivedCRC=%04X calculatedCRC=%04X\n", receivedCrc, calculatedCrc);
 8001f8c:	8a7a      	ldrh	r2, [r7, #18]
 8001f8e:	8abb      	ldrh	r3, [r7, #20]
 8001f90:	4924      	ldr	r1, [pc, #144]	@ (8002024 <parseModbusFrame+0x120>)
 8001f92:	2004      	movs	r0, #4
 8001f94:	f7fe fa90 	bl	80004b8 <myPrintf>

    // Check if the calculated CRC matches the received CRC
    if (calculatedCrc != receivedCrc)
 8001f98:	8aba      	ldrh	r2, [r7, #20]
 8001f9a:	8a7b      	ldrh	r3, [r7, #18]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d009      	beq.n	8001fb4 <parseModbusFrame+0xb0>
    {
        printDebug("CRC check failed, function code:%d\n",frame[1]);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	491f      	ldr	r1, [pc, #124]	@ (8002028 <parseModbusFrame+0x124>)
 8001faa:	2004      	movs	r0, #4
 8001fac:	f7fe fa84 	bl	80004b8 <myPrintf>
        return FALSE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e02e      	b.n	8002012 <parseModbusFrame+0x10e>
    }

    // Extract the function code from the frame (second byte)
    uint8_t functionCode = frame[1];
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	747b      	strb	r3, [r7, #17]

    // Handle the function code
    switch (functionCode)
 8001fbc:	7c7b      	ldrb	r3, [r7, #17]
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d016      	beq.n	8001ff0 <parseModbusFrame+0xec>
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	dc1c      	bgt.n	8002000 <parseModbusFrame+0xfc>
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d002      	beq.n	8001fd0 <parseModbusFrame+0xcc>
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d008      	beq.n	8001fe0 <parseModbusFrame+0xdc>
 8001fce:	e017      	b.n	8002000 <parseModbusFrame+0xfc>
    {
    case READ_DISCRETE_INPUTS:
        return handleReadDiscreteInputs(frame, slave, response, responseLength);
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fd6a 	bl	8001ab0 <handleReadDiscreteInputs>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	e018      	b.n	8002012 <parseModbusFrame+0x10e>
    case READ_HOLDING_REGISTERS:
        return handleReadHoldingRegisters(frame, slave, response, responseLength);
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fe2a 	bl	8001c40 <handleReadHoldingRegisters>
 8001fec:	4603      	mov	r3, r0
 8001fee:	e010      	b.n	8002012 <parseModbusFrame+0x10e>
    case WRITE_MULTIPLE_REGISTERS:
        return handleWriteMultipleRegisters(frame, slave, response, responseLength);
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff fec0 	bl	8001d7c <handleWriteMultipleRegisters>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	e008      	b.n	8002012 <parseModbusFrame+0x10e>
    default:
        exceptionCode = ILLEGAL_FUNCTION;
 8002000:	2301      	movs	r3, #1
 8002002:	75fb      	strb	r3, [r7, #23]
        generateModbusException(frame, exceptionCode, response, responseLength);
 8002004:	7df9      	ldrb	r1, [r7, #23]
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fd16 	bl	8001a3c <generateModbusException>
        return FALSE;
 8002010:	2300      	movs	r3, #0
    }
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08009f94 	.word	0x08009f94
 8002020:	08009fc4 	.word	0x08009fc4
 8002024:	08009ff0 	.word	0x08009ff0
 8002028:	0800a01c 	.word	0x0800a01c

0800202c <handleModbusRequest>:
// slave: Pointer to the ModbusSlaveData structure
// response: Pointer to the response buffer
// responseLength: Pointer to the length of the response buffer
// Returns TRUE if the request is handled, FALSE otherwise
bool handleModbusRequest(const uint8_t *frame, uint16_t length, ModbusSlaveData *slave)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0a8      	sub	sp, #160	@ 0xa0
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	460b      	mov	r3, r1
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	817b      	strh	r3, [r7, #10]
    uint8_t response[128] = {0};
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	227c      	movs	r2, #124	@ 0x7c
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f006 fd78 	bl	8008b3c <memset>
    uint16_t responseLength = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	82fb      	strh	r3, [r7, #22]

    // Parse the Modbus frame
    if (parseModbusFrame(frame, length, slave, response, &responseLength))
 8002050:	f107 0218 	add.w	r2, r7, #24
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	f107 0316 	add.w	r3, r7, #22
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f7ff ff4f 	bl	8001f04 <parseModbusFrame>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <handleModbusRequest+0x62>
    {
        // Write frame to serial
        printDebug("Modbus frame processed\n");
 800206c:	4911      	ldr	r1, [pc, #68]	@ (80020b4 <handleModbusRequest+0x88>)
 800206e:	2004      	movs	r0, #4
 8002070:	f7fe fa22 	bl	80004b8 <myPrintf>
        if(response[0] != MODBUS_BROADCAST_ADDRESS)
 8002074:	7e3b      	ldrb	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <handleModbusRequest+0x5e>
        {
            RS485_Transmit(response, responseLength);
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	461a      	mov	r2, r3
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fb17 	bl	80006b8 <RS485_Transmit>
        }

        return TRUE; // Frame is valid and response is prepared
 800208a:	2301      	movs	r3, #1
 800208c:	e00e      	b.n	80020ac <handleModbusRequest+0x80>
    }
    else
    {
        // Write exception response to serial
        if ((response[0] != MODBUS_BROADCAST_ADDRESS) && (responseLength > 0))
 800208e:	7e3b      	ldrb	r3, [r7, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <handleModbusRequest+0x7e>
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <handleModbusRequest+0x7e>
        {
            RS485_Transmit(response, responseLength);
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	461a      	mov	r2, r3
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fb07 	bl	80006b8 <RS485_Transmit>
        }
        
        return FALSE; // Frame is invalid or error occurred
 80020aa:	2300      	movs	r3, #0
    }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3798      	adds	r7, #152	@ 0x98
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0800a048 	.word	0x0800a048

080020b8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af04      	add	r7, sp, #16
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	2301      	movs	r3, #1
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2301      	movs	r3, #1
 80020e2:	2200      	movs	r2, #0
 80020e4:	2178      	movs	r1, #120	@ 0x78
 80020e6:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <ssd1306_WriteCommand+0x2c>)
 80020e8:	f001 f906 	bl	80032f8 <HAL_I2C_Mem_Write>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000778 	.word	0x20000778

080020f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f04f 32ff 	mov.w	r2, #4294967295
 800210a:	9202      	str	r2, [sp, #8]
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	2240      	movs	r2, #64	@ 0x40
 8002116:	2178      	movs	r1, #120	@ 0x78
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <ssd1306_WriteData+0x30>)
 800211a:	f001 f8ed 	bl	80032f8 <HAL_I2C_Mem_Write>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000778 	.word	0x20000778

0800212c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002130:	f7ff ffc2 	bl	80020b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002134:	2064      	movs	r0, #100	@ 0x64
 8002136:	f000 faf9 	bl	800272c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800213a:	2000      	movs	r0, #0
 800213c:	f000 fa78 	bl	8002630 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002140:	2020      	movs	r0, #32
 8002142:	f7ff ffc1 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff ffbe 	bl	80020c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800214c:	20b0      	movs	r0, #176	@ 0xb0
 800214e:	f7ff ffbb 	bl	80020c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002152:	20c8      	movs	r0, #200	@ 0xc8
 8002154:	f7ff ffb8 	bl	80020c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff ffb5 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800215e:	2010      	movs	r0, #16
 8002160:	f7ff ffb2 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002164:	2040      	movs	r0, #64	@ 0x40
 8002166:	f7ff ffaf 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800216a:	20ff      	movs	r0, #255	@ 0xff
 800216c:	f000 fa4d 	bl	800260a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002170:	20a1      	movs	r0, #161	@ 0xa1
 8002172:	f7ff ffa9 	bl	80020c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002176:	20a6      	movs	r0, #166	@ 0xa6
 8002178:	f7ff ffa6 	bl	80020c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800217c:	20a8      	movs	r0, #168	@ 0xa8
 800217e:	f7ff ffa3 	bl	80020c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002182:	203f      	movs	r0, #63	@ 0x3f
 8002184:	f7ff ffa0 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002188:	20a4      	movs	r0, #164	@ 0xa4
 800218a:	f7ff ff9d 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800218e:	20d3      	movs	r0, #211	@ 0xd3
 8002190:	f7ff ff9a 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff97 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800219a:	20d5      	movs	r0, #213	@ 0xd5
 800219c:	f7ff ff94 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80021a0:	20f0      	movs	r0, #240	@ 0xf0
 80021a2:	f7ff ff91 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80021a6:	20d9      	movs	r0, #217	@ 0xd9
 80021a8:	f7ff ff8e 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80021ac:	2022      	movs	r0, #34	@ 0x22
 80021ae:	f7ff ff8b 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80021b2:	20da      	movs	r0, #218	@ 0xda
 80021b4:	f7ff ff88 	bl	80020c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80021b8:	2012      	movs	r0, #18
 80021ba:	f7ff ff85 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80021be:	20db      	movs	r0, #219	@ 0xdb
 80021c0:	f7ff ff82 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80021c4:	2020      	movs	r0, #32
 80021c6:	f7ff ff7f 	bl	80020c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80021ca:	208d      	movs	r0, #141	@ 0x8d
 80021cc:	f7ff ff7c 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80021d0:	2014      	movs	r0, #20
 80021d2:	f7ff ff79 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fa2a 	bl	8002630 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80021dc:	2000      	movs	r0, #0
 80021de:	f000 f80f 	bl	8002200 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80021e2:	f000 f825 	bl	8002230 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <ssd1306_Init+0xd0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <ssd1306_Init+0xd0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80021f2:	4b02      	ldr	r3, [pc, #8]	@ (80021fc <ssd1306_Init+0xd0>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	711a      	strb	r2, [r3, #4]
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000d4c 	.word	0x20000d4c

08002200 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <ssd1306_Fill+0x14>
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <ssd1306_Fill+0x16>
 8002214:	23ff      	movs	r3, #255	@ 0xff
 8002216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221a:	4619      	mov	r1, r3
 800221c:	4803      	ldr	r0, [pc, #12]	@ (800222c <ssd1306_Fill+0x2c>)
 800221e:	f006 fc8d 	bl	8008b3c <memset>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000094c 	.word	0x2000094c

08002230 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e016      	b.n	800226a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	3b50      	subs	r3, #80	@ 0x50
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff40 	bl	80020c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff ff3d 	bl	80020c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff ff3a 	bl	80020c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4a08      	ldr	r2, [pc, #32]	@ (800227c <ssd1306_UpdateScreen+0x4c>)
 800225a:	4413      	add	r3, r2
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff4a 	bl	80020f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	3301      	adds	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b07      	cmp	r3, #7
 800226e:	d9e5      	bls.n	800223c <ssd1306_UpdateScreen+0xc>
    }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000094c 	.word	0x2000094c

08002280 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	460b      	mov	r3, r1
 800228c:	71bb      	strb	r3, [r7, #6]
 800228e:	4613      	mov	r3, r2
 8002290:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db3d      	blt.n	8002316 <ssd1306_DrawPixel+0x96>
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	2b3f      	cmp	r3, #63	@ 0x3f
 800229e:	d83a      	bhi.n	8002316 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80022a0:	797b      	ldrb	r3, [r7, #5]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d11a      	bne.n	80022dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022a6:	79fa      	ldrb	r2, [r7, #7]
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	08db      	lsrs	r3, r3, #3
 80022ac:	b2d8      	uxtb	r0, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	01db      	lsls	r3, r3, #7
 80022b2:	4413      	add	r3, r2
 80022b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <ssd1306_DrawPixel+0xa4>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	b25a      	sxtb	r2, r3
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	b25b      	sxtb	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b259      	sxtb	r1, r3
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	4603      	mov	r3, r0
 80022d0:	01db      	lsls	r3, r3, #7
 80022d2:	4413      	add	r3, r2
 80022d4:	b2c9      	uxtb	r1, r1
 80022d6:	4a13      	ldr	r2, [pc, #76]	@ (8002324 <ssd1306_DrawPixel+0xa4>)
 80022d8:	54d1      	strb	r1, [r2, r3]
 80022da:	e01d      	b.n	8002318 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022dc:	79fa      	ldrb	r2, [r7, #7]
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	b2d8      	uxtb	r0, r3
 80022e4:	4603      	mov	r3, r0
 80022e6:	01db      	lsls	r3, r3, #7
 80022e8:	4413      	add	r3, r2
 80022ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002324 <ssd1306_DrawPixel+0xa4>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	b25a      	sxtb	r2, r3
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	b25b      	sxtb	r3, r3
 8002302:	4013      	ands	r3, r2
 8002304:	b259      	sxtb	r1, r3
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	4603      	mov	r3, r0
 800230a:	01db      	lsls	r3, r3, #7
 800230c:	4413      	add	r3, r2
 800230e:	b2c9      	uxtb	r1, r1
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <ssd1306_DrawPixel+0xa4>)
 8002312:	54d1      	strb	r1, [r2, r3]
 8002314:	e000      	b.n	8002318 <ssd1306_DrawPixel+0x98>
        return;
 8002316:	bf00      	nop
    }
}
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	2000094c 	.word	0x2000094c

08002328 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	4604      	mov	r4, r0
 8002330:	4638      	mov	r0, r7
 8002332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002336:	4623      	mov	r3, r4
 8002338:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b1f      	cmp	r3, #31
 800233e:	d902      	bls.n	8002346 <ssd1306_WriteChar+0x1e>
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b7e      	cmp	r3, #126	@ 0x7e
 8002344:	d901      	bls.n	800234a <ssd1306_WriteChar+0x22>
        return 0;
 8002346:	2300      	movs	r3, #0
 8002348:	e077      	b.n	800243a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800234a:	4b3e      	ldr	r3, [pc, #248]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	783b      	ldrb	r3, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	2b80      	cmp	r3, #128	@ 0x80
 8002356:	dc06      	bgt.n	8002366 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002358:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 800235a:	885b      	ldrh	r3, [r3, #2]
 800235c:	461a      	mov	r2, r3
 800235e:	787b      	ldrb	r3, [r7, #1]
 8002360:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002362:	2b40      	cmp	r3, #64	@ 0x40
 8002364:	dd01      	ble.n	800236a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e067      	b.n	800243a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e04e      	b.n	800240e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3b20      	subs	r3, #32
 8002376:	7879      	ldrb	r1, [r7, #1]
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4619      	mov	r1, r3
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	440b      	add	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e036      	b.n	80023fe <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80023a0:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	b2d8      	uxtb	r0, r3
 80023ae:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 80023b0:	885b      	ldrh	r3, [r3, #2]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7ff ff5d 	bl	8002280 <ssd1306_DrawPixel>
 80023c6:	e017      	b.n	80023f8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	b2d8      	uxtb	r0, r3
 80023d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 80023d8:	885b      	ldrh	r3, [r3, #2]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	b2d9      	uxtb	r1, r3
 80023e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7ff ff44 	bl	8002280 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	783b      	ldrb	r3, [r7, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4293      	cmp	r3, r2
 8002406:	d3c3      	bcc.n	8002390 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	787b      	ldrb	r3, [r7, #1]
 8002410:	461a      	mov	r2, r3
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4293      	cmp	r3, r2
 8002416:	d3ab      	bcc.n	8002370 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d005      	beq.n	800242e <ssd1306_WriteChar+0x106>
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	3a20      	subs	r2, #32
 8002428:	440a      	add	r2, r1
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	e000      	b.n	8002430 <ssd1306_WriteChar+0x108>
 800242e:	783a      	ldrb	r2, [r7, #0]
 8002430:	4413      	add	r3, r2
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <ssd1306_WriteChar+0x11c>)
 8002436:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
 8002442:	bf00      	nop
 8002444:	20000d4c 	.word	0x20000d4c

08002448 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	4638      	mov	r0, r7
 8002452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002456:	e013      	b.n	8002480 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	7818      	ldrb	r0, [r3, #0]
 800245c:	7e3b      	ldrb	r3, [r7, #24]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	463b      	mov	r3, r7
 8002462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002464:	f7ff ff60 	bl	8002328 <ssd1306_WriteChar>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d002      	beq.n	800247a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	e008      	b.n	800248c <ssd1306_WriteString+0x44>
        }
        str++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3301      	adds	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e7      	bne.n	8002458 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	781b      	ldrb	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <ssd1306_SetCursor+0x2c>)
 80024aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <ssd1306_SetCursor+0x2c>)
 80024b2:	805a      	strh	r2, [r3, #2]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20000d4c 	.word	0x20000d4c

080024c4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	4603      	mov	r3, r0
 80024d8:	71bb      	strb	r3, [r7, #6]
 80024da:	460b      	mov	r3, r1
 80024dc:	717b      	strb	r3, [r7, #5]
 80024de:	4613      	mov	r3, r2
 80024e0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80024e2:	797a      	ldrb	r2, [r7, #5]
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bfb8      	it	lt
 80024ec:	425b      	neglt	r3, r3
 80024ee:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80024f0:	793a      	ldrb	r2, [r7, #4]
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bfb8      	it	lt
 80024fa:	425b      	neglt	r3, r3
 80024fc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	797b      	ldrb	r3, [r7, #5]
 8002502:	429a      	cmp	r2, r3
 8002504:	d201      	bcs.n	800250a <ssd1306_Line+0x46>
 8002506:	2301      	movs	r3, #1
 8002508:	e001      	b.n	800250e <ssd1306_Line+0x4a>
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002510:	79ba      	ldrb	r2, [r7, #6]
 8002512:	793b      	ldrb	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d201      	bcs.n	800251c <ssd1306_Line+0x58>
 8002518:	2301      	movs	r3, #1
 800251a:	e001      	b.n	8002520 <ssd1306_Line+0x5c>
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
 8002520:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800252a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800252e:	7939      	ldrb	r1, [r7, #4]
 8002530:	797b      	ldrb	r3, [r7, #5]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fea4 	bl	8002280 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002538:	e024      	b.n	8002584 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800253a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800253e:	79b9      	ldrb	r1, [r7, #6]
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fe9c 	bl	8002280 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	425b      	negs	r3, r3
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	dd08      	ble.n	800256a <ssd1306_Line+0xa6>
            error -= deltaY;
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4413      	add	r3, r2
 8002568:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	429a      	cmp	r2, r3
 8002570:	da08      	bge.n	8002584 <ssd1306_Line+0xc0>
            error += deltaX;
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	4413      	add	r3, r2
 8002582:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002584:	79fa      	ldrb	r2, [r7, #7]
 8002586:	797b      	ldrb	r3, [r7, #5]
 8002588:	429a      	cmp	r2, r3
 800258a:	d1d6      	bne.n	800253a <ssd1306_Line+0x76>
 800258c:	79ba      	ldrb	r2, [r7, #6]
 800258e:	793b      	ldrb	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d1d2      	bne.n	800253a <ssd1306_Line+0x76>
        }
    }
    return;
 8002594:	bf00      	nop
}
 8002596:	3724      	adds	r7, #36	@ 0x24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}

0800259c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b085      	sub	sp, #20
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	71fb      	strb	r3, [r7, #7]
 80025ae:	4603      	mov	r3, r0
 80025b0:	71bb      	strb	r3, [r7, #6]
 80025b2:	460b      	mov	r3, r1
 80025b4:	717b      	strb	r3, [r7, #5]
 80025b6:	4613      	mov	r3, r2
 80025b8:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80025ba:	79bc      	ldrb	r4, [r7, #6]
 80025bc:	797a      	ldrb	r2, [r7, #5]
 80025be:	79b9      	ldrb	r1, [r7, #6]
 80025c0:	79f8      	ldrb	r0, [r7, #7]
 80025c2:	7e3b      	ldrb	r3, [r7, #24]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	4623      	mov	r3, r4
 80025c8:	f7ff ff7c 	bl	80024c4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80025cc:	793c      	ldrb	r4, [r7, #4]
 80025ce:	797a      	ldrb	r2, [r7, #5]
 80025d0:	79b9      	ldrb	r1, [r7, #6]
 80025d2:	7978      	ldrb	r0, [r7, #5]
 80025d4:	7e3b      	ldrb	r3, [r7, #24]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4623      	mov	r3, r4
 80025da:	f7ff ff73 	bl	80024c4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80025de:	793c      	ldrb	r4, [r7, #4]
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	7939      	ldrb	r1, [r7, #4]
 80025e4:	7978      	ldrb	r0, [r7, #5]
 80025e6:	7e3b      	ldrb	r3, [r7, #24]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4623      	mov	r3, r4
 80025ec:	f7ff ff6a 	bl	80024c4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80025f0:	79bc      	ldrb	r4, [r7, #6]
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	7939      	ldrb	r1, [r7, #4]
 80025f6:	79f8      	ldrb	r0, [r7, #7]
 80025f8:	7e3b      	ldrb	r3, [r7, #24]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	4623      	mov	r3, r4
 80025fe:	f7ff ff61 	bl	80024c4 <ssd1306_Line>

    return;
 8002602:	bf00      	nop
}
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002614:	2381      	movs	r3, #129	@ 0x81
 8002616:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fd54 	bl	80020c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd50 	bl	80020c8 <ssd1306_WriteCommand>
}
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002640:	23af      	movs	r3, #175	@ 0xaf
 8002642:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <ssd1306_SetDisplayOn+0x38>)
 8002646:	2201      	movs	r2, #1
 8002648:	715a      	strb	r2, [r3, #5]
 800264a:	e004      	b.n	8002656 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800264c:	23ae      	movs	r3, #174	@ 0xae
 800264e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <ssd1306_SetDisplayOn+0x38>)
 8002652:	2200      	movs	r2, #0
 8002654:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fd35 	bl	80020c8 <ssd1306_WriteCommand>
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000d4c 	.word	0x20000d4c

0800266c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002670:	f7fe ff70 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <LoopForever+0xe>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	@ (80026b8 <LoopForever+0x16>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269a:	f006 fad5 	bl	8008c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269e:	f7fe fbbd 	bl	8000e1c <main>

080026a2 <LoopForever>:

LoopForever:
    b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80026b0:	0800a810 	.word	0x0800a810
  ldr r2, =_sbss
 80026b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80026b8:	200027a4 	.word	0x200027a4

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_Init+0x28>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <HAL_Init+0x28>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f8fc 	bl	80028ce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f7fe fe56 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7fe fe2c 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000008 	.word	0x20000008
 8002710:	20000d54 	.word	0x20000d54

08002714 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;  
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000d54 	.word	0x20000d54

0800272c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000008 	.word	0x20000008

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	@ (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	@ (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	@ (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	@ 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	@ 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff4c 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f6:	f7ff ff61 	bl	80027bc <__NVIC_GetPriorityGrouping>
 80028fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f7ff ffb1 	bl	8002868 <NVIC_EncodePriority>
 8002906:	4602      	mov	r2, r0
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff80 	bl	8002814 <__NVIC_SetPriority>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff54 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e02e      	b.n	80029a8 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002950:	2b02      	cmp	r3, #2
 8002952:	d008      	beq.n	8002966 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e020      	b.n	80029a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 020e 	bic.w	r2, r2, #14
 8002974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d005      	beq.n	80029d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e027      	b.n	8002a26 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 020e 	bic.w	r2, r2, #14
 80029e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
    }
  }
  return status;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e14e      	b.n	8002cde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8140 	beq.w	8002cd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d005      	beq.n	8002a70 <HAL_GPIO_Init+0x40>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d130      	bne.n	8002ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0201 	and.w	r2, r3, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d017      	beq.n	8002b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d123      	bne.n	8002b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	6939      	ldr	r1, [r7, #16]
 8002b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 809a 	beq.w	8002cd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba4:	4b55      	ldr	r3, [pc, #340]	@ (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a54      	ldr	r2, [pc, #336]	@ (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b52      	ldr	r3, [pc, #328]	@ (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bbc:	4a50      	ldr	r2, [pc, #320]	@ (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002be6:	d013      	beq.n	8002c10 <HAL_GPIO_Init+0x1e0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a46      	ldr	r2, [pc, #280]	@ (8002d04 <HAL_GPIO_Init+0x2d4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00d      	beq.n	8002c0c <HAL_GPIO_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a45      	ldr	r2, [pc, #276]	@ (8002d08 <HAL_GPIO_Init+0x2d8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_Init+0x1d8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a44      	ldr	r2, [pc, #272]	@ (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_GPIO_Init+0x1d4>
 8002c00:	2303      	movs	r3, #3
 8002c02:	e006      	b.n	8002c12 <HAL_GPIO_Init+0x1e2>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e004      	b.n	8002c12 <HAL_GPIO_Init+0x1e2>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e002      	b.n	8002c12 <HAL_GPIO_Init+0x1e2>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_GPIO_Init+0x1e2>
 8002c10:	2300      	movs	r3, #0
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	f002 0203 	and.w	r2, r2, #3
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	4093      	lsls	r3, r2
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c22:	4937      	ldr	r1, [pc, #220]	@ (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c30:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c54:	4a2e      	ldr	r2, [pc, #184]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c7e:	4a24      	ldr	r2, [pc, #144]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c84:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f aea9 	bne.w	8002a40 <HAL_GPIO_Init+0x10>
  }
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40010000 	.word	0x40010000
 8002d04:	48000400 	.word	0x48000400
 8002d08:	48000800 	.word	0x48000800
 8002d0c:	48000c00 	.word	0x48000c00
 8002d10:	40010400 	.word	0x40010400

08002d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e001      	b.n	8002d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fbda 	bl	800054c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08d      	b.n	8002ed2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd ffe2 	bl	8000d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	@ 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e006      	b.n	8002e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d108      	bne.n	8002e46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	e007      	b.n	8002e56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69d9      	ldr	r1, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	817b      	strh	r3, [r7, #10]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	f040 80fd 	bne.w	80030f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_I2C_Master_Transmit+0x30>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0f6      	b.n	80030fa <HAL_I2C_Master_Transmit+0x21e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f14:	f7ff fbfe 	bl	8002714 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2319      	movs	r3, #25
 8002f20:	2201      	movs	r2, #1
 8002f22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb72 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0e1      	b.n	80030fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2221      	movs	r2, #33	@ 0x21
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2210      	movs	r2, #16
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	893a      	ldrh	r2, [r7, #8]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2bff      	cmp	r3, #255	@ 0xff
 8002f66:	d906      	bls.n	8002f76 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	22ff      	movs	r2, #255	@ 0xff
 8002f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e007      	b.n	8002f86 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d024      	beq.n	8002fd8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	8979      	ldrh	r1, [r7, #10]
 8002fca:	4b4e      	ldr	r3, [pc, #312]	@ (8003104 <HAL_I2C_Master_Transmit+0x228>)
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fd6d 	bl	8003ab0 <I2C_TransferConfig>
 8002fd6:	e066      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	8979      	ldrh	r1, [r7, #10]
 8002fe0:	4b48      	ldr	r3, [pc, #288]	@ (8003104 <HAL_I2C_Master_Transmit+0x228>)
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fd62 	bl	8003ab0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fec:	e05b      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fb65 	bl	80036c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07b      	b.n	80030fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d034      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x1ca>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d130      	bne.n	80030a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2200      	movs	r2, #0
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fade 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e04d      	b.n	80030fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bff      	cmp	r3, #255	@ 0xff
 8003066:	d90e      	bls.n	8003086 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	@ 0xff
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	b2da      	uxtb	r2, r3
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fd16 	bl	8003ab0 <I2C_TransferConfig>
 8003084:	e00f      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8979      	ldrh	r1, [r7, #10]
 8003098:	2300      	movs	r3, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fd05 	bl	8003ab0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d19e      	bne.n	8002fee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	6a39      	ldr	r1, [r7, #32]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fb4b 	bl	8003750 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e01a      	b.n	80030fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2220      	movs	r2, #32
 80030ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <HAL_I2C_Master_Transmit+0x22c>)
 80030d8:	400b      	ands	r3, r1
 80030da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	80002000 	.word	0x80002000
 8003108:	fe00e800 	.word	0xfe00e800

0800310c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	f040 80db 	bne.w	80032e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_I2C_Master_Receive+0x30>
 8003138:	2302      	movs	r3, #2
 800313a:	e0d4      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003144:	f7ff fae6 	bl	8002714 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2319      	movs	r3, #25
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa5a 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0bf      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2222      	movs	r2, #34	@ 0x22
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2210      	movs	r2, #16
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	893a      	ldrh	r2, [r7, #8]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2bff      	cmp	r3, #255	@ 0xff
 8003196:	d90e      	bls.n	80031b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	4b52      	ldr	r3, [pc, #328]	@ (80032f0 <HAL_I2C_Master_Receive+0x1e4>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fc7e 	bl	8003ab0 <I2C_TransferConfig>
 80031b4:	e06d      	b.n	8003292 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	4b49      	ldr	r3, [pc, #292]	@ (80032f0 <HAL_I2C_Master_Receive+0x1e4>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fc6d 	bl	8003ab0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031d6:	e05c      	b.n	8003292 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6a39      	ldr	r1, [r7, #32]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fafb 	bl	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e07c      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d034      	beq.n	8003292 <HAL_I2C_Master_Receive+0x186>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d130      	bne.n	8003292 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2200      	movs	r2, #0
 8003238:	2180      	movs	r1, #128	@ 0x80
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f9e8 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e04d      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2bff      	cmp	r3, #255	@ 0xff
 8003252:	d90e      	bls.n	8003272 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	22ff      	movs	r2, #255	@ 0xff
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	b2da      	uxtb	r2, r3
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fc20 	bl	8003ab0 <I2C_TransferConfig>
 8003270:	e00f      	b.n	8003292 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	b2da      	uxtb	r2, r3
 8003282:	8979      	ldrh	r1, [r7, #10]
 8003284:	2300      	movs	r3, #0
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc0f 	bl	8003ab0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d19d      	bne.n	80031d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fa55 	bl	8003750 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e01a      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <HAL_I2C_Master_Receive+0x1e8>)
 80032c4:	400b      	ands	r3, r1
 80032c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	80002400 	.word	0x80002400
 80032f4:	fe00e800 	.word	0xfe00e800

080032f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	460b      	mov	r3, r1
 800330c:	813b      	strh	r3, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	f040 80f9 	bne.w	8003512 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_I2C_Mem_Write+0x34>
 8003326:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0ed      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_I2C_Mem_Write+0x4e>
 8003342:	2302      	movs	r3, #2
 8003344:	e0e6      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800334e:	f7ff f9e1 	bl	8002714 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2319      	movs	r3, #25
 800335a:	2201      	movs	r2, #1
 800335c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f955 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0d1      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2221      	movs	r2, #33	@ 0x21
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2240      	movs	r2, #64	@ 0x40
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003390:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003398:	88f8      	ldrh	r0, [r7, #6]
 800339a:	893a      	ldrh	r2, [r7, #8]
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	4603      	mov	r3, r0
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f8b9 	bl	8003520 <I2C_RequestMemoryWrite>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0a9      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2bff      	cmp	r3, #255	@ 0xff
 80033c8:	d90e      	bls.n	80033e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	22ff      	movs	r2, #255	@ 0xff
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb65 	bl	8003ab0 <I2C_TransferConfig>
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	8979      	ldrh	r1, [r7, #10]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fb54 	bl	8003ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f958 	bl	80036c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e07b      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d034      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x1c8>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d130      	bne.n	80034c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003464:	2200      	movs	r2, #0
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f8d1 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e04d      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2bff      	cmp	r3, #255	@ 0xff
 8003480:	d90e      	bls.n	80034a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	22ff      	movs	r2, #255	@ 0xff
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	b2da      	uxtb	r2, r3
 800348e:	8979      	ldrh	r1, [r7, #10]
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fb09 	bl	8003ab0 <I2C_TransferConfig>
 800349e:	e00f      	b.n	80034c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	8979      	ldrh	r1, [r7, #10]
 80034b2:	2300      	movs	r3, #0
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 faf8 	bl	8003ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d19e      	bne.n	8003408 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f93e 	bl	8003750 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e01a      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2220      	movs	r2, #32
 80034e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_I2C_Mem_Write+0x224>)
 80034f2:	400b      	ands	r3, r1
 80034f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	fe00e800 	.word	0xfe00e800

08003520 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4603      	mov	r3, r0
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	460b      	mov	r3, r1
 8003534:	813b      	strh	r3, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	8979      	ldrh	r1, [r7, #10]
 8003540:	4b20      	ldr	r3, [pc, #128]	@ (80035c4 <I2C_RequestMemoryWrite+0xa4>)
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fab1 	bl	8003ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f8b5 	bl	80036c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e02c      	b.n	80035bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003568:	893b      	ldrh	r3, [r7, #8]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	629a      	str	r2, [r3, #40]	@ 0x28
 8003572:	e015      	b.n	80035a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003574:	893b      	ldrh	r3, [r7, #8]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	b29b      	uxth	r3, r3
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f89b 	bl	80036c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e012      	b.n	80035bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003596:	893b      	ldrh	r3, [r7, #8]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2180      	movs	r1, #128	@ 0x80
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f830 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	80002000 	.word	0x80002000

080035c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d103      	bne.n	80035e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d007      	beq.n	8003604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	619a      	str	r2, [r3, #24]
  }
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003620:	e03b      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f962 	bl	80038f0 <I2C_IsErrorOccurred>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e041      	b.n	80036ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d02d      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7ff f869 	bl	8002714 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x44>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d122      	bne.n	800369a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d113      	bne.n	800369a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d0b4      	beq.n	8003622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ce:	e033      	b.n	8003738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f90b 	bl	80038f0 <I2C_IsErrorOccurred>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e031      	b.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d025      	beq.n	8003738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7ff f812 	bl	8002714 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11a      	bne.n	8003738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d013      	beq.n	8003738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d1c4      	bne.n	80036d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800375c:	e02f      	b.n	80037be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f8c4 	bl	80038f0 <I2C_IsErrorOccurred>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fe ffcf 	bl	8002714 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11a      	bne.n	80037be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d013      	beq.n	80037be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d1c8      	bne.n	800375e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037e8:	e071      	b.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f87e 	bl	80038f0 <I2C_IsErrorOccurred>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b20      	cmp	r3, #32
 800380a:	d13b      	bne.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d138      	bne.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d105      	bne.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d121      	bne.n	800387e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2204      	movs	r2, #4
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2220      	movs	r2, #32
 800384e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800385c:	400b      	ands	r3, r1
 800385e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
 800387c:	e002      	b.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003884:	f7fe ff46 	bl	8002714 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d00f      	beq.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d002      	beq.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d083      	beq.n	80037ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	fe00e800 	.word	0xfe00e800

080038f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d068      	beq.n	80039ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2210      	movs	r2, #16
 8003922:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003924:	e049      	b.n	80039ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d045      	beq.n	80039ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fe fef1 	bl	8002714 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <I2C_IsErrorOccurred+0x54>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d13a      	bne.n	80039ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003956:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003966:	d121      	bne.n	80039ac <I2C_IsErrorOccurred+0xbc>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800396e:	d01d      	beq.n	80039ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b20      	cmp	r3, #32
 8003974:	d01a      	beq.n	80039ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003984:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003986:	f7fe fec5 	bl	8002714 <HAL_GetTick>
 800398a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	e00e      	b.n	80039ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800398e:	f7fe fec1 	bl	8002714 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b19      	cmp	r3, #25
 800399a:	d907      	bls.n	80039ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80039aa:	e006      	b.n	80039ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d1e9      	bne.n	800398e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d003      	beq.n	80039d0 <I2C_IsErrorOccurred+0xe0>
 80039c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0aa      	beq.n	8003926 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2220      	movs	r2, #32
 80039de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01c      	beq.n	8003a9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff fdaf 	bl	80035c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <I2C_IsErrorOccurred+0x1bc>)
 8003a76:	400b      	ands	r3, r1
 8003a78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3728      	adds	r7, #40	@ 0x28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	fe00e800 	.word	0xfe00e800

08003ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	817b      	strh	r3, [r7, #10]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac2:	897b      	ldrh	r3, [r7, #10]
 8003ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ac8:	7a7b      	ldrb	r3, [r7, #9]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ad0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ade:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	0d5b      	lsrs	r3, r3, #21
 8003aea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003aee:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <I2C_TransferConfig+0x60>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	43db      	mvns	r3, r3
 8003af4:	ea02 0103 	and.w	r1, r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	03ff63ff 	.word	0x03ff63ff

08003b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d138      	bne.n	8003b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e032      	b.n	8003b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	@ 0x24
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d139      	bne.n	8003c34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e033      	b.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2224      	movs	r2, #36	@ 0x24
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f001 b823 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 817d 	beq.w	8003f7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c80:	4bbc      	ldr	r3, [pc, #752]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c8c:	4bb9      	ldr	r3, [pc, #740]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d15c      	bne.n	8003d52 <HAL_RCC_OscConfig+0x10e>
 8003c98:	4bb6      	ldr	r3, [pc, #728]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d155      	bne.n	8003d52 <HAL_RCC_OscConfig+0x10e>
 8003ca6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003caa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 8003cba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d102      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x94>
 8003cd2:	4ba8      	ldr	r3, [pc, #672]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	e015      	b.n	8003d04 <HAL_RCC_OscConfig+0xc0>
 8003cd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cdc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003cec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cf0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003cf4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003d00:	4b9c      	ldr	r3, [pc, #624]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d10:	fa92 f2a2 	rbit	r2, r2
 8003d14:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d1c:	fab2 f282 	clz	r2, r2
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f042 0220 	orr.w	r2, r2, #32
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f002 021f 	and.w	r2, r2, #31
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 811f 	beq.w	8003f78 <HAL_RCC_OscConfig+0x334>
 8003d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 8116 	bne.w	8003f78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f000 bfaf 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12e>
 8003d64:	4b83      	ldr	r3, [pc, #524]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a82      	ldr	r2, [pc, #520]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	e036      	b.n	8003de0 <HAL_RCC_OscConfig+0x19c>
 8003d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x158>
 8003d82:	4b7c      	ldr	r3, [pc, #496]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7b      	ldr	r2, [pc, #492]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b79      	ldr	r3, [pc, #484]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a78      	ldr	r2, [pc, #480]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e021      	b.n	8003de0 <HAL_RCC_OscConfig+0x19c>
 8003d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x184>
 8003dae:	4b71      	ldr	r3, [pc, #452]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a70      	ldr	r2, [pc, #448]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b6e      	ldr	r3, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x19c>
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a69      	ldr	r2, [pc, #420]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b67      	ldr	r3, [pc, #412]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a66      	ldr	r2, [pc, #408]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dde:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de0:	4b64      	ldr	r3, [pc, #400]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	f023 020f 	bic.w	r2, r3, #15
 8003de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	495f      	ldr	r1, [pc, #380]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d059      	beq.n	8003ebe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fc83 	bl	8002714 <HAL_GetTick>
 8003e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fc7e 	bl	8002714 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	@ 0x64
 8003e22:	d902      	bls.n	8003e2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	f000 bf43 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8003e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e2e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003e3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_RCC_OscConfig+0x218>
 8003e56:	4b47      	ldr	r3, [pc, #284]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	e015      	b.n	8003e88 <HAL_RCC_OscConfig+0x244>
 8003e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e68:	fa93 f3a3 	rbit	r3, r3
 8003e6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003e84:	4b3b      	ldr	r3, [pc, #236]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003e90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003e94:	fa92 f2a2 	rbit	r2, r2
 8003e98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003e9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ea0:	fab2 f282 	clz	r2, r2
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	f042 0220 	orr.w	r2, r2, #32
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	f002 021f 	and.w	r2, r2, #31
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ab      	beq.n	8003e14 <HAL_RCC_OscConfig+0x1d0>
 8003ebc:	e05d      	b.n	8003f7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebe:	f7fe fc29 	bl	8002714 <HAL_GetTick>
 8003ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fc24 	bl	8002714 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	@ 0x64
 8003ed6:	d902      	bls.n	8003ede <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f000 bee9 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8003ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ee2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003ef2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <HAL_RCC_OscConfig+0x2cc>
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e015      	b.n	8003f3c <HAL_RCC_OscConfig+0x2f8>
 8003f10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f14:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f28:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f40:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f44:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f50:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f042 0220 	orr.w	r2, r2, #32
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f002 021f 	and.w	r2, r2, #31
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ab      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x284>
 8003f70:	e003      	b.n	8003f7a <HAL_RCC_OscConfig+0x336>
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 817d 	beq.w	800428a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f90:	4ba6      	ldr	r3, [pc, #664]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f9c:	4ba3      	ldr	r3, [pc, #652]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d172      	bne.n	800408e <HAL_RCC_OscConfig+0x44a>
 8003fa8:	4ba0      	ldr	r3, [pc, #640]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d16c      	bne.n	800408e <HAL_RCC_OscConfig+0x44a>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003fc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x3a0>
 8003fde:	4b93      	ldr	r3, [pc, #588]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e013      	b.n	800400c <HAL_RCC_OscConfig+0x3c8>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ffc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004008:	4b88      	ldr	r3, [pc, #544]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	2202      	movs	r2, #2
 800400e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004012:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004016:	fa92 f2a2 	rbit	r2, r2
 800401a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800401e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004022:	fab2 f282 	clz	r2, r2
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	f042 0220 	orr.w	r2, r2, #32
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f202 	lsl.w	r2, r1, r2
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCC_OscConfig+0x410>
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d002      	beq.n	8004054 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f000 be2e 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b75      	ldr	r3, [pc, #468]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800405c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004060:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	21f8      	movs	r1, #248	@ 0xf8
 800406a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004072:	fa91 f1a1 	rbit	r1, r1
 8004076:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800407a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800407e:	fab1 f181 	clz	r1, r1
 8004082:	b2c9      	uxtb	r1, r1
 8004084:	408b      	lsls	r3, r1
 8004086:	4969      	ldr	r1, [pc, #420]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408c:	e0fd      	b.n	800428a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800408e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004092:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8088 	beq.w	80041b0 <HAL_RCC_OscConfig+0x56c>
 80040a0:	2301      	movs	r3, #1
 80040a2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80040b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	461a      	mov	r2, r3
 80040c8:	2301      	movs	r3, #1
 80040ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fb22 	bl	8002714 <HAL_GetTick>
 80040d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fe fb1d 	bl	8002714 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d902      	bls.n	80040ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	f000 bde2 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
 80040ec:	2302      	movs	r3, #2
 80040ee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80040fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d102      	bne.n	800411c <HAL_RCC_OscConfig+0x4d8>
 8004116:	4b45      	ldr	r3, [pc, #276]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	e013      	b.n	8004144 <HAL_RCC_OscConfig+0x500>
 800411c:	2302      	movs	r3, #2
 800411e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800412e:	2302      	movs	r3, #2
 8004130:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004134:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004140:	4b3a      	ldr	r3, [pc, #232]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	2202      	movs	r2, #2
 8004146:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800414a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800414e:	fa92 f2a2 	rbit	r2, r2
 8004152:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004156:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800415a:	fab2 f282 	clz	r2, r2
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f042 0220 	orr.w	r2, r2, #32
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	f002 021f 	and.w	r2, r2, #31
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0af      	beq.n	80040d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800417e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	21f8      	movs	r1, #248	@ 0xf8
 800418c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004194:	fa91 f1a1 	rbit	r1, r1
 8004198:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800419c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80041a0:	fab1 f181 	clz	r1, r1
 80041a4:	b2c9      	uxtb	r1, r1
 80041a6:	408b      	lsls	r3, r1
 80041a8:	4920      	ldr	r1, [pc, #128]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
 80041ae:	e06c      	b.n	800428a <HAL_RCC_OscConfig+0x646>
 80041b0:	2301      	movs	r3, #1
 80041b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80041c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	461a      	mov	r2, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe fa9a 	bl	8002714 <HAL_GetTick>
 80041e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fe fa95 	bl	8002714 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d902      	bls.n	80041fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	f000 bd5a 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
 80041fc:	2302      	movs	r3, #2
 80041fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800420e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d104      	bne.n	8004230 <HAL_RCC_OscConfig+0x5ec>
 8004226:	4b01      	ldr	r3, [pc, #4]	@ (800422c <HAL_RCC_OscConfig+0x5e8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	e015      	b.n	8004258 <HAL_RCC_OscConfig+0x614>
 800422c:	40021000 	.word	0x40021000
 8004230:	2302      	movs	r3, #2
 8004232:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004242:	2302      	movs	r3, #2
 8004244:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004248:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004254:	4bc8      	ldr	r3, [pc, #800]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	2202      	movs	r2, #2
 800425a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800425e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004262:	fa92 f2a2 	rbit	r2, r2
 8004266:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800426a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800426e:	fab2 f282 	clz	r2, r2
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	f042 0220 	orr.w	r2, r2, #32
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	f002 021f 	and.w	r2, r2, #31
 800427e:	2101      	movs	r1, #1
 8004280:	fa01 f202 	lsl.w	r2, r1, r2
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ad      	bne.n	80041e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8110 	beq.w	80044c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d079      	beq.n	80043a4 <HAL_RCC_OscConfig+0x760>
 80042b0:	2301      	movs	r3, #1
 80042b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80042c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	4bab      	ldr	r3, [pc, #684]	@ (800457c <HAL_RCC_OscConfig+0x938>)
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	2301      	movs	r3, #1
 80042d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042da:	f7fe fa1b 	bl	8002714 <HAL_GetTick>
 80042de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e4:	f7fe fa16 	bl	8002714 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d902      	bls.n	80042fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	f000 bcdb 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
 80042fa:	2302      	movs	r3, #2
 80042fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004314:	2202      	movs	r2, #2
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	fa93 f2a3 	rbit	r2, r3
 8004326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004352:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004354:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 8004356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004360:	2102      	movs	r1, #2
 8004362:	6019      	str	r1, [r3, #0]
 8004364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004368:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f1a3 	rbit	r1, r3
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800437a:	6019      	str	r1, [r3, #0]
  return result;
 800437c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004380:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0a0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x6a0>
 80043a2:	e08d      	b.n	80044c0 <HAL_RCC_OscConfig+0x87c>
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	fa93 f2a3 	rbit	r2, r3
 80043be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043c6:	601a      	str	r2, [r3, #0]
  return result;
 80043c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	4b68      	ldr	r3, [pc, #416]	@ (800457c <HAL_RCC_OscConfig+0x938>)
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe f995 	bl	8002714 <HAL_GetTick>
 80043ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fe f990 	bl	8002714 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d902      	bls.n	8004406 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	f000 bc55 	b.w	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800440e:	2202      	movs	r2, #2
 8004410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fa93 f2a3 	rbit	r2, r3
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004432:	2202      	movs	r2, #2
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	fa93 f2a3 	rbit	r2, r3
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004456:	2202      	movs	r2, #2
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fa93 f2a3 	rbit	r2, r3
 8004468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004470:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004472:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 8004474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800447e:	2102      	movs	r1, #2
 8004480:	6019      	str	r1, [r3, #0]
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f1a3 	rbit	r1, r3
 8004490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004494:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004498:	6019      	str	r1, [r3, #0]
  return result;
 800449a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800449e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d197      	bne.n	80043f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 81a1 	beq.w	8004818 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044dc:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	61d3      	str	r3, [r2, #28]
 80044f4:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800450e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b1a      	ldr	r3, [pc, #104]	@ (8004580 <HAL_RCC_OscConfig+0x93c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11a      	bne.n	8004558 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004522:	4b17      	ldr	r3, [pc, #92]	@ (8004580 <HAL_RCC_OscConfig+0x93c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <HAL_RCC_OscConfig+0x93c>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452e:	f7fe f8f1 	bl	8002714 <HAL_GetTick>
 8004532:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	e009      	b.n	800454c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fe f8ec 	bl	8002714 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	@ 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e3b1      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <HAL_RCC_OscConfig+0x93c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10d      	bne.n	8004584 <HAL_RCC_OscConfig+0x940>
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a02      	ldr	r2, [pc, #8]	@ (8004578 <HAL_RCC_OscConfig+0x934>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e03c      	b.n	80045f0 <HAL_RCC_OscConfig+0x9ac>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	10908120 	.word	0x10908120
 8004580:	40007000 	.word	0x40007000
 8004584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004588:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_RCC_OscConfig+0x96a>
 8004594:	4bc1      	ldr	r3, [pc, #772]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4ac0      	ldr	r2, [pc, #768]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	4bbe      	ldr	r3, [pc, #760]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4abd      	ldr	r2, [pc, #756]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	e020      	b.n	80045f0 <HAL_RCC_OscConfig+0x9ac>
 80045ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x994>
 80045be:	4bb7      	ldr	r3, [pc, #732]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4ab6      	ldr	r2, [pc, #728]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	4bb4      	ldr	r3, [pc, #720]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4ab3      	ldr	r2, [pc, #716]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6213      	str	r3, [r2, #32]
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0x9ac>
 80045d8:	4bb0      	ldr	r3, [pc, #704]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4aaf      	ldr	r2, [pc, #700]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	6213      	str	r3, [r2, #32]
 80045e4:	4bad      	ldr	r3, [pc, #692]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4aac      	ldr	r2, [pc, #688]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80045ea:	f023 0304 	bic.w	r3, r3, #4
 80045ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8081 	beq.w	8004704 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fe f887 	bl	8002714 <HAL_GetTick>
 8004606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460c:	f7fe f882 	bl	8002714 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e345      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004634:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004642:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004650:	2202      	movs	r2, #2
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004658:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004666:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800466a:	601a      	str	r2, [r3, #0]
  return result;
 800466c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004670:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004674:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d102      	bne.n	8004690 <HAL_RCC_OscConfig+0xa4c>
 800468a:	4b84      	ldr	r3, [pc, #528]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	e013      	b.n	80046b8 <HAL_RCC_OscConfig+0xa74>
 8004690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004694:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004698:	2202      	movs	r2, #2
 800469a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4b79      	ldr	r3, [pc, #484]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046c0:	2102      	movs	r1, #2
 80046c2:	6011      	str	r1, [r2, #0]
 80046c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	fa92 f1a2 	rbit	r1, r2
 80046d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046da:	6011      	str	r1, [r2, #0]
  return result;
 80046dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	fab2 f282 	clz	r2, r2
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f002 021f 	and.w	r2, r2, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d084      	beq.n	800460c <HAL_RCC_OscConfig+0x9c8>
 8004702:	e07f      	b.n	8004804 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004704:	f7fe f806 	bl	8002714 <HAL_GetTick>
 8004708:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	e00b      	b.n	8004726 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fe f801 	bl	8002714 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e2c4      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800472e:	2202      	movs	r2, #2
 8004730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004736:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	fa93 f2a3 	rbit	r2, r3
 8004740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004744:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004752:	2202      	movs	r2, #2
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	fa93 f2a3 	rbit	r2, r3
 8004764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004768:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800476c:	601a      	str	r2, [r3, #0]
  return result;
 800476e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004772:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004776:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f043 0302 	orr.w	r3, r3, #2
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d102      	bne.n	8004792 <HAL_RCC_OscConfig+0xb4e>
 800478c:	4b43      	ldr	r3, [pc, #268]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	e013      	b.n	80047ba <HAL_RCC_OscConfig+0xb76>
 8004792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004796:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800479a:	2202      	movs	r2, #2
 800479c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fa93 f2a3 	rbit	r2, r3
 80047ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	4b39      	ldr	r3, [pc, #228]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047c2:	2102      	movs	r1, #2
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047ca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	fa92 f1a2 	rbit	r1, r2
 80047d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047dc:	6011      	str	r1, [r2, #0]
  return result;
 80047de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	fab2 f282 	clz	r2, r2
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	f002 021f 	and.w	r2, r2, #31
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f202 	lsl.w	r2, r1, r2
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d184      	bne.n	800470e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004804:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4b23      	ldr	r3, [pc, #140]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4a22      	ldr	r2, [pc, #136]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004816:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8242 	beq.w	8004cae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482a:	4b1c      	ldr	r3, [pc, #112]	@ (800489c <HAL_RCC_OscConfig+0xc58>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b08      	cmp	r3, #8
 8004834:	f000 8213 	beq.w	8004c5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 8162 	bne.w	8004b0e <HAL_RCC_OscConfig+0xeca>
 800484a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004852:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	fa93 f2a3 	rbit	r2, r3
 8004866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800486e:	601a      	str	r2, [r3, #0]
  return result;
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004878:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004884:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd ff40 	bl	8002714 <HAL_GetTick>
 8004894:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004898:	e00c      	b.n	80048b4 <HAL_RCC_OscConfig+0xc70>
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fd ff38 	bl	8002714 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e1fd      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
 80048b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	fa93 f2a3 	rbit	r2, r3
 80048d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048d8:	601a      	str	r2, [r3, #0]
  return result;
 80048da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_RCC_OscConfig+0xcba>
 80048f8:	4bb0      	ldr	r3, [pc, #704]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	e027      	b.n	800494e <HAL_RCC_OscConfig+0xd0a>
 80048fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004902:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004906:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800490a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004910:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	fa93 f2a3 	rbit	r2, r3
 800491a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004928:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800492c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004936:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	fa93 f2a3 	rbit	r2, r3
 8004940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004944:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	4b9c      	ldr	r3, [pc, #624]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004952:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004956:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800495a:	6011      	str	r1, [r2, #0]
 800495c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004960:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	fa92 f1a2 	rbit	r1, r2
 800496a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800496e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004972:	6011      	str	r1, [r2, #0]
  return result;
 8004974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004978:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	fab2 f282 	clz	r2, r2
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	f042 0220 	orr.w	r2, r2, #32
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	f002 021f 	and.w	r2, r2, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f202 	lsl.w	r2, r1, r2
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d182      	bne.n	80048a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800499a:	4b88      	ldr	r3, [pc, #544]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80049ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	497f      	ldr	r1, [pc, #508]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	604b      	str	r3, [r1, #4]
 80049c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	fa93 f2a3 	rbit	r2, r3
 80049de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049e6:	601a      	str	r2, [r3, #0]
  return result;
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	2301      	movs	r3, #1
 8004a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fd fe84 	bl	8002714 <HAL_GetTick>
 8004a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a10:	e009      	b.n	8004a26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fd fe7f 	bl	8002714 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e144      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8004a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a38:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	fa93 f2a3 	rbit	r2, r3
 8004a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a46:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a4a:	601a      	str	r2, [r3, #0]
  return result;
 8004a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a50:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <HAL_RCC_OscConfig+0xe2c>
 8004a6a:	4b54      	ldr	r3, [pc, #336]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e027      	b.n	8004ac0 <HAL_RCC_OscConfig+0xe7c>
 8004a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a74:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a82:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	fa93 f2a3 	rbit	r2, r3
 8004a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a90:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	fa93 f2a3 	rbit	r2, r3
 8004ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	4b3f      	ldr	r3, [pc, #252]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ac8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004acc:	6011      	str	r1, [r2, #0]
 8004ace:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ad2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	fa92 f1a2 	rbit	r1, r2
 8004adc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ae0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ae4:	6011      	str	r1, [r2, #0]
  return result;
 8004ae6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	fab2 f282 	clz	r2, r2
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	f042 0220 	orr.w	r2, r2, #32
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	f002 021f 	and.w	r2, r2, #31
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f202 	lsl.w	r2, r1, r2
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d082      	beq.n	8004a12 <HAL_RCC_OscConfig+0xdce>
 8004b0c:	e0cf      	b.n	8004cae <HAL_RCC_OscConfig+0x106a>
 8004b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b12:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b20:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	fa93 f2a3 	rbit	r2, r3
 8004b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b32:	601a      	str	r2, [r3, #0]
  return result;
 8004b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3e:	fab3 f383 	clz	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fd fdde 	bl	8002714 <HAL_GetTick>
 8004b58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5c:	e009      	b.n	8004b72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fd fdd9 	bl	8002714 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e09e      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
 8004b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b76:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b84:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	fa93 f2a3 	rbit	r2, r3
 8004b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b92:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b96:	601a      	str	r2, [r3, #0]
  return result;
 8004b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004ba0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d104      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xf7c>
 8004bb6:	4b01      	ldr	r3, [pc, #4]	@ (8004bbc <HAL_RCC_OscConfig+0xf78>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	e029      	b.n	8004c10 <HAL_RCC_OscConfig+0xfcc>
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	fa93 f2a3 	rbit	r2, r3
 8004bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	fa93 f2a3 	rbit	r2, r3
 8004c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_OscConfig+0x1078>)
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c14:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c22:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	fa92 f1a2 	rbit	r1, r2
 8004c2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c34:	6011      	str	r1, [r2, #0]
  return result;
 8004c36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c3a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	fab2 f282 	clz	r2, r2
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	f042 0220 	orr.w	r2, r2, #32
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	f002 021f 	and.w	r2, r2, #31
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f202 	lsl.w	r2, r1, r2
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d180      	bne.n	8004b5e <HAL_RCC_OscConfig+0xf1a>
 8004c5c:	e027      	b.n	8004cae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e01e      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCC_OscConfig+0x1078>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d10b      	bne.n	8004caa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d001      	beq.n	8004cae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000

08004cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b09e      	sub	sp, #120	@ 0x78
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e162      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b90      	ldr	r3, [pc, #576]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d910      	bls.n	8004d08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0207 	bic.w	r2, r3, #7
 8004cee:	498b      	ldr	r1, [pc, #556]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b89      	ldr	r3, [pc, #548]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e14a      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d14:	4b82      	ldr	r3, [pc, #520]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	497f      	ldr	r1, [pc, #508]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80dc 	beq.w	8004eec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d13c      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xf6>
 8004d3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d102      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xa6>
 8004d60:	4b6f      	ldr	r3, [pc, #444]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e00f      	b.n	8004d86 <HAL_RCC_ClockConfig+0xc6>
 8004d66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d82:	4b67      	ldr	r3, [pc, #412]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d8e:	fa92 f2a2 	rbit	r2, r2
 8004d92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004d94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d96:	fab2 f282 	clz	r2, r2
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f042 0220 	orr.w	r2, r2, #32
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	f002 021f 	and.w	r2, r2, #31
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d17b      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0f3      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d13c      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x178>
 8004dbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x128>
 8004de2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	e00f      	b.n	8004e08 <HAL_RCC_ClockConfig+0x148>
 8004de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e04:	4b46      	ldr	r3, [pc, #280]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e10:	fa92 f2a2 	rbit	r2, r2
 8004e14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e18:	fab2 f282 	clz	r2, r2
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	f042 0220 	orr.w	r2, r2, #32
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	f002 021f 	and.w	r2, r2, #31
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d13a      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0b2      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	fab3 f383 	clz	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x1a0>
 8004e5a:	4b31      	ldr	r3, [pc, #196]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	e00d      	b.n	8004e7c <HAL_RCC_ClockConfig+0x1bc>
 8004e60:	2302      	movs	r3, #2
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	623b      	str	r3, [r7, #32]
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	fa93 f3a3 	rbit	r3, r3
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	4b29      	ldr	r3, [pc, #164]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	61ba      	str	r2, [r7, #24]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	fa92 f2a2 	rbit	r2, r2
 8004e86:	617a      	str	r2, [r7, #20]
  return result;
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	fab2 f282 	clz	r2, r2
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	f042 0220 	orr.w	r2, r2, #32
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	f002 021f 	and.w	r2, r2, #31
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e079      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f023 0203 	bic.w	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	491a      	ldr	r1, [pc, #104]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ebc:	f7fd fc2a 	bl	8002714 <HAL_GetTick>
 8004ec0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec4:	f7fd fc26 	bl	8002714 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e061      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eda:	4b11      	ldr	r3, [pc, #68]	@ (8004f20 <HAL_RCC_ClockConfig+0x260>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 020c 	and.w	r2, r3, #12
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d1eb      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eec:	4b0b      	ldr	r3, [pc, #44]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d214      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 0207 	bic.w	r2, r3, #7
 8004f02:	4906      	ldr	r1, [pc, #24]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b04      	ldr	r3, [pc, #16]	@ (8004f1c <HAL_RCC_ClockConfig+0x25c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e040      	b.n	8004f9e <HAL_RCC_ClockConfig+0x2de>
 8004f1c:	40022000 	.word	0x40022000
 8004f20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	491a      	ldr	r1, [pc, #104]	@ (8004fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4912      	ldr	r1, [pc, #72]	@ (8004fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f62:	f000 f829 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f66:	4601      	mov	r1, r0
 8004f68:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f70:	22f0      	movs	r2, #240	@ 0xf0
 8004f72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	fa92 f2a2 	rbit	r2, r2
 8004f7a:	60fa      	str	r2, [r7, #12]
  return result;
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	fab2 f282 	clz	r2, r2
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	40d3      	lsrs	r3, r2
 8004f86:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <HAL_RCC_ClockConfig+0x2ec>)
 8004f88:	5cd3      	ldrb	r3, [r2, r3]
 8004f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f8e:	4a08      	ldr	r2, [pc, #32]	@ (8004fb0 <HAL_RCC_ClockConfig+0x2f0>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f92:	4b08      	ldr	r3, [pc, #32]	@ (8004fb4 <HAL_RCC_ClockConfig+0x2f4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc f9f6 	bl	8001388 <HAL_InitTick>
  
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3778      	adds	r7, #120	@ 0x78
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	0800a07c 	.word	0x0800a07c
 8004fb0:	20000000 	.word	0x20000000
 8004fb4:	20000004 	.word	0x20000004

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800504c <HAL_RCC_GetSysClockFreq+0x94>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x30>
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x36>
 8004fe6:	e026      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fe8:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fea:	613b      	str	r3, [r7, #16]
      break;
 8004fec:	e026      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ffc:	4b13      	ldr	r3, [pc, #76]	@ (800504c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005006:	5cd3      	ldrb	r3, [r2, r3]
 8005008:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005014:	4a0e      	ldr	r2, [pc, #56]	@ (8005050 <HAL_RCC_GetSysClockFreq+0x98>)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	fbb2 f2f3 	udiv	r2, r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e004      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a0c      	ldr	r2, [pc, #48]	@ (800505c <HAL_RCC_GetSysClockFreq+0xa4>)
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	613b      	str	r3, [r7, #16]
      break;
 8005034:	e002      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005036:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <HAL_RCC_GetSysClockFreq+0x98>)
 8005038:	613b      	str	r3, [r7, #16]
      break;
 800503a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800503c:	693b      	ldr	r3, [r7, #16]
}
 800503e:	4618      	mov	r0, r3
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	007a1200 	.word	0x007a1200
 8005054:	0800a690 	.word	0x0800a690
 8005058:	0800a6a0 	.word	0x0800a6a0
 800505c:	003d0900 	.word	0x003d0900

08005060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005064:	4b03      	ldr	r3, [pc, #12]	@ (8005074 <HAL_RCC_GetHCLKFreq+0x14>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800507e:	f7ff ffef 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8005082:	4601      	mov	r1, r0
 8005084:	4b0b      	ldr	r3, [pc, #44]	@ (80050b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800508c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005090:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	fa92 f2a2 	rbit	r2, r2
 8005098:	603a      	str	r2, [r7, #0]
  return result;
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	fab2 f282 	clz	r2, r2
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	40d3      	lsrs	r3, r2
 80050a4:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80050a6:	5cd3      	ldrb	r3, [r2, r3]
 80050a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	0800a08c 	.word	0x0800a08c

080050bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80050c2:	f7ff ffcd 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 80050c6:	4601      	mov	r1, r0
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80050d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80050d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	fa92 f2a2 	rbit	r2, r2
 80050dc:	603a      	str	r2, [r7, #0]
  return result;
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	fab2 f282 	clz	r2, r2
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	40d3      	lsrs	r3, r2
 80050e8:	4a04      	ldr	r2, [pc, #16]	@ (80050fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80050ea:	5cd3      	ldrb	r3, [r2, r3]
 80050ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800a08c 	.word	0x0800a08c

08005100 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	220f      	movs	r2, #15
 800510e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005110:	4b12      	ldr	r3, [pc, #72]	@ (800515c <HAL_RCC_GetClockConfig+0x5c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0203 	and.w	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800511c:	4b0f      	ldr	r3, [pc, #60]	@ (800515c <HAL_RCC_GetClockConfig+0x5c>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005128:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <HAL_RCC_GetClockConfig+0x5c>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005134:	4b09      	ldr	r3, [pc, #36]	@ (800515c <HAL_RCC_GetClockConfig+0x5c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	08db      	lsrs	r3, r3, #3
 800513a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005142:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <HAL_RCC_GetClockConfig+0x60>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0207 	and.w	r2, r3, #7
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	601a      	str	r2, [r3, #0]
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000
 8005160:	40022000 	.word	0x40022000

08005164 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b092      	sub	sp, #72	@ 0x48
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80cd 	beq.w	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005188:	4b86      	ldr	r3, [pc, #536]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10e      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b83      	ldr	r3, [pc, #524]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4a82      	ldr	r2, [pc, #520]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519e:	61d3      	str	r3, [r2, #28]
 80051a0:	4b80      	ldr	r3, [pc, #512]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b7d      	ldr	r3, [pc, #500]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d118      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051be:	4b7a      	ldr	r3, [pc, #488]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a79      	ldr	r2, [pc, #484]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7fd faa3 	bl	8002714 <HAL_GetTick>
 80051ce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fd fa9f 	bl	8002714 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b64      	cmp	r3, #100	@ 0x64
 80051de:	d901      	bls.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0db      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b70      	ldr	r3, [pc, #448]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f0:	4b6c      	ldr	r3, [pc, #432]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d07d      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800520a:	429a      	cmp	r2, r3
 800520c:	d076      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800520e:	4b65      	ldr	r3, [pc, #404]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005218:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800521c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005228:	fab3 f383 	clz	r3, r3
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	4b5e      	ldr	r3, [pc, #376]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	461a      	mov	r2, r3
 8005238:	2301      	movs	r3, #1
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005240:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800524a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	4b55      	ldr	r3, [pc, #340]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	461a      	mov	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005260:	4a50      	ldr	r2, [pc, #320]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005264:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d045      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fd fa50 	bl	8002714 <HAL_GetTick>
 8005274:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	e00a      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fd fa4c 	bl	8002714 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e086      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800528e:	2302      	movs	r3, #2
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
 800529a:	2302      	movs	r3, #2
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	61fb      	str	r3, [r7, #28]
  return result;
 80052a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a8:	fab3 f383 	clz	r3, r3
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d102      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80052bc:	4b39      	ldr	r3, [pc, #228]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	e007      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	4b35      	ldr	r3, [pc, #212]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	2202      	movs	r2, #2
 80052d4:	613a      	str	r2, [r7, #16]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	fa92 f2a2 	rbit	r2, r2
 80052dc:	60fa      	str	r2, [r7, #12]
  return result;
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	fab2 f282 	clz	r2, r2
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	f002 021f 	and.w	r2, r2, #31
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f202 	lsl.w	r2, r1, r2
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0bd      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80052fc:	4b29      	ldr	r3, [pc, #164]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4926      	ldr	r1, [pc, #152]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800530a:	4313      	orrs	r3, r2
 800530c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800530e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005316:	4b23      	ldr	r3, [pc, #140]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800531c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005320:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532e:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	491a      	ldr	r1, [pc, #104]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800533c:	4313      	orrs	r3, r2
 800533e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534c:	4b15      	ldr	r3, [pc, #84]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4912      	ldr	r1, [pc, #72]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800535a:	4313      	orrs	r3, r2
 800535c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800536a:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	490b      	ldr	r1, [pc, #44]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005378:	4313      	orrs	r3, r2
 800537a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005388:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	4903      	ldr	r1, [pc, #12]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005396:	4313      	orrs	r3, r2
 8005398:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3748      	adds	r7, #72	@ 0x48
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40007000 	.word	0x40007000
 80053ac:	10908100 	.word	0x10908100

080053b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e073      	b.n	80054ae <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	7f5b      	ldrb	r3, [r3, #29]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fb fdd0 	bl	8000f7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d055      	beq.n	800549c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	22ca      	movs	r2, #202	@ 0xca
 80053f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2253      	movs	r2, #83	@ 0x53
 80053fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa49 	bl	8005898 <RTC_EnterInitMode>
 8005406:	4603      	mov	r3, r0
 8005408:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d12c      	bne.n	800546a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800541e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005422:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6899      	ldr	r1, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d2      	ldr	r2, [r2, #12]
 800544a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6919      	ldr	r1, [r3, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	041a      	lsls	r2, r3, #16
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa50 	bl	8005906 <RTC_ExitInitMode>
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d110      	bne.n	8005492 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800547e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	22ff      	movs	r2, #255	@ 0xff
 8005498:	625a      	str	r2, [r3, #36]	@ 0x24
 800549a:	e001      	b.n	80054a0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054b6:	b590      	push	{r4, r7, lr}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	7f1b      	ldrb	r3, [r3, #28]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_RTC_SetTime+0x1c>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e087      	b.n	80055e2 <HAL_RTC_SetTime+0x12c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2202      	movs	r2, #2
 80054dc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d126      	bne.n	8005532 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2200      	movs	r2, #0
 80054f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fa27 	bl	8005950 <RTC_ByteToBcd2>
 8005502:	4603      	mov	r3, r0
 8005504:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fa20 	bl	8005950 <RTC_ByteToBcd2>
 8005510:	4603      	mov	r3, r0
 8005512:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005514:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	789b      	ldrb	r3, [r3, #2]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fa18 	bl	8005950 <RTC_ByteToBcd2>
 8005520:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005522:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	78db      	ldrb	r3, [r3, #3]
 800552a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e018      	b.n	8005564 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	785b      	ldrb	r3, [r3, #1]
 8005550:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005552:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005558:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	22ca      	movs	r2, #202	@ 0xca
 800556a:	625a      	str	r2, [r3, #36]	@ 0x24
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2253      	movs	r2, #83	@ 0x53
 8005572:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f98f 	bl	8005898 <RTC_EnterInitMode>
 800557a:	4603      	mov	r3, r0
 800557c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d120      	bne.n	80055c6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800558e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005592:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6899      	ldr	r1, [r3, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f9a2 	bl	8005906 <RTC_ExitInitMode>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	22ff      	movs	r2, #255	@ 0xff
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]

  return status;
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd90      	pop	{r4, r7, pc}

080055ea <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800561c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005620:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800562c:	b2da      	uxtb	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	0d9b      	lsrs	r3, r3, #22
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11a      	bne.n	800569c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f98e 	bl	800598c <RTC_Bcd2ToByte>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 f985 	bl	800598c <RTC_Bcd2ToByte>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	789b      	ldrb	r3, [r3, #2]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f97c 	bl	800598c <RTC_Bcd2ToByte>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056a6:	b590      	push	{r4, r7, lr}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	7f1b      	ldrb	r3, [r3, #28]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_RTC_SetDate+0x1c>
 80056be:	2302      	movs	r3, #2
 80056c0:	e071      	b.n	80057a6 <HAL_RTC_SetDate+0x100>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2202      	movs	r2, #2
 80056cc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10e      	bne.n	80056f2 <HAL_RTC_SetDate+0x4c>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	f023 0310 	bic.w	r3, r3, #16
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	330a      	adds	r3, #10
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11c      	bne.n	8005732 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	78db      	ldrb	r3, [r3, #3]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f927 	bl	8005950 <RTC_ByteToBcd2>
 8005702:	4603      	mov	r3, r0
 8005704:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f920 	bl	8005950 <RTC_ByteToBcd2>
 8005710:	4603      	mov	r3, r0
 8005712:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005714:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	789b      	ldrb	r3, [r3, #2]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f918 	bl	8005950 <RTC_ByteToBcd2>
 8005720:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005722:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e00e      	b.n	8005750 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	78db      	ldrb	r3, [r3, #3]
 8005736:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800573e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005744:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	22ca      	movs	r2, #202	@ 0xca
 8005756:	625a      	str	r2, [r3, #36]	@ 0x24
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2253      	movs	r2, #83	@ 0x53
 800575e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f899 	bl	8005898 <RTC_EnterInitMode>
 8005766:	4603      	mov	r3, r0
 8005768:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800576a:	7cfb      	ldrb	r3, [r7, #19]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10c      	bne.n	800578a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800577a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800577e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f8c0 	bl	8005906 <RTC_ExitInitMode>
 8005786:	4603      	mov	r3, r0
 8005788:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	22ff      	movs	r2, #255	@ 0xff
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]

  return status;
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}

080057ae <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	0b5b      	lsrs	r3, r3, #13
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d11a      	bne.n	8005842 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	78db      	ldrb	r3, [r3, #3]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 f8bb 	bl	800598c <RTC_Bcd2ToByte>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f8b2 	bl	800598c <RTC_Bcd2ToByte>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	789b      	ldrb	r3, [r3, #2]
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f8a9 	bl	800598c <RTC_Bcd2ToByte>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a0d      	ldr	r2, [pc, #52]	@ (8005894 <HAL_RTC_WaitForSynchro+0x48>)
 800585e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005860:	f7fc ff58 	bl	8002714 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005866:	e009      	b.n	800587c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005868:	f7fc ff54 	bl	8002714 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005876:	d901      	bls.n	800587c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e007      	b.n	800588c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ee      	beq.n	8005868 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	00017f5f 	.word	0x00017f5f

08005898 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d122      	bne.n	80058fc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058c6:	f7fc ff25 	bl	8002714 <HAL_GetTick>
 80058ca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058cc:	e00c      	b.n	80058e8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058ce:	f7fc ff21 	bl	8002714 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058dc:	d904      	bls.n	80058e8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2204      	movs	r2, #4
 80058e2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <RTC_EnterInitMode+0x64>
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d1e8      	bne.n	80058ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005920:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff ff8b 	bl	800584c <HAL_RTC_WaitForSynchro>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2204      	movs	r2, #4
 8005940:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800595e:	e005      	b.n	800596c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	3b0a      	subs	r3, #10
 800596a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	2b09      	cmp	r3, #9
 8005970:	d8f6      	bhi.n	8005960 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	b2da      	uxtb	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	4313      	orrs	r3, r2
 800597e:	b2db      	uxtb	r3, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	b2db      	uxtb	r3, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e049      	b.n	8005a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f841 	bl	8005a76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 f9c6 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e040      	b.n	8005b26 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xa8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x58>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ace:	d009      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x58>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xac>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x58>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xb0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d115      	bne.n	8005b10 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xb4>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b06      	cmp	r3, #6
 8005af4:	d015      	beq.n	8005b22 <HAL_TIM_Base_Start_IT+0x96>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afc:	d011      	beq.n	8005b22 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	e008      	b.n	8005b22 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e000      	b.n	8005b24 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0202 	mvn.w	r2, #2
 8005b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8e4 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8d6 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f8e7 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0204 	mvn.w	r2, #4
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8be 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8b0 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8c1 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0208 	mvn.w	r2, #8
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2204      	movs	r2, #4
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f898 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f88a 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f89b 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01b      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0210 	mvn.w	r2, #16
 8005c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2208      	movs	r2, #8
 8005c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f872 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f864 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f875 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0201 	mvn.w	r2, #1
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb f928 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8f0 	bl	8005eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8e8 	bl	8005ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f834 	bl	8005d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0220 	mvn.w	r2, #32
 8005d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8b0 	bl	8005ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a38      	ldr	r2, [pc, #224]	@ (8005e8c <TIM_Base_SetConfig+0xf4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_Base_SetConfig+0x28>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0x28>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a35      	ldr	r2, [pc, #212]	@ (8005e90 <TIM_Base_SetConfig+0xf8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d108      	bne.n	8005dd2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e8c <TIM_Base_SetConfig+0xf4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <TIM_Base_SetConfig+0x6a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de0:	d00f      	beq.n	8005e02 <TIM_Base_SetConfig+0x6a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e90 <TIM_Base_SetConfig+0xf8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_Base_SetConfig+0x6a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a29      	ldr	r2, [pc, #164]	@ (8005e94 <TIM_Base_SetConfig+0xfc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_Base_SetConfig+0x6a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a28      	ldr	r2, [pc, #160]	@ (8005e98 <TIM_Base_SetConfig+0x100>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_Base_SetConfig+0x6a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a27      	ldr	r2, [pc, #156]	@ (8005e9c <TIM_Base_SetConfig+0x104>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d108      	bne.n	8005e14 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a14      	ldr	r2, [pc, #80]	@ (8005e8c <TIM_Base_SetConfig+0xf4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_Base_SetConfig+0xc0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	@ (8005e94 <TIM_Base_SetConfig+0xfc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0xc0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	@ (8005e98 <TIM_Base_SetConfig+0x100>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0xc0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	@ (8005e9c <TIM_Base_SetConfig+0x104>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d105      	bne.n	8005e7e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	611a      	str	r2, [r3, #16]
  }
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800

08005ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e040      	b.n	8005f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fb fb9a 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	@ 0x24
 8005f08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fd32 	bl	800698c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fbf9 	bl	8006720 <UART_SetConfig>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01b      	b.n	8005f70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fdb1 	bl	8006ad0 <UART_CheckIdleState>
 8005f6e:	4603      	mov	r3, r0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d177      	bne.n	8006080 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_UART_Transmit+0x24>
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e070      	b.n	8006082 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2221      	movs	r2, #33	@ 0x21
 8005fac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fae:	f7fc fbb1 	bl	8002714 <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Transmit+0x68>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e003      	b.n	8005fe8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe8:	e02f      	b.n	800604a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fe13 	bl	8006c20 <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e03b      	b.n	8006082 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601c:	b292      	uxth	r2, r2
 800601e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3302      	adds	r3, #2
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e007      	b.n	8006038 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	781a      	ldrb	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3301      	adds	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1c9      	bne.n	8005fea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	2140      	movs	r1, #64	@ 0x40
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fddd 	bl	8006c20 <UART_WaitOnFlagUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e005      	b.n	8006082 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b08a      	sub	sp, #40	@ 0x28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	4613      	mov	r3, r2
 8006096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d132      	bne.n	8006108 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_UART_Receive_IT+0x24>
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e02b      	b.n	800610a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	613b      	str	r3, [r7, #16]
   return(result);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fdfc 	bl	8006cfc <UART_Start_Receive_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	e000      	b.n	800610a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	@ 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b0ba      	sub	sp, #232	@ 0xe8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800613a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800613e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006142:	4013      	ands	r3, r2
 8006144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d115      	bne.n	800617c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 82ab 	beq.w	80066c8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
      }
      return;
 800617a:	e2a5      	b.n	80066c8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800617c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8117 	beq.w	80063b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006192:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006196:	4b85      	ldr	r3, [pc, #532]	@ (80063ac <HAL_UART_IRQHandler+0x298>)
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 810a 	beq.w	80063b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d011      	beq.n	80061d0 <HAL_UART_IRQHandler+0xbc>
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061c6:	f043 0201 	orr.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d011      	beq.n	8006200 <HAL_UART_IRQHandler+0xec>
 80061dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2202      	movs	r2, #2
 80061ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d011      	beq.n	8006230 <HAL_UART_IRQHandler+0x11c>
 800620c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2204      	movs	r2, #4
 800621e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006226:	f043 0202 	orr.w	r2, r3, #2
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d017      	beq.n	800626c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800624c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2208      	movs	r2, #8
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006262:	f043 0208 	orr.w	r2, r3, #8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800626c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006274:	2b00      	cmp	r3, #0
 8006276:	d012      	beq.n	800629e <HAL_UART_IRQHandler+0x18a>
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00c      	beq.n	800629e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800628c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8211 	beq.w	80066cc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d005      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d04f      	beq.n	8006396 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fdc6 	bl	8006e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006306:	2b40      	cmp	r3, #64	@ 0x40
 8006308:	d141      	bne.n	800638e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800633a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800634e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1d9      	bne.n	800630a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006362:	4a13      	ldr	r2, [pc, #76]	@ (80063b0 <HAL_UART_IRQHandler+0x29c>)
 8006364:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636a:	4618      	mov	r0, r3
 800636c:	f7fc fb22 	bl	80029b4 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d017      	beq.n	80063a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e00f      	b.n	80063a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9b4 	bl	80066f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e00b      	b.n	80063a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9b0 	bl	80066f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e007      	b.n	80063a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9ac 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80063a4:	e192      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a6:	bf00      	nop
    return;
 80063a8:	e190      	b.n	80066cc <HAL_UART_IRQHandler+0x5b8>
 80063aa:	bf00      	nop
 80063ac:	04000120 	.word	0x04000120
 80063b0:	08006f51 	.word	0x08006f51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f040 814b 	bne.w	8006654 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8144 	beq.w	8006654 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 813d 	beq.w	8006654 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2210      	movs	r2, #16
 80063e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ec:	2b40      	cmp	r3, #64	@ 0x40
 80063ee:	f040 80b5 	bne.w	800655c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8164 	beq.w	80066d0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800640e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006412:	429a      	cmp	r2, r3
 8006414:	f080 815c 	bcs.w	80066d0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800641e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b20      	cmp	r3, #32
 800642a:	f000 8086 	beq.w	800653a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800644a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800645c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006464:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1da      	bne.n	800642e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800649c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e1      	bne.n	8006478 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e3      	bne.n	80064b4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800651c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800651e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006522:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800652a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e4      	bne.n	80064fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006534:	4618      	mov	r0, r3
 8006536:	f7fc f9ff 	bl	8002938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800654c:	b29b      	uxth	r3, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	b29b      	uxth	r3, r3
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8d7 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800655a:	e0b9      	b.n	80066d0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006568:	b29b      	uxth	r3, r3
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80ab 	beq.w	80066d4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800657e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80a6 	beq.w	80066d4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800659c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e4      	bne.n	8006588 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	623b      	str	r3, [r7, #32]
   return(result);
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80065e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e3      	bne.n	80065be <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	60fb      	str	r3, [r7, #12]
   return(result);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0310 	bic.w	r3, r3, #16
 800661e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	69b9      	ldr	r1, [r7, #24]
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	617b      	str	r3, [r7, #20]
   return(result);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e4      	bne.n	800660a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f85b 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006652:	e03f      	b.n	80066d4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <HAL_UART_IRQHandler+0x56a>
 8006660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fe52 	bl	8007320 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800667c:	e02d      	b.n	80066da <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00e      	beq.n	80066a8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01c      	beq.n	80066d8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
    }
    return;
 80066a6:	e017      	b.n	80066d8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d012      	beq.n	80066da <HAL_UART_IRQHandler+0x5c6>
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00c      	beq.n	80066da <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc5b 	bl	8006f7c <UART_EndTransmit_IT>
    return;
 80066c6:	e008      	b.n	80066da <HAL_UART_IRQHandler+0x5c6>
      return;
 80066c8:	bf00      	nop
 80066ca:	e006      	b.n	80066da <HAL_UART_IRQHandler+0x5c6>
    return;
 80066cc:	bf00      	nop
 80066ce:	e004      	b.n	80066da <HAL_UART_IRQHandler+0x5c6>
      return;
 80066d0:	bf00      	nop
 80066d2:	e002      	b.n	80066da <HAL_UART_IRQHandler+0x5c6>
      return;
 80066d4:	bf00      	nop
 80066d6:	e000      	b.n	80066da <HAL_UART_IRQHandler+0x5c6>
    return;
 80066d8:	bf00      	nop
  }

}
 80066da:	37e8      	adds	r7, #232	@ 0xe8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b8a      	ldr	r3, [pc, #552]	@ (8006974 <UART_SetConfig+0x254>)
 800674c:	4013      	ands	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	430b      	orrs	r3, r1
 8006756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a78      	ldr	r2, [pc, #480]	@ (8006978 <UART_SetConfig+0x258>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d120      	bne.n	80067de <UART_SetConfig+0xbe>
 800679c:	4b77      	ldr	r3, [pc, #476]	@ (800697c <UART_SetConfig+0x25c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d817      	bhi.n	80067d8 <UART_SetConfig+0xb8>
 80067a8:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <UART_SetConfig+0x90>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067cd 	.word	0x080067cd
 80067b8:	080067d3 	.word	0x080067d3
 80067bc:	080067c7 	.word	0x080067c7
 80067c0:	2300      	movs	r3, #0
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e01d      	b.n	8006802 <UART_SetConfig+0xe2>
 80067c6:	2302      	movs	r3, #2
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e01a      	b.n	8006802 <UART_SetConfig+0xe2>
 80067cc:	2304      	movs	r3, #4
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e017      	b.n	8006802 <UART_SetConfig+0xe2>
 80067d2:	2308      	movs	r3, #8
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e014      	b.n	8006802 <UART_SetConfig+0xe2>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e011      	b.n	8006802 <UART_SetConfig+0xe2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a67      	ldr	r2, [pc, #412]	@ (8006980 <UART_SetConfig+0x260>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d102      	bne.n	80067ee <UART_SetConfig+0xce>
 80067e8:	2300      	movs	r3, #0
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e009      	b.n	8006802 <UART_SetConfig+0xe2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a64      	ldr	r2, [pc, #400]	@ (8006984 <UART_SetConfig+0x264>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d102      	bne.n	80067fe <UART_SetConfig+0xde>
 80067f8:	2300      	movs	r3, #0
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e001      	b.n	8006802 <UART_SetConfig+0xe2>
 80067fe:	2310      	movs	r3, #16
 8006800:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800680a:	d15a      	bne.n	80068c2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800680c:	7ffb      	ldrb	r3, [r7, #31]
 800680e:	2b08      	cmp	r3, #8
 8006810:	d827      	bhi.n	8006862 <UART_SetConfig+0x142>
 8006812:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <UART_SetConfig+0xf8>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	08006863 	.word	0x08006863
 8006828:	08006853 	.word	0x08006853
 800682c:	08006863 	.word	0x08006863
 8006830:	08006863 	.word	0x08006863
 8006834:	08006863 	.word	0x08006863
 8006838:	0800685b 	.word	0x0800685b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fe fc1c 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8006840:	61b8      	str	r0, [r7, #24]
        break;
 8006842:	e013      	b.n	800686c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006844:	f7fe fc3a 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8006848:	61b8      	str	r0, [r7, #24]
        break;
 800684a:	e00f      	b.n	800686c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800684c:	4b4e      	ldr	r3, [pc, #312]	@ (8006988 <UART_SetConfig+0x268>)
 800684e:	61bb      	str	r3, [r7, #24]
        break;
 8006850:	e00c      	b.n	800686c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fe fbb1 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8006856:	61b8      	str	r0, [r7, #24]
        break;
 8006858:	e008      	b.n	800686c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800685e:	61bb      	str	r3, [r7, #24]
        break;
 8006860:	e004      	b.n	800686c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	77bb      	strb	r3, [r7, #30]
        break;
 800686a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d074      	beq.n	800695c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	005a      	lsls	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	441a      	add	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d916      	bls.n	80068bc <UART_SetConfig+0x19c>
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006894:	d212      	bcs.n	80068bc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f023 030f 	bic.w	r3, r3, #15
 800689e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	89fa      	ldrh	r2, [r7, #14]
 80068b8:	60da      	str	r2, [r3, #12]
 80068ba:	e04f      	b.n	800695c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	77bb      	strb	r3, [r7, #30]
 80068c0:	e04c      	b.n	800695c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d828      	bhi.n	800691a <UART_SetConfig+0x1fa>
 80068c8:	a201      	add	r2, pc, #4	@ (adr r2, 80068d0 <UART_SetConfig+0x1b0>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068f5 	.word	0x080068f5
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	08006905 	.word	0x08006905
 80068dc:	0800691b 	.word	0x0800691b
 80068e0:	0800690b 	.word	0x0800690b
 80068e4:	0800691b 	.word	0x0800691b
 80068e8:	0800691b 	.word	0x0800691b
 80068ec:	0800691b 	.word	0x0800691b
 80068f0:	08006913 	.word	0x08006913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f4:	f7fe fbc0 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 80068f8:	61b8      	str	r0, [r7, #24]
        break;
 80068fa:	e013      	b.n	8006924 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068fc:	f7fe fbde 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8006900:	61b8      	str	r0, [r7, #24]
        break;
 8006902:	e00f      	b.n	8006924 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006904:	4b20      	ldr	r3, [pc, #128]	@ (8006988 <UART_SetConfig+0x268>)
 8006906:	61bb      	str	r3, [r7, #24]
        break;
 8006908:	e00c      	b.n	8006924 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800690a:	f7fe fb55 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 800690e:	61b8      	str	r0, [r7, #24]
        break;
 8006910:	e008      	b.n	8006924 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006916:	61bb      	str	r3, [r7, #24]
        break;
 8006918:	e004      	b.n	8006924 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	77bb      	strb	r3, [r7, #30]
        break;
 8006922:	bf00      	nop
    }

    if (pclk != 0U)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	085a      	lsrs	r2, r3, #1
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b0f      	cmp	r3, #15
 8006942:	d909      	bls.n	8006958 <UART_SetConfig+0x238>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694a:	d205      	bcs.n	8006958 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	b29a      	uxth	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	e001      	b.n	800695c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006968:	7fbb      	ldrb	r3, [r7, #30]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	efff69f3 	.word	0xefff69f3
 8006978:	40013800 	.word	0x40013800
 800697c:	40021000 	.word	0x40021000
 8006980:	40004400 	.word	0x40004400
 8006984:	40004800 	.word	0x40004800
 8006988:	007a1200 	.word	0x007a1200

0800698c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01a      	beq.n	8006aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a8a:	d10a      	bne.n	8006aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	605a      	str	r2, [r3, #4]
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b098      	sub	sp, #96	@ 0x60
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae0:	f7fb fe18 	bl	8002714 <HAL_GetTick>
 8006ae4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d12e      	bne.n	8006b52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006afc:	2200      	movs	r2, #0
 8006afe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f88c 	bl	8006c20 <UART_WaitOnFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d021      	beq.n	8006b52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e062      	b.n	8006c18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d149      	bne.n	8006bf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f856 	bl	8006c20 <UART_WaitOnFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d03c      	beq.n	8006bf4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	623b      	str	r3, [r7, #32]
   return(result);
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bcc:	61fa      	str	r2, [r7, #28]
 8006bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	69b9      	ldr	r1, [r7, #24]
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e011      	b.n	8006c18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3758      	adds	r7, #88	@ 0x58
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c30:	e04f      	b.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d04b      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3a:	f7fb fd6b 	bl	8002714 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d302      	bcc.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e04e      	b.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d037      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b80      	cmp	r3, #128	@ 0x80
 8006c66:	d034      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b40      	cmp	r3, #64	@ 0x40
 8006c6c:	d031      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d110      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2208      	movs	r2, #8
 8006c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f8ff 	bl	8006e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e029      	b.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cac:	d111      	bne.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f8e5 	bl	8006e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e00f      	b.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	bf0c      	ite	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	2300      	movne	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d0a0      	beq.n	8006c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b097      	sub	sp, #92	@ 0x5c
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2e:	d10e      	bne.n	8006d4e <UART_Start_Receive_IT+0x52>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <UART_Start_Receive_IT+0x48>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d42:	e02d      	b.n	8006da0 <UART_Start_Receive_IT+0xa4>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	22ff      	movs	r2, #255	@ 0xff
 8006d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d4c:	e028      	b.n	8006da0 <UART_Start_Receive_IT+0xa4>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10d      	bne.n	8006d72 <UART_Start_Receive_IT+0x76>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <UART_Start_Receive_IT+0x6c>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	22ff      	movs	r2, #255	@ 0xff
 8006d62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d66:	e01b      	b.n	8006da0 <UART_Start_Receive_IT+0xa4>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	227f      	movs	r2, #127	@ 0x7f
 8006d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d70:	e016      	b.n	8006da0 <UART_Start_Receive_IT+0xa4>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d7a:	d10d      	bne.n	8006d98 <UART_Start_Receive_IT+0x9c>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <UART_Start_Receive_IT+0x92>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	227f      	movs	r2, #127	@ 0x7f
 8006d88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d8c:	e008      	b.n	8006da0 <UART_Start_Receive_IT+0xa4>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	223f      	movs	r2, #63	@ 0x3f
 8006d92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d96:	e003      	b.n	8006da0 <UART_Start_Receive_IT+0xa4>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2222      	movs	r2, #34	@ 0x22
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006dd2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e5      	bne.n	8006db0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dec:	d107      	bne.n	8006dfe <UART_Start_Receive_IT+0x102>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <UART_Start_Receive_IT+0x184>)
 8006dfa:	669a      	str	r2, [r3, #104]	@ 0x68
 8006dfc:	e002      	b.n	8006e04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4a20      	ldr	r2, [pc, #128]	@ (8006e84 <UART_Start_Receive_IT+0x188>)
 8006e02:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d019      	beq.n	8006e40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e6      	bne.n	8006e0c <UART_Start_Receive_IT+0x110>
 8006e3e:	e018      	b.n	8006e72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f043 0320 	orr.w	r3, r3, #32
 8006e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	69f9      	ldr	r1, [r7, #28]
 8006e64:	6a3a      	ldr	r2, [r7, #32]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e6      	bne.n	8006e40 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	375c      	adds	r7, #92	@ 0x5c
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	08007179 	.word	0x08007179
 8006e84:	08006fd1 	.word	0x08006fd1

08006e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b095      	sub	sp, #84	@ 0x54
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e6      	bne.n	8006e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e5      	bne.n	8006ec2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d118      	bne.n	8006f30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f023 0310 	bic.w	r3, r3, #16
 8006f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6979      	ldr	r1, [r7, #20]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e6      	bne.n	8006efe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f44:	bf00      	nop
 8006f46:	3754      	adds	r7, #84	@ 0x54
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff fbc0 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6979      	ldr	r1, [r7, #20]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e6      	bne.n	8006f84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fb8c 	bl	80066e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc8:	bf00      	nop
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b09c      	sub	sp, #112	@ 0x70
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe8:	2b22      	cmp	r3, #34	@ 0x22
 8006fea:	f040 80b9 	bne.w	8007160 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ff4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ff8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ffc:	b2d9      	uxtb	r1, r3
 8006ffe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007002:	b2da      	uxtb	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007008:	400a      	ands	r2, r1
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 809c 	bne.w	8007170 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800704c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007056:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007058:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800705c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e6      	bne.n	8007038 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800707a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	667b      	str	r3, [r7, #100]	@ 0x64
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800708a:	647a      	str	r2, [r7, #68]	@ 0x44
 800708c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e5      	bne.n	800706a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d018      	beq.n	80070f2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	623b      	str	r3, [r7, #32]
   return(result);
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070de:	633b      	str	r3, [r7, #48]	@ 0x30
 80070e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d12e      	bne.n	8007158 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	60fb      	str	r3, [r7, #12]
   return(result);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f023 0310 	bic.w	r3, r3, #16
 8007114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	69b9      	ldr	r1, [r7, #24]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	617b      	str	r3, [r7, #20]
   return(result);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b10      	cmp	r3, #16
 800713e:	d103      	bne.n	8007148 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2210      	movs	r2, #16
 8007146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fad9 	bl	8006708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007156:	e00b      	b.n	8007170 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7f9 fa47 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 800715e:	e007      	b.n	8007170 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0208 	orr.w	r2, r2, #8
 800716e:	619a      	str	r2, [r3, #24]
}
 8007170:	bf00      	nop
 8007172:	3770      	adds	r7, #112	@ 0x70
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b09c      	sub	sp, #112	@ 0x70
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007186:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007190:	2b22      	cmp	r3, #34	@ 0x22
 8007192:	f040 80b9 	bne.w	8007308 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800719c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80071a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80071aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071ae:	4013      	ands	r3, r2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ba:	1c9a      	adds	r2, r3, #2
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 809c 	bne.w	8007318 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80071ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007200:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800720c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e6      	bne.n	80071e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	663b      	str	r3, [r7, #96]	@ 0x60
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007232:	643a      	str	r2, [r7, #64]	@ 0x40
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e5      	bne.n	8007212 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d018      	beq.n	800729a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	61fb      	str	r3, [r7, #28]
   return(result);
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800727c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007288:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800728c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d12e      	bne.n	8007300 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 0310 	bic.w	r3, r3, #16
 80072bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6979      	ldr	r1, [r7, #20]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	613b      	str	r3, [r7, #16]
   return(result);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d103      	bne.n	80072f0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2210      	movs	r2, #16
 80072ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fa05 	bl	8006708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072fe:	e00b      	b.n	8007318 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7f9 f973 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 8007306:	e007      	b.n	8007318 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0208 	orr.w	r2, r2, #8
 8007316:	619a      	str	r2, [r3, #24]
}
 8007318:	bf00      	nop
 800731a:	3770      	adds	r7, #112	@ 0x70
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007346:	2b84      	cmp	r3, #132	@ 0x84
 8007348:	d005      	beq.n	8007356 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800734a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	3303      	adds	r3, #3
 8007354:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007368:	f000 faf4 	bl	8007954 <vTaskStartScheduler>
  
  return osOK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	bd80      	pop	{r7, pc}

08007372 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007374:	b089      	sub	sp, #36	@ 0x24
 8007376:	af04      	add	r7, sp, #16
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d020      	beq.n	80073c6 <osThreadCreate+0x54>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01c      	beq.n	80073c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685c      	ldr	r4, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691e      	ldr	r6, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff ffc8 	bl	8007334 <makeFreeRtosPriority>
 80073a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073ae:	9202      	str	r2, [sp, #8]
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	9100      	str	r1, [sp, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4632      	mov	r2, r6
 80073b8:	4629      	mov	r1, r5
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f8ed 	bl	800759a <xTaskCreateStatic>
 80073c0:	4603      	mov	r3, r0
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e01c      	b.n	8007400 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685c      	ldr	r4, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ffaa 	bl	8007334 <makeFreeRtosPriority>
 80073e0:	4602      	mov	r2, r0
 80073e2:	f107 030c 	add.w	r3, r7, #12
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	9200      	str	r2, [sp, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	4632      	mov	r2, r6
 80073ee:	4629      	mov	r1, r5
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f931 	bl	8007658 <xTaskCreate>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d001      	beq.n	8007400 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e000      	b.n	8007402 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007400:	68fb      	ldr	r3, [r7, #12]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800740a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <osDelay+0x16>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	e000      	b.n	8007422 <osDelay+0x18>
 8007420:	2301      	movs	r3, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fa60 	bl	80078e8 <vTaskDelay>
  
  return osOK;
 8007428:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f103 0208 	add.w	r2, r3, #8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f103 0208 	add.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f103 0208 	add.w	r2, r3, #8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d103      	bne.n	80074f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e00c      	b.n	800750e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3308      	adds	r3, #8
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	e002      	b.n	8007502 <vListInsert+0x2e>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	d2f6      	bcs.n	80074fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6892      	ldr	r2, [r2, #8]
 800755c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6852      	ldr	r2, [r2, #4]
 8007566:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d103      	bne.n	800757a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	1e5a      	subs	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800759a:	b580      	push	{r7, lr}
 800759c:	b08e      	sub	sp, #56	@ 0x38
 800759e:	af04      	add	r7, sp, #16
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10b      	bne.n	80075e4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61fb      	str	r3, [r7, #28]
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	e7fd      	b.n	80075e0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075e4:	23a0      	movs	r3, #160	@ 0xa0
 80075e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80075ec:	d00b      	beq.n	8007606 <xTaskCreateStatic+0x6c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	61bb      	str	r3, [r7, #24]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01e      	beq.n	800764a <xTaskCreateStatic+0xb0>
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01b      	beq.n	800764a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800761a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	2202      	movs	r2, #2
 8007620:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007624:	2300      	movs	r3, #0
 8007626:	9303      	str	r3, [sp, #12]
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	9302      	str	r3, [sp, #8]
 800762c:	f107 0314 	add.w	r3, r7, #20
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f851 	bl	80076e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007642:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007644:	f000 f8e6 	bl	8007814 <prvAddNewTaskToReadyList>
 8007648:	e001      	b.n	800764e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800764e:	697b      	ldr	r3, [r7, #20]
	}
 8007650:	4618      	mov	r0, r3
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08c      	sub	sp, #48	@ 0x30
 800765c:	af04      	add	r7, sp, #16
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4618      	mov	r0, r3
 800766e:	f000 ff13 	bl	8008498 <pvPortMalloc>
 8007672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00e      	beq.n	8007698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800767a:	20a0      	movs	r0, #160	@ 0xa0
 800767c:	f000 ff0c 	bl	8008498 <pvPortMalloc>
 8007680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	631a      	str	r2, [r3, #48]	@ 0x30
 800768e:	e005      	b.n	800769c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007690:	6978      	ldr	r0, [r7, #20]
 8007692:	f000 ffc9 	bl	8008628 <vPortFree>
 8007696:	e001      	b.n	800769c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007698:	2300      	movs	r3, #0
 800769a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d017      	beq.n	80076d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076aa:	88fa      	ldrh	r2, [r7, #6]
 80076ac:	2300      	movs	r3, #0
 80076ae:	9303      	str	r3, [sp, #12]
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f80f 	bl	80076e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c6:	69f8      	ldr	r0, [r7, #28]
 80076c8:	f000 f8a4 	bl	8007814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076cc:	2301      	movs	r3, #1
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	e002      	b.n	80076d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076d8:	69bb      	ldr	r3, [r7, #24]
	}
 80076da:	4618      	mov	r0, r3
 80076dc:	3720      	adds	r7, #32
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076fc:	3b01      	subs	r3, #1
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f023 0307 	bic.w	r3, r3, #7
 800770a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	617b      	str	r3, [r7, #20]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	e012      	b.n	800775a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	7819      	ldrb	r1, [r3, #0]
 800773c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	3334      	adds	r3, #52	@ 0x34
 8007744:	460a      	mov	r2, r1
 8007746:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4413      	add	r3, r2
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	3301      	adds	r3, #1
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2b0f      	cmp	r3, #15
 800775e:	d9e9      	bls.n	8007734 <prvInitialiseNewTask+0x50>
 8007760:	e000      	b.n	8007764 <prvInitialiseNewTask+0x80>
		{
			break;
 8007762:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800776c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776e:	2b06      	cmp	r3, #6
 8007770:	d901      	bls.n	8007776 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007772:	2306      	movs	r3, #6
 8007774:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800777a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007780:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	2200      	movs	r2, #0
 8007786:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	3304      	adds	r3, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fe70 	bl	8007472 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	3318      	adds	r3, #24
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff fe6b 	bl	8007472 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800779c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	f1c3 0207 	rsb	r2, r3, #7
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	334c      	adds	r3, #76	@ 0x4c
 80077c6:	224c      	movs	r2, #76	@ 0x4c
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 f9b6 	bl	8008b3c <memset>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007808 <prvInitialiseNewTask+0x124>)
 80077d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	4a0c      	ldr	r2, [pc, #48]	@ (800780c <prvInitialiseNewTask+0x128>)
 80077da:	655a      	str	r2, [r3, #84]	@ 0x54
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	4a0c      	ldr	r2, [pc, #48]	@ (8007810 <prvInitialiseNewTask+0x12c>)
 80077e0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	69b8      	ldr	r0, [r7, #24]
 80077e8:	f000 fc44 	bl	8008074 <pxPortInitialiseStack>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077fe:	bf00      	nop
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20002664 	.word	0x20002664
 800780c:	200026cc 	.word	0x200026cc
 8007810:	20002734 	.word	0x20002734

08007814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800781c:	f000 fd5c 	bl	80082d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007820:	4b2a      	ldr	r3, [pc, #168]	@ (80078cc <prvAddNewTaskToReadyList+0xb8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	4a29      	ldr	r2, [pc, #164]	@ (80078cc <prvAddNewTaskToReadyList+0xb8>)
 8007828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800782a:	4b29      	ldr	r3, [pc, #164]	@ (80078d0 <prvAddNewTaskToReadyList+0xbc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007832:	4a27      	ldr	r2, [pc, #156]	@ (80078d0 <prvAddNewTaskToReadyList+0xbc>)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007838:	4b24      	ldr	r3, [pc, #144]	@ (80078cc <prvAddNewTaskToReadyList+0xb8>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d110      	bne.n	8007862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007840:	f000 fae8 	bl	8007e14 <prvInitialiseTaskLists>
 8007844:	e00d      	b.n	8007862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007846:	4b23      	ldr	r3, [pc, #140]	@ (80078d4 <prvAddNewTaskToReadyList+0xc0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800784e:	4b20      	ldr	r3, [pc, #128]	@ (80078d0 <prvAddNewTaskToReadyList+0xbc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007858:	429a      	cmp	r2, r3
 800785a:	d802      	bhi.n	8007862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800785c:	4a1c      	ldr	r2, [pc, #112]	@ (80078d0 <prvAddNewTaskToReadyList+0xbc>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007862:	4b1d      	ldr	r3, [pc, #116]	@ (80078d8 <prvAddNewTaskToReadyList+0xc4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3301      	adds	r3, #1
 8007868:	4a1b      	ldr	r2, [pc, #108]	@ (80078d8 <prvAddNewTaskToReadyList+0xc4>)
 800786a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	2201      	movs	r2, #1
 8007872:	409a      	lsls	r2, r3
 8007874:	4b19      	ldr	r3, [pc, #100]	@ (80078dc <prvAddNewTaskToReadyList+0xc8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4313      	orrs	r3, r2
 800787a:	4a18      	ldr	r2, [pc, #96]	@ (80078dc <prvAddNewTaskToReadyList+0xc8>)
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4a15      	ldr	r2, [pc, #84]	@ (80078e0 <prvAddNewTaskToReadyList+0xcc>)
 800788c:	441a      	add	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7ff fdf9 	bl	800748c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800789a:	f000 fd4f 	bl	800833c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <prvAddNewTaskToReadyList+0xc0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00e      	beq.n	80078c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078a6:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <prvAddNewTaskToReadyList+0xbc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d207      	bcs.n	80078c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078b4:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <prvAddNewTaskToReadyList+0xd0>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000e58 	.word	0x20000e58
 80078d0:	20000d58 	.word	0x20000d58
 80078d4:	20000e64 	.word	0x20000e64
 80078d8:	20000e74 	.word	0x20000e74
 80078dc:	20000e60 	.word	0x20000e60
 80078e0:	20000d5c 	.word	0x20000d5c
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d018      	beq.n	800792c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078fa:	4b14      	ldr	r3, [pc, #80]	@ (800794c <vTaskDelay+0x64>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <vTaskDelay+0x32>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	60bb      	str	r3, [r7, #8]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800791a:	f000 f885 	bl	8007a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800791e:	2100      	movs	r1, #0
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb41 	bl	8007fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007926:	f000 f88d 	bl	8007a44 <xTaskResumeAll>
 800792a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d107      	bne.n	8007942 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007932:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <vTaskDelay+0x68>)
 8007934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000e80 	.word	0x20000e80
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08a      	sub	sp, #40	@ 0x28
 8007958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007962:	463a      	mov	r2, r7
 8007964:	1d39      	adds	r1, r7, #4
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	4618      	mov	r0, r3
 800796c:	f7f8 fc88 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	9202      	str	r2, [sp, #8]
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	2300      	movs	r3, #0
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	460a      	mov	r2, r1
 8007982:	4921      	ldr	r1, [pc, #132]	@ (8007a08 <vTaskStartScheduler+0xb4>)
 8007984:	4821      	ldr	r0, [pc, #132]	@ (8007a0c <vTaskStartScheduler+0xb8>)
 8007986:	f7ff fe08 	bl	800759a <xTaskCreateStatic>
 800798a:	4603      	mov	r3, r0
 800798c:	4a20      	ldr	r2, [pc, #128]	@ (8007a10 <vTaskStartScheduler+0xbc>)
 800798e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007990:	4b1f      	ldr	r3, [pc, #124]	@ (8007a10 <vTaskStartScheduler+0xbc>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007998:	2301      	movs	r3, #1
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e001      	b.n	80079a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d11b      	bne.n	80079e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	613b      	str	r3, [r7, #16]
}
 80079ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079bc:	4b15      	ldr	r3, [pc, #84]	@ (8007a14 <vTaskStartScheduler+0xc0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	334c      	adds	r3, #76	@ 0x4c
 80079c2:	4a15      	ldr	r2, [pc, #84]	@ (8007a18 <vTaskStartScheduler+0xc4>)
 80079c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079c6:	4b15      	ldr	r3, [pc, #84]	@ (8007a1c <vTaskStartScheduler+0xc8>)
 80079c8:	f04f 32ff 	mov.w	r2, #4294967295
 80079cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079ce:	4b14      	ldr	r3, [pc, #80]	@ (8007a20 <vTaskStartScheduler+0xcc>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80079d4:	4b13      	ldr	r3, [pc, #76]	@ (8007a24 <vTaskStartScheduler+0xd0>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079da:	f000 fbd9 	bl	8008190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079de:	e00f      	b.n	8007a00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d10b      	bne.n	8007a00 <vTaskStartScheduler+0xac>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	60fb      	str	r3, [r7, #12]
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	e7fd      	b.n	80079fc <vTaskStartScheduler+0xa8>
}
 8007a00:	bf00      	nop
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	0800a068 	.word	0x0800a068
 8007a0c:	08007de5 	.word	0x08007de5
 8007a10:	20000e7c 	.word	0x20000e7c
 8007a14:	20000d58 	.word	0x20000d58
 8007a18:	20000010 	.word	0x20000010
 8007a1c:	20000e78 	.word	0x20000e78
 8007a20:	20000e64 	.word	0x20000e64
 8007a24:	20000e5c 	.word	0x20000e5c

08007a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007a2c:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <vTaskSuspendAll+0x18>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	4a03      	ldr	r2, [pc, #12]	@ (8007a40 <vTaskSuspendAll+0x18>)
 8007a34:	6013      	str	r3, [r2, #0]
}
 8007a36:	bf00      	nop
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	20000e80 	.word	0x20000e80

08007a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a52:	4b42      	ldr	r3, [pc, #264]	@ (8007b5c <xTaskResumeAll+0x118>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a72:	f000 fc31 	bl	80082d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a76:	4b39      	ldr	r3, [pc, #228]	@ (8007b5c <xTaskResumeAll+0x118>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	4a37      	ldr	r2, [pc, #220]	@ (8007b5c <xTaskResumeAll+0x118>)
 8007a7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a80:	4b36      	ldr	r3, [pc, #216]	@ (8007b5c <xTaskResumeAll+0x118>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d161      	bne.n	8007b4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a88:	4b35      	ldr	r3, [pc, #212]	@ (8007b60 <xTaskResumeAll+0x11c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d05d      	beq.n	8007b4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a90:	e02e      	b.n	8007af0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007a92:	4b34      	ldr	r3, [pc, #208]	@ (8007b64 <xTaskResumeAll+0x120>)
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fd51 	bl	8007546 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fd4c 	bl	8007546 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b68 <xTaskResumeAll+0x124>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	4a2a      	ldr	r2, [pc, #168]	@ (8007b68 <xTaskResumeAll+0x124>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4a27      	ldr	r2, [pc, #156]	@ (8007b6c <xTaskResumeAll+0x128>)
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	f7ff fcd8 	bl	800748c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae0:	4b23      	ldr	r3, [pc, #140]	@ (8007b70 <xTaskResumeAll+0x12c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d302      	bcc.n	8007af0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007aea:	4b22      	ldr	r3, [pc, #136]	@ (8007b74 <xTaskResumeAll+0x130>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af0:	4b1c      	ldr	r3, [pc, #112]	@ (8007b64 <xTaskResumeAll+0x120>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1cc      	bne.n	8007a92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007afe:	f000 fa2d 	bl	8007f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b02:	4b1d      	ldr	r3, [pc, #116]	@ (8007b78 <xTaskResumeAll+0x134>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d010      	beq.n	8007b30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b0e:	f000 f847 	bl	8007ba0 <xTaskIncrementTick>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b18:	4b16      	ldr	r3, [pc, #88]	@ (8007b74 <xTaskResumeAll+0x130>)
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1f1      	bne.n	8007b0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007b2a:	4b13      	ldr	r3, [pc, #76]	@ (8007b78 <xTaskResumeAll+0x134>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b30:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <xTaskResumeAll+0x130>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d009      	beq.n	8007b4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b7c <xTaskResumeAll+0x138>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b4c:	f000 fbf6 	bl	800833c <vPortExitCritical>

	return xAlreadyYielded;
 8007b50:	68bb      	ldr	r3, [r7, #8]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000e80 	.word	0x20000e80
 8007b60:	20000e58 	.word	0x20000e58
 8007b64:	20000e18 	.word	0x20000e18
 8007b68:	20000e60 	.word	0x20000e60
 8007b6c:	20000d5c 	.word	0x20000d5c
 8007b70:	20000d58 	.word	0x20000d58
 8007b74:	20000e6c 	.word	0x20000e6c
 8007b78:	20000e68 	.word	0x20000e68
 8007b7c:	e000ed04 	.word	0xe000ed04

08007b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b86:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <xTaskGetTickCount+0x1c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b8c:	687b      	ldr	r3, [r7, #4]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20000e5c 	.word	0x20000e5c

08007ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007baa:	4b51      	ldr	r3, [pc, #324]	@ (8007cf0 <xTaskIncrementTick+0x150>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 808e 	bne.w	8007cd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8007cf4 <xTaskIncrementTick+0x154>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8007cf4 <xTaskIncrementTick+0x154>)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d121      	bne.n	8007c0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8007cf8 <xTaskIncrementTick+0x158>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <xTaskIncrementTick+0x4a>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	603b      	str	r3, [r7, #0]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <xTaskIncrementTick+0x46>
 8007bea:	4b43      	ldr	r3, [pc, #268]	@ (8007cf8 <xTaskIncrementTick+0x158>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	4b42      	ldr	r3, [pc, #264]	@ (8007cfc <xTaskIncrementTick+0x15c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a40      	ldr	r2, [pc, #256]	@ (8007cf8 <xTaskIncrementTick+0x158>)
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	4a40      	ldr	r2, [pc, #256]	@ (8007cfc <xTaskIncrementTick+0x15c>)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	4b40      	ldr	r3, [pc, #256]	@ (8007d00 <xTaskIncrementTick+0x160>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	4a3e      	ldr	r2, [pc, #248]	@ (8007d00 <xTaskIncrementTick+0x160>)
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	f000 f9a8 	bl	8007f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d04 <xTaskIncrementTick+0x164>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d34d      	bcc.n	8007cb2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c16:	4b38      	ldr	r3, [pc, #224]	@ (8007cf8 <xTaskIncrementTick+0x158>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <xTaskIncrementTick+0x84>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <xTaskIncrementTick+0x86>
 8007c24:	2300      	movs	r3, #0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2a:	4b36      	ldr	r3, [pc, #216]	@ (8007d04 <xTaskIncrementTick+0x164>)
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	601a      	str	r2, [r3, #0]
					break;
 8007c32:	e03e      	b.n	8007cb2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c34:	4b30      	ldr	r3, [pc, #192]	@ (8007cf8 <xTaskIncrementTick+0x158>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d203      	bcs.n	8007c54 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d04 <xTaskIncrementTick+0x164>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6013      	str	r3, [r2, #0]
						break;
 8007c52:	e02e      	b.n	8007cb2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fc74 	bl	8007546 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	3318      	adds	r3, #24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fc6b 	bl	8007546 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	4b23      	ldr	r3, [pc, #140]	@ (8007d08 <xTaskIncrementTick+0x168>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	4a22      	ldr	r2, [pc, #136]	@ (8007d08 <xTaskIncrementTick+0x168>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d0c <xTaskIncrementTick+0x16c>)
 8007c90:	441a      	add	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7ff fbf7 	bl	800748c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d10 <xTaskIncrementTick+0x170>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d3b4      	bcc.n	8007c16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb0:	e7b1      	b.n	8007c16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cb2:	4b17      	ldr	r3, [pc, #92]	@ (8007d10 <xTaskIncrementTick+0x170>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb8:	4914      	ldr	r1, [pc, #80]	@ (8007d0c <xTaskIncrementTick+0x16c>)
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d907      	bls.n	8007cda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e004      	b.n	8007cda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007cd0:	4b10      	ldr	r3, [pc, #64]	@ (8007d14 <xTaskIncrementTick+0x174>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007d14 <xTaskIncrementTick+0x174>)
 8007cd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007cda:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <xTaskIncrementTick+0x178>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ce6:	697b      	ldr	r3, [r7, #20]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000e80 	.word	0x20000e80
 8007cf4:	20000e5c 	.word	0x20000e5c
 8007cf8:	20000e10 	.word	0x20000e10
 8007cfc:	20000e14 	.word	0x20000e14
 8007d00:	20000e70 	.word	0x20000e70
 8007d04:	20000e78 	.word	0x20000e78
 8007d08:	20000e60 	.word	0x20000e60
 8007d0c:	20000d5c 	.word	0x20000d5c
 8007d10:	20000d58 	.word	0x20000d58
 8007d14:	20000e68 	.word	0x20000e68
 8007d18:	20000e6c 	.word	0x20000e6c

08007d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d22:	4b2a      	ldr	r3, [pc, #168]	@ (8007dcc <vTaskSwitchContext+0xb0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d2a:	4b29      	ldr	r3, [pc, #164]	@ (8007dd0 <vTaskSwitchContext+0xb4>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d30:	e045      	b.n	8007dbe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007d32:	4b27      	ldr	r3, [pc, #156]	@ (8007dd0 <vTaskSwitchContext+0xb4>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007d38:	4b26      	ldr	r3, [pc, #152]	@ (8007dd4 <vTaskSwitchContext+0xb8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	fab3 f383 	clz	r3, r3
 8007d44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	f1c3 031f 	rsb	r3, r3, #31
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	4922      	ldr	r1, [pc, #136]	@ (8007dd8 <vTaskSwitchContext+0xbc>)
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	e7fd      	b.n	8007d76 <vTaskSwitchContext+0x5a>
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a14      	ldr	r2, [pc, #80]	@ (8007dd8 <vTaskSwitchContext+0xbc>)
 8007d86:	4413      	add	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d104      	bne.n	8007daa <vTaskSwitchContext+0x8e>
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	605a      	str	r2, [r3, #4]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <vTaskSwitchContext+0xc0>)
 8007db2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007db4:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <vTaskSwitchContext+0xc0>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	334c      	adds	r3, #76	@ 0x4c
 8007dba:	4a09      	ldr	r2, [pc, #36]	@ (8007de0 <vTaskSwitchContext+0xc4>)
 8007dbc:	6013      	str	r3, [r2, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000e80 	.word	0x20000e80
 8007dd0:	20000e6c 	.word	0x20000e6c
 8007dd4:	20000e60 	.word	0x20000e60
 8007dd8:	20000d5c 	.word	0x20000d5c
 8007ddc:	20000d58 	.word	0x20000d58
 8007de0:	20000010 	.word	0x20000010

08007de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dec:	f000 f852 	bl	8007e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <prvIdleTask+0x28>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d9f9      	bls.n	8007dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007df8:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <prvIdleTask+0x2c>)
 8007dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e08:	e7f0      	b.n	8007dec <prvIdleTask+0x8>
 8007e0a:	bf00      	nop
 8007e0c:	20000d5c 	.word	0x20000d5c
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	e00c      	b.n	8007e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4a12      	ldr	r2, [pc, #72]	@ (8007e74 <prvInitialiseTaskLists+0x60>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff faff 	bl	8007432 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3301      	adds	r3, #1
 8007e38:	607b      	str	r3, [r7, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b06      	cmp	r3, #6
 8007e3e:	d9ef      	bls.n	8007e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e40:	480d      	ldr	r0, [pc, #52]	@ (8007e78 <prvInitialiseTaskLists+0x64>)
 8007e42:	f7ff faf6 	bl	8007432 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e46:	480d      	ldr	r0, [pc, #52]	@ (8007e7c <prvInitialiseTaskLists+0x68>)
 8007e48:	f7ff faf3 	bl	8007432 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e4c:	480c      	ldr	r0, [pc, #48]	@ (8007e80 <prvInitialiseTaskLists+0x6c>)
 8007e4e:	f7ff faf0 	bl	8007432 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e52:	480c      	ldr	r0, [pc, #48]	@ (8007e84 <prvInitialiseTaskLists+0x70>)
 8007e54:	f7ff faed 	bl	8007432 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e58:	480b      	ldr	r0, [pc, #44]	@ (8007e88 <prvInitialiseTaskLists+0x74>)
 8007e5a:	f7ff faea 	bl	8007432 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <prvInitialiseTaskLists+0x78>)
 8007e60:	4a05      	ldr	r2, [pc, #20]	@ (8007e78 <prvInitialiseTaskLists+0x64>)
 8007e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e64:	4b0a      	ldr	r3, [pc, #40]	@ (8007e90 <prvInitialiseTaskLists+0x7c>)
 8007e66:	4a05      	ldr	r2, [pc, #20]	@ (8007e7c <prvInitialiseTaskLists+0x68>)
 8007e68:	601a      	str	r2, [r3, #0]
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000d5c 	.word	0x20000d5c
 8007e78:	20000de8 	.word	0x20000de8
 8007e7c:	20000dfc 	.word	0x20000dfc
 8007e80:	20000e18 	.word	0x20000e18
 8007e84:	20000e2c 	.word	0x20000e2c
 8007e88:	20000e44 	.word	0x20000e44
 8007e8c:	20000e10 	.word	0x20000e10
 8007e90:	20000e14 	.word	0x20000e14

08007e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e9a:	e019      	b.n	8007ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e9c:	f000 fa1c 	bl	80082d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ea0:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <prvCheckTasksWaitingTermination+0x50>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fb4a 	bl	8007546 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee8 <prvCheckTasksWaitingTermination+0x54>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee8 <prvCheckTasksWaitingTermination+0x54>)
 8007eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <prvCheckTasksWaitingTermination+0x58>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8007eec <prvCheckTasksWaitingTermination+0x58>)
 8007ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ec6:	f000 fa39 	bl	800833c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f810 	bl	8007ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <prvCheckTasksWaitingTermination+0x58>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e1      	bne.n	8007e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000e2c 	.word	0x20000e2c
 8007ee8:	20000e58 	.word	0x20000e58
 8007eec:	20000e40 	.word	0x20000e40

08007ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	334c      	adds	r3, #76	@ 0x4c
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fe37 	bl	8008b70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d108      	bne.n	8007f1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 fb89 	bl	8008628 <vPortFree>
				vPortFree( pxTCB );
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fb86 	bl	8008628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f1c:	e019      	b.n	8007f52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d103      	bne.n	8007f30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb7d 	bl	8008628 <vPortFree>
	}
 8007f2e:	e010      	b.n	8007f52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d00b      	beq.n	8007f52 <prvDeleteTCB+0x62>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	60fb      	str	r3, [r7, #12]
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	e7fd      	b.n	8007f4e <prvDeleteTCB+0x5e>
	}
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f62:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x44>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <prvResetNextTaskUnblockTime+0x14>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <prvResetNextTaskUnblockTime+0x16>
 8007f70:	2300      	movs	r3, #0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d004      	beq.n	8007f80 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <prvResetNextTaskUnblockTime+0x48>)
 8007f78:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f7e:	e008      	b.n	8007f92 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x44>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	4a05      	ldr	r2, [pc, #20]	@ (8007fa4 <prvResetNextTaskUnblockTime+0x48>)
 8007f90:	6013      	str	r3, [r2, #0]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	20000e10 	.word	0x20000e10
 8007fa4:	20000e78 	.word	0x20000e78

08007fa8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fb2:	4b29      	ldr	r3, [pc, #164]	@ (8008058 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb8:	4b28      	ldr	r3, [pc, #160]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fac1 	bl	8007546 <uxListRemove>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10b      	bne.n	8007fe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007fca:	4b24      	ldr	r3, [pc, #144]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	43da      	mvns	r2, r3
 8007fd8:	4b21      	ldr	r3, [pc, #132]	@ (8008060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	4a20      	ldr	r2, [pc, #128]	@ (8008060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d10a      	bne.n	8008000 <prvAddCurrentTaskToDelayedList+0x58>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	481a      	ldr	r0, [pc, #104]	@ (8008064 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ffa:	f7ff fa47 	bl	800748c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ffe:	e026      	b.n	800804e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008008:	4b14      	ldr	r3, [pc, #80]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	429a      	cmp	r2, r3
 8008016:	d209      	bcs.n	800802c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008018:	4b13      	ldr	r3, [pc, #76]	@ (8008068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f7ff fa55 	bl	80074d4 <vListInsert>
}
 800802a:	e010      	b.n	800804e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800802c:	4b0f      	ldr	r3, [pc, #60]	@ (800806c <prvAddCurrentTaskToDelayedList+0xc4>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4b0a      	ldr	r3, [pc, #40]	@ (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3304      	adds	r3, #4
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f7ff fa4b 	bl	80074d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	429a      	cmp	r2, r3
 8008046:	d202      	bcs.n	800804e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008048:	4a09      	ldr	r2, [pc, #36]	@ (8008070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6013      	str	r3, [r2, #0]
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000e5c 	.word	0x20000e5c
 800805c:	20000d58 	.word	0x20000d58
 8008060:	20000e60 	.word	0x20000e60
 8008064:	20000e44 	.word	0x20000e44
 8008068:	20000e14 	.word	0x20000e14
 800806c:	20000e10 	.word	0x20000e10
 8008070:	20000e78 	.word	0x20000e78

08008074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3b04      	subs	r3, #4
 8008084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800808c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b04      	subs	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080a4:	4a0c      	ldr	r2, [pc, #48]	@ (80080d8 <pxPortInitialiseStack+0x64>)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3b14      	subs	r3, #20
 80080ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3b04      	subs	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f06f 0202 	mvn.w	r2, #2
 80080c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3b20      	subs	r3, #32
 80080c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ca:	68fb      	ldr	r3, [r7, #12]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	080080dd 	.word	0x080080dd

080080dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080e6:	4b13      	ldr	r3, [pc, #76]	@ (8008134 <prvTaskExitError+0x58>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d00b      	beq.n	8008108 <prvTaskExitError+0x2c>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60fb      	str	r3, [r7, #12]
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	e7fd      	b.n	8008104 <prvTaskExitError+0x28>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	60bb      	str	r3, [r7, #8]
}
 800811a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800811c:	bf00      	nop
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0fc      	beq.n	800811e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000000c 	.word	0x2000000c
	...

08008140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <pxCurrentTCBConst2>)
 8008142:	6819      	ldr	r1, [r3, #0]
 8008144:	6808      	ldr	r0, [r1, #0]
 8008146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	f380 8809 	msr	PSP, r0
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8811 	msr	BASEPRI, r0
 800815a:	4770      	bx	lr
 800815c:	f3af 8000 	nop.w

08008160 <pxCurrentTCBConst2>:
 8008160:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop

08008168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008168:	4808      	ldr	r0, [pc, #32]	@ (800818c <prvPortStartFirstTask+0x24>)
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	6800      	ldr	r0, [r0, #0]
 800816e:	f380 8808 	msr	MSP, r0
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f380 8814 	msr	CONTROL, r0
 800817a:	b662      	cpsie	i
 800817c:	b661      	cpsie	f
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	df00      	svc	0
 8008188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800818a:	bf00      	nop
 800818c:	e000ed08 	.word	0xe000ed08

08008190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008196:	4b47      	ldr	r3, [pc, #284]	@ (80082b4 <xPortStartScheduler+0x124>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a47      	ldr	r2, [pc, #284]	@ (80082b8 <xPortStartScheduler+0x128>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10b      	bne.n	80081b8 <xPortStartScheduler+0x28>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	613b      	str	r3, [r7, #16]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081b8:	4b3e      	ldr	r3, [pc, #248]	@ (80082b4 <xPortStartScheduler+0x124>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a3f      	ldr	r2, [pc, #252]	@ (80082bc <xPortStartScheduler+0x12c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d10b      	bne.n	80081da <xPortStartScheduler+0x4a>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60fb      	str	r3, [r7, #12]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081da:	4b39      	ldr	r3, [pc, #228]	@ (80082c0 <xPortStartScheduler+0x130>)
 80081dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	22ff      	movs	r2, #255	@ 0xff
 80081ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	4b31      	ldr	r3, [pc, #196]	@ (80082c4 <xPortStartScheduler+0x134>)
 8008200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008202:	4b31      	ldr	r3, [pc, #196]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008204:	2207      	movs	r2, #7
 8008206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008208:	e009      	b.n	800821e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800820a:	4b2f      	ldr	r3, [pc, #188]	@ (80082c8 <xPortStartScheduler+0x138>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3b01      	subs	r3, #1
 8008210:	4a2d      	ldr	r2, [pc, #180]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008226:	2b80      	cmp	r3, #128	@ 0x80
 8008228:	d0ef      	beq.n	800820a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800822a:	4b27      	ldr	r3, [pc, #156]	@ (80082c8 <xPortStartScheduler+0x138>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f1c3 0307 	rsb	r3, r3, #7
 8008232:	2b04      	cmp	r3, #4
 8008234:	d00b      	beq.n	800824e <xPortStartScheduler+0xbe>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	60bb      	str	r3, [r7, #8]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800824e:	4b1e      	ldr	r3, [pc, #120]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	4a1c      	ldr	r2, [pc, #112]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008258:	4b1b      	ldr	r3, [pc, #108]	@ (80082c8 <xPortStartScheduler+0x138>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008260:	4a19      	ldr	r2, [pc, #100]	@ (80082c8 <xPortStartScheduler+0x138>)
 8008262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	b2da      	uxtb	r2, r3
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800826c:	4b17      	ldr	r3, [pc, #92]	@ (80082cc <xPortStartScheduler+0x13c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a16      	ldr	r2, [pc, #88]	@ (80082cc <xPortStartScheduler+0x13c>)
 8008272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008278:	4b14      	ldr	r3, [pc, #80]	@ (80082cc <xPortStartScheduler+0x13c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a13      	ldr	r2, [pc, #76]	@ (80082cc <xPortStartScheduler+0x13c>)
 800827e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008284:	f000 f8da 	bl	800843c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008288:	4b11      	ldr	r3, [pc, #68]	@ (80082d0 <xPortStartScheduler+0x140>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800828e:	f000 f8f9 	bl	8008484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008292:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <xPortStartScheduler+0x144>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a0f      	ldr	r2, [pc, #60]	@ (80082d4 <xPortStartScheduler+0x144>)
 8008298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800829c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800829e:	f7ff ff63 	bl	8008168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082a2:	f7ff fd3b 	bl	8007d1c <vTaskSwitchContext>
	prvTaskExitError();
 80082a6:	f7ff ff19 	bl	80080dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	e000ed00 	.word	0xe000ed00
 80082b8:	410fc271 	.word	0x410fc271
 80082bc:	410fc270 	.word	0x410fc270
 80082c0:	e000e400 	.word	0xe000e400
 80082c4:	20000e84 	.word	0x20000e84
 80082c8:	20000e88 	.word	0x20000e88
 80082cc:	e000ed20 	.word	0xe000ed20
 80082d0:	2000000c 	.word	0x2000000c
 80082d4:	e000ef34 	.word	0xe000ef34

080082d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
}
 80082f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082f2:	4b10      	ldr	r3, [pc, #64]	@ (8008334 <vPortEnterCritical+0x5c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3301      	adds	r3, #1
 80082f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008334 <vPortEnterCritical+0x5c>)
 80082fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <vPortEnterCritical+0x5c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d110      	bne.n	8008326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <vPortEnterCritical+0x60>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <vPortEnterCritical+0x4e>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	603b      	str	r3, [r7, #0]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <vPortEnterCritical+0x4a>
	}
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	2000000c 	.word	0x2000000c
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008342:	4b12      	ldr	r3, [pc, #72]	@ (800838c <vPortExitCritical+0x50>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10b      	bne.n	8008362 <vPortExitCritical+0x26>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	e7fd      	b.n	800835e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008362:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <vPortExitCritical+0x50>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3b01      	subs	r3, #1
 8008368:	4a08      	ldr	r2, [pc, #32]	@ (800838c <vPortExitCritical+0x50>)
 800836a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800836c:	4b07      	ldr	r3, [pc, #28]	@ (800838c <vPortExitCritical+0x50>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <vPortExitCritical+0x44>
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800837e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	2000000c 	.word	0x2000000c

08008390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008390:	f3ef 8009 	mrs	r0, PSP
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4b15      	ldr	r3, [pc, #84]	@ (80083f0 <pxCurrentTCBConst>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	f01e 0f10 	tst.w	lr, #16
 80083a0:	bf08      	it	eq
 80083a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	6010      	str	r0, [r2, #0]
 80083ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083b4:	f380 8811 	msr	BASEPRI, r0
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f7ff fcac 	bl	8007d1c <vTaskSwitchContext>
 80083c4:	f04f 0000 	mov.w	r0, #0
 80083c8:	f380 8811 	msr	BASEPRI, r0
 80083cc:	bc09      	pop	{r0, r3}
 80083ce:	6819      	ldr	r1, [r3, #0]
 80083d0:	6808      	ldr	r0, [r1, #0]
 80083d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d6:	f01e 0f10 	tst.w	lr, #16
 80083da:	bf08      	it	eq
 80083dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083e0:	f380 8809 	msr	PSP, r0
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	f3af 8000 	nop.w

080083f0 <pxCurrentTCBConst>:
 80083f0:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
}
 8008410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008412:	f7ff fbc5 	bl	8007ba0 <xTaskIncrementTick>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <SysTick_Handler+0x40>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f383 8811 	msr	BASEPRI, r3
}
 800842e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008440:	4b0b      	ldr	r3, [pc, #44]	@ (8008470 <vPortSetupTimerInterrupt+0x34>)
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008446:	4b0b      	ldr	r3, [pc, #44]	@ (8008474 <vPortSetupTimerInterrupt+0x38>)
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800844c:	4b0a      	ldr	r3, [pc, #40]	@ (8008478 <vPortSetupTimerInterrupt+0x3c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a0a      	ldr	r2, [pc, #40]	@ (800847c <vPortSetupTimerInterrupt+0x40>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	099b      	lsrs	r3, r3, #6
 8008458:	4a09      	ldr	r2, [pc, #36]	@ (8008480 <vPortSetupTimerInterrupt+0x44>)
 800845a:	3b01      	subs	r3, #1
 800845c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800845e:	4b04      	ldr	r3, [pc, #16]	@ (8008470 <vPortSetupTimerInterrupt+0x34>)
 8008460:	2207      	movs	r2, #7
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000e010 	.word	0xe000e010
 8008474:	e000e018 	.word	0xe000e018
 8008478:	20000000 	.word	0x20000000
 800847c:	10624dd3 	.word	0x10624dd3
 8008480:	e000e014 	.word	0xe000e014

08008484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008494 <vPortEnableVFP+0x10>
 8008488:	6801      	ldr	r1, [r0, #0]
 800848a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800848e:	6001      	str	r1, [r0, #0]
 8008490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008492:	bf00      	nop
 8008494:	e000ed88 	.word	0xe000ed88

08008498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	@ 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084a4:	f7ff fac0 	bl	8007a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008614 <pvPortMalloc+0x17c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084b0:	f000 f916 	bl	80086e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084b4:	4b58      	ldr	r3, [pc, #352]	@ (8008618 <pvPortMalloc+0x180>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 8090 	bne.w	80085e2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01e      	beq.n	8008506 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084c8:	2208      	movs	r2, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d015      	beq.n	8008506 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f023 0307 	bic.w	r3, r3, #7
 80084e0:	3308      	adds	r3, #8
 80084e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <pvPortMalloc+0x6e>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d06a      	beq.n	80085e2 <pvPortMalloc+0x14a>
 800850c:	4b43      	ldr	r3, [pc, #268]	@ (800861c <pvPortMalloc+0x184>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d865      	bhi.n	80085e2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008516:	4b42      	ldr	r3, [pc, #264]	@ (8008620 <pvPortMalloc+0x188>)
 8008518:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800851a:	4b41      	ldr	r3, [pc, #260]	@ (8008620 <pvPortMalloc+0x188>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008520:	e004      	b.n	800852c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	d903      	bls.n	800853e <pvPortMalloc+0xa6>
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f1      	bne.n	8008522 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800853e:	4b35      	ldr	r3, [pc, #212]	@ (8008614 <pvPortMalloc+0x17c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008544:	429a      	cmp	r2, r3
 8008546:	d04c      	beq.n	80085e2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2208      	movs	r2, #8
 800854e:	4413      	add	r3, r2
 8008550:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	2308      	movs	r3, #8
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	429a      	cmp	r2, r3
 8008568:	d920      	bls.n	80085ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800856a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4413      	add	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <pvPortMalloc+0xfc>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	613b      	str	r3, [r7, #16]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	1ad2      	subs	r2, r2, r3
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085a6:	69b8      	ldr	r0, [r7, #24]
 80085a8:	f000 f8fc 	bl	80087a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085ac:	4b1b      	ldr	r3, [pc, #108]	@ (800861c <pvPortMalloc+0x184>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	4a19      	ldr	r2, [pc, #100]	@ (800861c <pvPortMalloc+0x184>)
 80085b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ba:	4b18      	ldr	r3, [pc, #96]	@ (800861c <pvPortMalloc+0x184>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b19      	ldr	r3, [pc, #100]	@ (8008624 <pvPortMalloc+0x18c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d203      	bcs.n	80085ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085c6:	4b15      	ldr	r3, [pc, #84]	@ (800861c <pvPortMalloc+0x184>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a16      	ldr	r2, [pc, #88]	@ (8008624 <pvPortMalloc+0x18c>)
 80085cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	4b11      	ldr	r3, [pc, #68]	@ (8008618 <pvPortMalloc+0x180>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085e2:	f7ff fa2f 	bl	8007a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <pvPortMalloc+0x170>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <pvPortMalloc+0x16c>
	return pvReturn;
 8008608:	69fb      	ldr	r3, [r7, #28]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	@ 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	2000264c 	.word	0x2000264c
 8008618:	20002658 	.word	0x20002658
 800861c:	20002650 	.word	0x20002650
 8008620:	20002644 	.word	0x20002644
 8008624:	20002654 	.word	0x20002654

08008628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d04a      	beq.n	80086d0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800863a:	2308      	movs	r3, #8
 800863c:	425b      	negs	r3, r3
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4413      	add	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	4b22      	ldr	r3, [pc, #136]	@ (80086d8 <vPortFree+0xb0>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4013      	ands	r3, r2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <vPortFree+0x46>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60fb      	str	r3, [r7, #12]
}
 8008668:	bf00      	nop
 800866a:	bf00      	nop
 800866c:	e7fd      	b.n	800866a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <vPortFree+0x66>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60bb      	str	r3, [r7, #8]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	4b11      	ldr	r3, [pc, #68]	@ (80086d8 <vPortFree+0xb0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4013      	ands	r3, r2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d019      	beq.n	80086d0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d115      	bne.n	80086d0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <vPortFree+0xb0>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	401a      	ands	r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086b4:	f7ff f9b8 	bl	8007a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <vPortFree+0xb4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	4a06      	ldr	r2, [pc, #24]	@ (80086dc <vPortFree+0xb4>)
 80086c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086c6:	6938      	ldr	r0, [r7, #16]
 80086c8:	f000 f86c 	bl	80087a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80086cc:	f7ff f9ba 	bl	8007a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086d0:	bf00      	nop
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20002658 	.word	0x20002658
 80086dc:	20002650 	.word	0x20002650

080086e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086e6:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 80086ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086ec:	4b27      	ldr	r3, [pc, #156]	@ (800878c <prvHeapInit+0xac>)
 80086ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00c      	beq.n	8008714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3307      	adds	r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0307 	bic.w	r3, r3, #7
 8008706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	4a1f      	ldr	r2, [pc, #124]	@ (800878c <prvHeapInit+0xac>)
 8008710:	4413      	add	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008718:	4a1d      	ldr	r2, [pc, #116]	@ (8008790 <prvHeapInit+0xb0>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800871e:	4b1c      	ldr	r3, [pc, #112]	@ (8008790 <prvHeapInit+0xb0>)
 8008720:	2200      	movs	r2, #0
 8008722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4413      	add	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800872c:	2208      	movs	r2, #8
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4a15      	ldr	r2, [pc, #84]	@ (8008794 <prvHeapInit+0xb4>)
 8008740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008742:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <prvHeapInit+0xb4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2200      	movs	r2, #0
 8008748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <prvHeapInit+0xb4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <prvHeapInit+0xb4>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a0a      	ldr	r2, [pc, #40]	@ (8008798 <prvHeapInit+0xb8>)
 800876e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4a09      	ldr	r2, [pc, #36]	@ (800879c <prvHeapInit+0xbc>)
 8008776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008778:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <prvHeapInit+0xc0>)
 800877a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800877e:	601a      	str	r2, [r3, #0]
}
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000e8c 	.word	0x20000e8c
 8008790:	20002644 	.word	0x20002644
 8008794:	2000264c 	.word	0x2000264c
 8008798:	20002654 	.word	0x20002654
 800879c:	20002650 	.word	0x20002650
 80087a0:	20002658 	.word	0x20002658

080087a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087ac:	4b28      	ldr	r3, [pc, #160]	@ (8008850 <prvInsertBlockIntoFreeList+0xac>)
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e002      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x14>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d8f7      	bhi.n	80087b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	4413      	add	r3, r2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d108      	bne.n	80087e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	441a      	add	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d118      	bne.n	800882c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <prvInsertBlockIntoFreeList+0xb0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d00d      	beq.n	8008822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e008      	b.n	8008834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008822:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e003      	b.n	8008834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d002      	beq.n	8008842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20002644 	.word	0x20002644
 8008854:	2000264c 	.word	0x2000264c

08008858 <calloc>:
 8008858:	4b02      	ldr	r3, [pc, #8]	@ (8008864 <calloc+0xc>)
 800885a:	460a      	mov	r2, r1
 800885c:	4601      	mov	r1, r0
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	f000 b802 	b.w	8008868 <_calloc_r>
 8008864:	20000010 	.word	0x20000010

08008868 <_calloc_r>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	fba1 5402 	umull	r5, r4, r1, r2
 800886e:	b93c      	cbnz	r4, 8008880 <_calloc_r+0x18>
 8008870:	4629      	mov	r1, r5
 8008872:	f000 f837 	bl	80088e4 <_malloc_r>
 8008876:	4606      	mov	r6, r0
 8008878:	b928      	cbnz	r0, 8008886 <_calloc_r+0x1e>
 800887a:	2600      	movs	r6, #0
 800887c:	4630      	mov	r0, r6
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	220c      	movs	r2, #12
 8008882:	6002      	str	r2, [r0, #0]
 8008884:	e7f9      	b.n	800887a <_calloc_r+0x12>
 8008886:	462a      	mov	r2, r5
 8008888:	4621      	mov	r1, r4
 800888a:	f000 f957 	bl	8008b3c <memset>
 800888e:	e7f5      	b.n	800887c <_calloc_r+0x14>

08008890 <free>:
 8008890:	4b02      	ldr	r3, [pc, #8]	@ (800889c <free+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f000 ba0b 	b.w	8008cb0 <_free_r>
 800889a:	bf00      	nop
 800889c:	20000010 	.word	0x20000010

080088a0 <sbrk_aligned>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	4e0f      	ldr	r6, [pc, #60]	@ (80088e0 <sbrk_aligned+0x40>)
 80088a4:	460c      	mov	r4, r1
 80088a6:	6831      	ldr	r1, [r6, #0]
 80088a8:	4605      	mov	r5, r0
 80088aa:	b911      	cbnz	r1, 80088b2 <sbrk_aligned+0x12>
 80088ac:	f000 f9b6 	bl	8008c1c <_sbrk_r>
 80088b0:	6030      	str	r0, [r6, #0]
 80088b2:	4621      	mov	r1, r4
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 f9b1 	bl	8008c1c <_sbrk_r>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	d103      	bne.n	80088c6 <sbrk_aligned+0x26>
 80088be:	f04f 34ff 	mov.w	r4, #4294967295
 80088c2:	4620      	mov	r0, r4
 80088c4:	bd70      	pop	{r4, r5, r6, pc}
 80088c6:	1cc4      	adds	r4, r0, #3
 80088c8:	f024 0403 	bic.w	r4, r4, #3
 80088cc:	42a0      	cmp	r0, r4
 80088ce:	d0f8      	beq.n	80088c2 <sbrk_aligned+0x22>
 80088d0:	1a21      	subs	r1, r4, r0
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f9a2 	bl	8008c1c <_sbrk_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	d1f2      	bne.n	80088c2 <sbrk_aligned+0x22>
 80088dc:	e7ef      	b.n	80088be <sbrk_aligned+0x1e>
 80088de:	bf00      	nop
 80088e0:	2000265c 	.word	0x2000265c

080088e4 <_malloc_r>:
 80088e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e8:	1ccd      	adds	r5, r1, #3
 80088ea:	f025 0503 	bic.w	r5, r5, #3
 80088ee:	3508      	adds	r5, #8
 80088f0:	2d0c      	cmp	r5, #12
 80088f2:	bf38      	it	cc
 80088f4:	250c      	movcc	r5, #12
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	4606      	mov	r6, r0
 80088fa:	db01      	blt.n	8008900 <_malloc_r+0x1c>
 80088fc:	42a9      	cmp	r1, r5
 80088fe:	d904      	bls.n	800890a <_malloc_r+0x26>
 8008900:	230c      	movs	r3, #12
 8008902:	6033      	str	r3, [r6, #0]
 8008904:	2000      	movs	r0, #0
 8008906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089e0 <_malloc_r+0xfc>
 800890e:	f000 f869 	bl	80089e4 <__malloc_lock>
 8008912:	f8d8 3000 	ldr.w	r3, [r8]
 8008916:	461c      	mov	r4, r3
 8008918:	bb44      	cbnz	r4, 800896c <_malloc_r+0x88>
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff ffbf 	bl	80088a0 <sbrk_aligned>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	4604      	mov	r4, r0
 8008926:	d158      	bne.n	80089da <_malloc_r+0xf6>
 8008928:	f8d8 4000 	ldr.w	r4, [r8]
 800892c:	4627      	mov	r7, r4
 800892e:	2f00      	cmp	r7, #0
 8008930:	d143      	bne.n	80089ba <_malloc_r+0xd6>
 8008932:	2c00      	cmp	r4, #0
 8008934:	d04b      	beq.n	80089ce <_malloc_r+0xea>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	4639      	mov	r1, r7
 800893a:	4630      	mov	r0, r6
 800893c:	eb04 0903 	add.w	r9, r4, r3
 8008940:	f000 f96c 	bl	8008c1c <_sbrk_r>
 8008944:	4581      	cmp	r9, r0
 8008946:	d142      	bne.n	80089ce <_malloc_r+0xea>
 8008948:	6821      	ldr	r1, [r4, #0]
 800894a:	1a6d      	subs	r5, r5, r1
 800894c:	4629      	mov	r1, r5
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff ffa6 	bl	80088a0 <sbrk_aligned>
 8008954:	3001      	adds	r0, #1
 8008956:	d03a      	beq.n	80089ce <_malloc_r+0xea>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	442b      	add	r3, r5
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	f8d8 3000 	ldr.w	r3, [r8]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	bb62      	cbnz	r2, 80089c0 <_malloc_r+0xdc>
 8008966:	f8c8 7000 	str.w	r7, [r8]
 800896a:	e00f      	b.n	800898c <_malloc_r+0xa8>
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	1b52      	subs	r2, r2, r5
 8008970:	d420      	bmi.n	80089b4 <_malloc_r+0xd0>
 8008972:	2a0b      	cmp	r2, #11
 8008974:	d917      	bls.n	80089a6 <_malloc_r+0xc2>
 8008976:	1961      	adds	r1, r4, r5
 8008978:	42a3      	cmp	r3, r4
 800897a:	6025      	str	r5, [r4, #0]
 800897c:	bf18      	it	ne
 800897e:	6059      	strne	r1, [r3, #4]
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	bf08      	it	eq
 8008984:	f8c8 1000 	streq.w	r1, [r8]
 8008988:	5162      	str	r2, [r4, r5]
 800898a:	604b      	str	r3, [r1, #4]
 800898c:	4630      	mov	r0, r6
 800898e:	f000 f82f 	bl	80089f0 <__malloc_unlock>
 8008992:	f104 000b 	add.w	r0, r4, #11
 8008996:	1d23      	adds	r3, r4, #4
 8008998:	f020 0007 	bic.w	r0, r0, #7
 800899c:	1ac2      	subs	r2, r0, r3
 800899e:	bf1c      	itt	ne
 80089a0:	1a1b      	subne	r3, r3, r0
 80089a2:	50a3      	strne	r3, [r4, r2]
 80089a4:	e7af      	b.n	8008906 <_malloc_r+0x22>
 80089a6:	6862      	ldr	r2, [r4, #4]
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	bf0c      	ite	eq
 80089ac:	f8c8 2000 	streq.w	r2, [r8]
 80089b0:	605a      	strne	r2, [r3, #4]
 80089b2:	e7eb      	b.n	800898c <_malloc_r+0xa8>
 80089b4:	4623      	mov	r3, r4
 80089b6:	6864      	ldr	r4, [r4, #4]
 80089b8:	e7ae      	b.n	8008918 <_malloc_r+0x34>
 80089ba:	463c      	mov	r4, r7
 80089bc:	687f      	ldr	r7, [r7, #4]
 80089be:	e7b6      	b.n	800892e <_malloc_r+0x4a>
 80089c0:	461a      	mov	r2, r3
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	42a3      	cmp	r3, r4
 80089c6:	d1fb      	bne.n	80089c0 <_malloc_r+0xdc>
 80089c8:	2300      	movs	r3, #0
 80089ca:	6053      	str	r3, [r2, #4]
 80089cc:	e7de      	b.n	800898c <_malloc_r+0xa8>
 80089ce:	230c      	movs	r3, #12
 80089d0:	6033      	str	r3, [r6, #0]
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 f80c 	bl	80089f0 <__malloc_unlock>
 80089d8:	e794      	b.n	8008904 <_malloc_r+0x20>
 80089da:	6005      	str	r5, [r0, #0]
 80089dc:	e7d6      	b.n	800898c <_malloc_r+0xa8>
 80089de:	bf00      	nop
 80089e0:	20002660 	.word	0x20002660

080089e4 <__malloc_lock>:
 80089e4:	4801      	ldr	r0, [pc, #4]	@ (80089ec <__malloc_lock+0x8>)
 80089e6:	f000 b953 	b.w	8008c90 <__retarget_lock_acquire_recursive>
 80089ea:	bf00      	nop
 80089ec:	200027a0 	.word	0x200027a0

080089f0 <__malloc_unlock>:
 80089f0:	4801      	ldr	r0, [pc, #4]	@ (80089f8 <__malloc_unlock+0x8>)
 80089f2:	f000 b94e 	b.w	8008c92 <__retarget_lock_release_recursive>
 80089f6:	bf00      	nop
 80089f8:	200027a0 	.word	0x200027a0

080089fc <siprintf>:
 80089fc:	b40e      	push	{r1, r2, r3}
 80089fe:	b500      	push	{lr}
 8008a00:	b09c      	sub	sp, #112	@ 0x70
 8008a02:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	9006      	str	r0, [sp, #24]
 8008a08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a0c:	4809      	ldr	r0, [pc, #36]	@ (8008a34 <siprintf+0x38>)
 8008a0e:	9107      	str	r1, [sp, #28]
 8008a10:	9104      	str	r1, [sp, #16]
 8008a12:	4909      	ldr	r1, [pc, #36]	@ (8008a38 <siprintf+0x3c>)
 8008a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a18:	9105      	str	r1, [sp, #20]
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	a902      	add	r1, sp, #8
 8008a20:	f000 f9ec 	bl	8008dfc <_svfiprintf_r>
 8008a24:	9b02      	ldr	r3, [sp, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	b01c      	add	sp, #112	@ 0x70
 8008a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a30:	b003      	add	sp, #12
 8008a32:	4770      	bx	lr
 8008a34:	20000010 	.word	0x20000010
 8008a38:	ffff0208 	.word	0xffff0208

08008a3c <siscanf>:
 8008a3c:	b40e      	push	{r1, r2, r3}
 8008a3e:	b530      	push	{r4, r5, lr}
 8008a40:	b09c      	sub	sp, #112	@ 0x70
 8008a42:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008a44:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008a48:	f854 5b04 	ldr.w	r5, [r4], #4
 8008a4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008a50:	9002      	str	r0, [sp, #8]
 8008a52:	9006      	str	r0, [sp, #24]
 8008a54:	f7f7 fbbc 	bl	80001d0 <strlen>
 8008a58:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <siscanf+0x4c>)
 8008a5a:	9003      	str	r0, [sp, #12]
 8008a5c:	9007      	str	r0, [sp, #28]
 8008a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a60:	480a      	ldr	r0, [pc, #40]	@ (8008a8c <siscanf+0x50>)
 8008a62:	9401      	str	r4, [sp, #4]
 8008a64:	2300      	movs	r3, #0
 8008a66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a68:	9314      	str	r3, [sp, #80]	@ 0x50
 8008a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a72:	462a      	mov	r2, r5
 8008a74:	4623      	mov	r3, r4
 8008a76:	a902      	add	r1, sp, #8
 8008a78:	6800      	ldr	r0, [r0, #0]
 8008a7a:	f000 fb13 	bl	80090a4 <__ssvfiscanf_r>
 8008a7e:	b01c      	add	sp, #112	@ 0x70
 8008a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a84:	b003      	add	sp, #12
 8008a86:	4770      	bx	lr
 8008a88:	08008a91 	.word	0x08008a91
 8008a8c:	20000010 	.word	0x20000010

08008a90 <__seofread>:
 8008a90:	2000      	movs	r0, #0
 8008a92:	4770      	bx	lr

08008a94 <_vsniprintf_r>:
 8008a94:	b530      	push	{r4, r5, lr}
 8008a96:	4614      	mov	r4, r2
 8008a98:	2c00      	cmp	r4, #0
 8008a9a:	b09b      	sub	sp, #108	@ 0x6c
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	da05      	bge.n	8008aae <_vsniprintf_r+0x1a>
 8008aa2:	238b      	movs	r3, #139	@ 0x8b
 8008aa4:	6003      	str	r3, [r0, #0]
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aaa:	b01b      	add	sp, #108	@ 0x6c
 8008aac:	bd30      	pop	{r4, r5, pc}
 8008aae:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ab6:	bf14      	ite	ne
 8008ab8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008abc:	4623      	moveq	r3, r4
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	9305      	str	r3, [sp, #20]
 8008ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ac6:	9100      	str	r1, [sp, #0]
 8008ac8:	9104      	str	r1, [sp, #16]
 8008aca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008ace:	4669      	mov	r1, sp
 8008ad0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008ad2:	f000 f993 	bl	8008dfc <_svfiprintf_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	bfbc      	itt	lt
 8008ada:	238b      	movlt	r3, #139	@ 0x8b
 8008adc:	602b      	strlt	r3, [r5, #0]
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d0e3      	beq.n	8008aaa <_vsniprintf_r+0x16>
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	e7df      	b.n	8008aaa <_vsniprintf_r+0x16>
	...

08008aec <vsniprintf>:
 8008aec:	b507      	push	{r0, r1, r2, lr}
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	4613      	mov	r3, r2
 8008af2:	460a      	mov	r2, r1
 8008af4:	4601      	mov	r1, r0
 8008af6:	4803      	ldr	r0, [pc, #12]	@ (8008b04 <vsniprintf+0x18>)
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	f7ff ffcb 	bl	8008a94 <_vsniprintf_r>
 8008afe:	b003      	add	sp, #12
 8008b00:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b04:	20000010 	.word	0x20000010

08008b08 <memmove>:
 8008b08:	4288      	cmp	r0, r1
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	eb01 0402 	add.w	r4, r1, r2
 8008b10:	d902      	bls.n	8008b18 <memmove+0x10>
 8008b12:	4284      	cmp	r4, r0
 8008b14:	4623      	mov	r3, r4
 8008b16:	d807      	bhi.n	8008b28 <memmove+0x20>
 8008b18:	1e43      	subs	r3, r0, #1
 8008b1a:	42a1      	cmp	r1, r4
 8008b1c:	d008      	beq.n	8008b30 <memmove+0x28>
 8008b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b26:	e7f8      	b.n	8008b1a <memmove+0x12>
 8008b28:	4402      	add	r2, r0
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	428a      	cmp	r2, r1
 8008b2e:	d100      	bne.n	8008b32 <memmove+0x2a>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b3a:	e7f7      	b.n	8008b2c <memmove+0x24>

08008b3c <memset>:
 8008b3c:	4402      	add	r2, r0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d100      	bne.n	8008b46 <memset+0xa>
 8008b44:	4770      	bx	lr
 8008b46:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4a:	e7f9      	b.n	8008b40 <memset+0x4>

08008b4c <strncmp>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	b16a      	cbz	r2, 8008b6c <strncmp+0x20>
 8008b50:	3901      	subs	r1, #1
 8008b52:	1884      	adds	r4, r0, r2
 8008b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d103      	bne.n	8008b68 <strncmp+0x1c>
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d001      	beq.n	8008b68 <strncmp+0x1c>
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	d1f5      	bne.n	8008b54 <strncmp+0x8>
 8008b68:	1ad0      	subs	r0, r2, r3
 8008b6a:	bd10      	pop	{r4, pc}
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	e7fc      	b.n	8008b6a <strncmp+0x1e>

08008b70 <_reclaim_reent>:
 8008b70:	4b29      	ldr	r3, [pc, #164]	@ (8008c18 <_reclaim_reent+0xa8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4283      	cmp	r3, r0
 8008b76:	b570      	push	{r4, r5, r6, lr}
 8008b78:	4604      	mov	r4, r0
 8008b7a:	d04b      	beq.n	8008c14 <_reclaim_reent+0xa4>
 8008b7c:	69c3      	ldr	r3, [r0, #28]
 8008b7e:	b1ab      	cbz	r3, 8008bac <_reclaim_reent+0x3c>
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	b16b      	cbz	r3, 8008ba0 <_reclaim_reent+0x30>
 8008b84:	2500      	movs	r5, #0
 8008b86:	69e3      	ldr	r3, [r4, #28]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	5959      	ldr	r1, [r3, r5]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	d13b      	bne.n	8008c08 <_reclaim_reent+0x98>
 8008b90:	3504      	adds	r5, #4
 8008b92:	2d80      	cmp	r5, #128	@ 0x80
 8008b94:	d1f7      	bne.n	8008b86 <_reclaim_reent+0x16>
 8008b96:	69e3      	ldr	r3, [r4, #28]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	68d9      	ldr	r1, [r3, #12]
 8008b9c:	f000 f888 	bl	8008cb0 <_free_r>
 8008ba0:	69e3      	ldr	r3, [r4, #28]
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	b111      	cbz	r1, 8008bac <_reclaim_reent+0x3c>
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 f882 	bl	8008cb0 <_free_r>
 8008bac:	6961      	ldr	r1, [r4, #20]
 8008bae:	b111      	cbz	r1, 8008bb6 <_reclaim_reent+0x46>
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f87d 	bl	8008cb0 <_free_r>
 8008bb6:	69e1      	ldr	r1, [r4, #28]
 8008bb8:	b111      	cbz	r1, 8008bc0 <_reclaim_reent+0x50>
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 f878 	bl	8008cb0 <_free_r>
 8008bc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008bc2:	b111      	cbz	r1, 8008bca <_reclaim_reent+0x5a>
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 f873 	bl	8008cb0 <_free_r>
 8008bca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bcc:	b111      	cbz	r1, 8008bd4 <_reclaim_reent+0x64>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 f86e 	bl	8008cb0 <_free_r>
 8008bd4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008bd6:	b111      	cbz	r1, 8008bde <_reclaim_reent+0x6e>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 f869 	bl	8008cb0 <_free_r>
 8008bde:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008be0:	b111      	cbz	r1, 8008be8 <_reclaim_reent+0x78>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f864 	bl	8008cb0 <_free_r>
 8008be8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008bea:	b111      	cbz	r1, 8008bf2 <_reclaim_reent+0x82>
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 f85f 	bl	8008cb0 <_free_r>
 8008bf2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008bf4:	b111      	cbz	r1, 8008bfc <_reclaim_reent+0x8c>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f85a 	bl	8008cb0 <_free_r>
 8008bfc:	6a23      	ldr	r3, [r4, #32]
 8008bfe:	b14b      	cbz	r3, 8008c14 <_reclaim_reent+0xa4>
 8008c00:	4620      	mov	r0, r4
 8008c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c06:	4718      	bx	r3
 8008c08:	680e      	ldr	r6, [r1, #0]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f850 	bl	8008cb0 <_free_r>
 8008c10:	4631      	mov	r1, r6
 8008c12:	e7bb      	b.n	8008b8c <_reclaim_reent+0x1c>
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	bf00      	nop
 8008c18:	20000010 	.word	0x20000010

08008c1c <_sbrk_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d06      	ldr	r5, [pc, #24]	@ (8008c38 <_sbrk_r+0x1c>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f8 fc5e 	bl	80014e8 <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_sbrk_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_sbrk_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	2000279c 	.word	0x2000279c

08008c3c <__errno>:
 8008c3c:	4b01      	ldr	r3, [pc, #4]	@ (8008c44 <__errno+0x8>)
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20000010 	.word	0x20000010

08008c48 <__libc_init_array>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008c80 <__libc_init_array+0x38>)
 8008c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008c84 <__libc_init_array+0x3c>)
 8008c4e:	1b64      	subs	r4, r4, r5
 8008c50:	10a4      	asrs	r4, r4, #2
 8008c52:	2600      	movs	r6, #0
 8008c54:	42a6      	cmp	r6, r4
 8008c56:	d109      	bne.n	8008c6c <__libc_init_array+0x24>
 8008c58:	4d0b      	ldr	r5, [pc, #44]	@ (8008c88 <__libc_init_array+0x40>)
 8008c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008c8c <__libc_init_array+0x44>)
 8008c5c:	f001 f808 	bl	8009c70 <_init>
 8008c60:	1b64      	subs	r4, r4, r5
 8008c62:	10a4      	asrs	r4, r4, #2
 8008c64:	2600      	movs	r6, #0
 8008c66:	42a6      	cmp	r6, r4
 8008c68:	d105      	bne.n	8008c76 <__libc_init_array+0x2e>
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c70:	4798      	blx	r3
 8008c72:	3601      	adds	r6, #1
 8008c74:	e7ee      	b.n	8008c54 <__libc_init_array+0xc>
 8008c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7a:	4798      	blx	r3
 8008c7c:	3601      	adds	r6, #1
 8008c7e:	e7f2      	b.n	8008c66 <__libc_init_array+0x1e>
 8008c80:	0800a808 	.word	0x0800a808
 8008c84:	0800a808 	.word	0x0800a808
 8008c88:	0800a808 	.word	0x0800a808
 8008c8c:	0800a80c 	.word	0x0800a80c

08008c90 <__retarget_lock_acquire_recursive>:
 8008c90:	4770      	bx	lr

08008c92 <__retarget_lock_release_recursive>:
 8008c92:	4770      	bx	lr

08008c94 <memcpy>:
 8008c94:	440a      	add	r2, r1
 8008c96:	4291      	cmp	r1, r2
 8008c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c9c:	d100      	bne.n	8008ca0 <memcpy+0xc>
 8008c9e:	4770      	bx	lr
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008caa:	4291      	cmp	r1, r2
 8008cac:	d1f9      	bne.n	8008ca2 <memcpy+0xe>
 8008cae:	bd10      	pop	{r4, pc}

08008cb0 <_free_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d041      	beq.n	8008d3c <_free_r+0x8c>
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f0c      	subs	r4, r1, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfb8      	it	lt
 8008cc2:	18e4      	addlt	r4, r4, r3
 8008cc4:	f7ff fe8e 	bl	80089e4 <__malloc_lock>
 8008cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d40 <_free_r+0x90>)
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	b933      	cbnz	r3, 8008cdc <_free_r+0x2c>
 8008cce:	6063      	str	r3, [r4, #4]
 8008cd0:	6014      	str	r4, [r2, #0]
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd8:	f7ff be8a 	b.w	80089f0 <__malloc_unlock>
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	d908      	bls.n	8008cf2 <_free_r+0x42>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	1821      	adds	r1, r4, r0
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	bf01      	itttt	eq
 8008ce8:	6819      	ldreq	r1, [r3, #0]
 8008cea:	685b      	ldreq	r3, [r3, #4]
 8008cec:	1809      	addeq	r1, r1, r0
 8008cee:	6021      	streq	r1, [r4, #0]
 8008cf0:	e7ed      	b.n	8008cce <_free_r+0x1e>
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b10b      	cbz	r3, 8008cfc <_free_r+0x4c>
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d9fa      	bls.n	8008cf2 <_free_r+0x42>
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	1850      	adds	r0, r2, r1
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d10b      	bne.n	8008d1c <_free_r+0x6c>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	4401      	add	r1, r0
 8008d08:	1850      	adds	r0, r2, r1
 8008d0a:	4283      	cmp	r3, r0
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	d1e0      	bne.n	8008cd2 <_free_r+0x22>
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	6053      	str	r3, [r2, #4]
 8008d16:	4408      	add	r0, r1
 8008d18:	6010      	str	r0, [r2, #0]
 8008d1a:	e7da      	b.n	8008cd2 <_free_r+0x22>
 8008d1c:	d902      	bls.n	8008d24 <_free_r+0x74>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	e7d6      	b.n	8008cd2 <_free_r+0x22>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	1821      	adds	r1, r4, r0
 8008d28:	428b      	cmp	r3, r1
 8008d2a:	bf04      	itt	eq
 8008d2c:	6819      	ldreq	r1, [r3, #0]
 8008d2e:	685b      	ldreq	r3, [r3, #4]
 8008d30:	6063      	str	r3, [r4, #4]
 8008d32:	bf04      	itt	eq
 8008d34:	1809      	addeq	r1, r1, r0
 8008d36:	6021      	streq	r1, [r4, #0]
 8008d38:	6054      	str	r4, [r2, #4]
 8008d3a:	e7ca      	b.n	8008cd2 <_free_r+0x22>
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	20002660 	.word	0x20002660

08008d44 <__ssputs_r>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	688e      	ldr	r6, [r1, #8]
 8008d4a:	461f      	mov	r7, r3
 8008d4c:	42be      	cmp	r6, r7
 8008d4e:	680b      	ldr	r3, [r1, #0]
 8008d50:	4682      	mov	sl, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	4690      	mov	r8, r2
 8008d56:	d82d      	bhi.n	8008db4 <__ssputs_r+0x70>
 8008d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d60:	d026      	beq.n	8008db0 <__ssputs_r+0x6c>
 8008d62:	6965      	ldr	r5, [r4, #20]
 8008d64:	6909      	ldr	r1, [r1, #16]
 8008d66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d6a:	eba3 0901 	sub.w	r9, r3, r1
 8008d6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d72:	1c7b      	adds	r3, r7, #1
 8008d74:	444b      	add	r3, r9
 8008d76:	106d      	asrs	r5, r5, #1
 8008d78:	429d      	cmp	r5, r3
 8008d7a:	bf38      	it	cc
 8008d7c:	461d      	movcc	r5, r3
 8008d7e:	0553      	lsls	r3, r2, #21
 8008d80:	d527      	bpl.n	8008dd2 <__ssputs_r+0x8e>
 8008d82:	4629      	mov	r1, r5
 8008d84:	f7ff fdae 	bl	80088e4 <_malloc_r>
 8008d88:	4606      	mov	r6, r0
 8008d8a:	b360      	cbz	r0, 8008de6 <__ssputs_r+0xa2>
 8008d8c:	6921      	ldr	r1, [r4, #16]
 8008d8e:	464a      	mov	r2, r9
 8008d90:	f7ff ff80 	bl	8008c94 <memcpy>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	6126      	str	r6, [r4, #16]
 8008da2:	6165      	str	r5, [r4, #20]
 8008da4:	444e      	add	r6, r9
 8008da6:	eba5 0509 	sub.w	r5, r5, r9
 8008daa:	6026      	str	r6, [r4, #0]
 8008dac:	60a5      	str	r5, [r4, #8]
 8008dae:	463e      	mov	r6, r7
 8008db0:	42be      	cmp	r6, r7
 8008db2:	d900      	bls.n	8008db6 <__ssputs_r+0x72>
 8008db4:	463e      	mov	r6, r7
 8008db6:	6820      	ldr	r0, [r4, #0]
 8008db8:	4632      	mov	r2, r6
 8008dba:	4641      	mov	r1, r8
 8008dbc:	f7ff fea4 	bl	8008b08 <memmove>
 8008dc0:	68a3      	ldr	r3, [r4, #8]
 8008dc2:	1b9b      	subs	r3, r3, r6
 8008dc4:	60a3      	str	r3, [r4, #8]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	4433      	add	r3, r6
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	f000 fe29 	bl	8009a2a <_realloc_r>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d1e0      	bne.n	8008da0 <__ssputs_r+0x5c>
 8008dde:	6921      	ldr	r1, [r4, #16]
 8008de0:	4650      	mov	r0, sl
 8008de2:	f7ff ff65 	bl	8008cb0 <_free_r>
 8008de6:	230c      	movs	r3, #12
 8008de8:	f8ca 3000 	str.w	r3, [sl]
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e7e9      	b.n	8008dce <__ssputs_r+0x8a>
	...

08008dfc <_svfiprintf_r>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	4698      	mov	r8, r3
 8008e02:	898b      	ldrh	r3, [r1, #12]
 8008e04:	061b      	lsls	r3, r3, #24
 8008e06:	b09d      	sub	sp, #116	@ 0x74
 8008e08:	4607      	mov	r7, r0
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	d510      	bpl.n	8008e32 <_svfiprintf_r+0x36>
 8008e10:	690b      	ldr	r3, [r1, #16]
 8008e12:	b973      	cbnz	r3, 8008e32 <_svfiprintf_r+0x36>
 8008e14:	2140      	movs	r1, #64	@ 0x40
 8008e16:	f7ff fd65 	bl	80088e4 <_malloc_r>
 8008e1a:	6028      	str	r0, [r5, #0]
 8008e1c:	6128      	str	r0, [r5, #16]
 8008e1e:	b930      	cbnz	r0, 8008e2e <_svfiprintf_r+0x32>
 8008e20:	230c      	movs	r3, #12
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	b01d      	add	sp, #116	@ 0x74
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	2340      	movs	r3, #64	@ 0x40
 8008e30:	616b      	str	r3, [r5, #20]
 8008e32:	2300      	movs	r3, #0
 8008e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e36:	2320      	movs	r3, #32
 8008e38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e40:	2330      	movs	r3, #48	@ 0x30
 8008e42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008fe0 <_svfiprintf_r+0x1e4>
 8008e46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e4a:	f04f 0901 	mov.w	r9, #1
 8008e4e:	4623      	mov	r3, r4
 8008e50:	469a      	mov	sl, r3
 8008e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e56:	b10a      	cbz	r2, 8008e5c <_svfiprintf_r+0x60>
 8008e58:	2a25      	cmp	r2, #37	@ 0x25
 8008e5a:	d1f9      	bne.n	8008e50 <_svfiprintf_r+0x54>
 8008e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e60:	d00b      	beq.n	8008e7a <_svfiprintf_r+0x7e>
 8008e62:	465b      	mov	r3, fp
 8008e64:	4622      	mov	r2, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	4638      	mov	r0, r7
 8008e6a:	f7ff ff6b 	bl	8008d44 <__ssputs_r>
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f000 80a7 	beq.w	8008fc2 <_svfiprintf_r+0x1c6>
 8008e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e76:	445a      	add	r2, fp
 8008e78:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 809f 	beq.w	8008fc2 <_svfiprintf_r+0x1c6>
 8008e84:	2300      	movs	r3, #0
 8008e86:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e8e:	f10a 0a01 	add.w	sl, sl, #1
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	9307      	str	r3, [sp, #28]
 8008e96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e9c:	4654      	mov	r4, sl
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea4:	484e      	ldr	r0, [pc, #312]	@ (8008fe0 <_svfiprintf_r+0x1e4>)
 8008ea6:	f7f7 f99b 	bl	80001e0 <memchr>
 8008eaa:	9a04      	ldr	r2, [sp, #16]
 8008eac:	b9d8      	cbnz	r0, 8008ee6 <_svfiprintf_r+0xea>
 8008eae:	06d0      	lsls	r0, r2, #27
 8008eb0:	bf44      	itt	mi
 8008eb2:	2320      	movmi	r3, #32
 8008eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008eb8:	0711      	lsls	r1, r2, #28
 8008eba:	bf44      	itt	mi
 8008ebc:	232b      	movmi	r3, #43	@ 0x2b
 8008ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ec8:	d015      	beq.n	8008ef6 <_svfiprintf_r+0xfa>
 8008eca:	9a07      	ldr	r2, [sp, #28]
 8008ecc:	4654      	mov	r4, sl
 8008ece:	2000      	movs	r0, #0
 8008ed0:	f04f 0c0a 	mov.w	ip, #10
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eda:	3b30      	subs	r3, #48	@ 0x30
 8008edc:	2b09      	cmp	r3, #9
 8008ede:	d94b      	bls.n	8008f78 <_svfiprintf_r+0x17c>
 8008ee0:	b1b0      	cbz	r0, 8008f10 <_svfiprintf_r+0x114>
 8008ee2:	9207      	str	r2, [sp, #28]
 8008ee4:	e014      	b.n	8008f10 <_svfiprintf_r+0x114>
 8008ee6:	eba0 0308 	sub.w	r3, r0, r8
 8008eea:	fa09 f303 	lsl.w	r3, r9, r3
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	46a2      	mov	sl, r4
 8008ef4:	e7d2      	b.n	8008e9c <_svfiprintf_r+0xa0>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	1d19      	adds	r1, r3, #4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	9103      	str	r1, [sp, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	bfbb      	ittet	lt
 8008f02:	425b      	neglt	r3, r3
 8008f04:	f042 0202 	orrlt.w	r2, r2, #2
 8008f08:	9307      	strge	r3, [sp, #28]
 8008f0a:	9307      	strlt	r3, [sp, #28]
 8008f0c:	bfb8      	it	lt
 8008f0e:	9204      	strlt	r2, [sp, #16]
 8008f10:	7823      	ldrb	r3, [r4, #0]
 8008f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f14:	d10a      	bne.n	8008f2c <_svfiprintf_r+0x130>
 8008f16:	7863      	ldrb	r3, [r4, #1]
 8008f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f1a:	d132      	bne.n	8008f82 <_svfiprintf_r+0x186>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	9203      	str	r2, [sp, #12]
 8008f24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f28:	3402      	adds	r4, #2
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ff0 <_svfiprintf_r+0x1f4>
 8008f30:	7821      	ldrb	r1, [r4, #0]
 8008f32:	2203      	movs	r2, #3
 8008f34:	4650      	mov	r0, sl
 8008f36:	f7f7 f953 	bl	80001e0 <memchr>
 8008f3a:	b138      	cbz	r0, 8008f4c <_svfiprintf_r+0x150>
 8008f3c:	9b04      	ldr	r3, [sp, #16]
 8008f3e:	eba0 000a 	sub.w	r0, r0, sl
 8008f42:	2240      	movs	r2, #64	@ 0x40
 8008f44:	4082      	lsls	r2, r0
 8008f46:	4313      	orrs	r3, r2
 8008f48:	3401      	adds	r4, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	4824      	ldr	r0, [pc, #144]	@ (8008fe4 <_svfiprintf_r+0x1e8>)
 8008f52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f56:	2206      	movs	r2, #6
 8008f58:	f7f7 f942 	bl	80001e0 <memchr>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d036      	beq.n	8008fce <_svfiprintf_r+0x1d2>
 8008f60:	4b21      	ldr	r3, [pc, #132]	@ (8008fe8 <_svfiprintf_r+0x1ec>)
 8008f62:	bb1b      	cbnz	r3, 8008fac <_svfiprintf_r+0x1b0>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	3307      	adds	r3, #7
 8008f68:	f023 0307 	bic.w	r3, r3, #7
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f72:	4433      	add	r3, r6
 8008f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f76:	e76a      	b.n	8008e4e <_svfiprintf_r+0x52>
 8008f78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	2001      	movs	r0, #1
 8008f80:	e7a8      	b.n	8008ed4 <_svfiprintf_r+0xd8>
 8008f82:	2300      	movs	r3, #0
 8008f84:	3401      	adds	r4, #1
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f04f 0c0a 	mov.w	ip, #10
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f94:	3a30      	subs	r2, #48	@ 0x30
 8008f96:	2a09      	cmp	r2, #9
 8008f98:	d903      	bls.n	8008fa2 <_svfiprintf_r+0x1a6>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c6      	beq.n	8008f2c <_svfiprintf_r+0x130>
 8008f9e:	9105      	str	r1, [sp, #20]
 8008fa0:	e7c4      	b.n	8008f2c <_svfiprintf_r+0x130>
 8008fa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e7f0      	b.n	8008f8e <_svfiprintf_r+0x192>
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008fec <_svfiprintf_r+0x1f0>)
 8008fb4:	a904      	add	r1, sp, #16
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f3af 8000 	nop.w
 8008fbc:	1c42      	adds	r2, r0, #1
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	d1d6      	bne.n	8008f70 <_svfiprintf_r+0x174>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	065b      	lsls	r3, r3, #25
 8008fc6:	f53f af2d 	bmi.w	8008e24 <_svfiprintf_r+0x28>
 8008fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fcc:	e72c      	b.n	8008e28 <_svfiprintf_r+0x2c>
 8008fce:	ab03      	add	r3, sp, #12
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	462a      	mov	r2, r5
 8008fd4:	4b05      	ldr	r3, [pc, #20]	@ (8008fec <_svfiprintf_r+0x1f0>)
 8008fd6:	a904      	add	r1, sp, #16
 8008fd8:	4638      	mov	r0, r7
 8008fda:	f000 fa45 	bl	8009468 <_printf_i>
 8008fde:	e7ed      	b.n	8008fbc <_svfiprintf_r+0x1c0>
 8008fe0:	0800a6b0 	.word	0x0800a6b0
 8008fe4:	0800a6ba 	.word	0x0800a6ba
 8008fe8:	00000000 	.word	0x00000000
 8008fec:	08008d45 	.word	0x08008d45
 8008ff0:	0800a6b6 	.word	0x0800a6b6

08008ff4 <_sungetc_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	1c4b      	adds	r3, r1, #1
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	d103      	bne.n	8009004 <_sungetc_r+0x10>
 8008ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8009000:	4628      	mov	r0, r5
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	8993      	ldrh	r3, [r2, #12]
 8009006:	f023 0320 	bic.w	r3, r3, #32
 800900a:	8193      	strh	r3, [r2, #12]
 800900c:	6853      	ldr	r3, [r2, #4]
 800900e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009010:	b2cd      	uxtb	r5, r1
 8009012:	b18a      	cbz	r2, 8009038 <_sungetc_r+0x44>
 8009014:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009016:	429a      	cmp	r2, r3
 8009018:	dd08      	ble.n	800902c <_sungetc_r+0x38>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	1e5a      	subs	r2, r3, #1
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009024:	6863      	ldr	r3, [r4, #4]
 8009026:	3301      	adds	r3, #1
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	e7e9      	b.n	8009000 <_sungetc_r+0xc>
 800902c:	4621      	mov	r1, r4
 800902e:	f000 fcc2 	bl	80099b6 <__submore>
 8009032:	2800      	cmp	r0, #0
 8009034:	d0f1      	beq.n	800901a <_sungetc_r+0x26>
 8009036:	e7e1      	b.n	8008ffc <_sungetc_r+0x8>
 8009038:	6921      	ldr	r1, [r4, #16]
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	b141      	cbz	r1, 8009050 <_sungetc_r+0x5c>
 800903e:	4291      	cmp	r1, r2
 8009040:	d206      	bcs.n	8009050 <_sungetc_r+0x5c>
 8009042:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009046:	42a9      	cmp	r1, r5
 8009048:	d102      	bne.n	8009050 <_sungetc_r+0x5c>
 800904a:	3a01      	subs	r2, #1
 800904c:	6022      	str	r2, [r4, #0]
 800904e:	e7ea      	b.n	8009026 <_sungetc_r+0x32>
 8009050:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009058:	6363      	str	r3, [r4, #52]	@ 0x34
 800905a:	2303      	movs	r3, #3
 800905c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800905e:	4623      	mov	r3, r4
 8009060:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	2301      	movs	r3, #1
 8009068:	e7de      	b.n	8009028 <_sungetc_r+0x34>

0800906a <__ssrefill_r>:
 800906a:	b510      	push	{r4, lr}
 800906c:	460c      	mov	r4, r1
 800906e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009070:	b169      	cbz	r1, 800908e <__ssrefill_r+0x24>
 8009072:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009076:	4299      	cmp	r1, r3
 8009078:	d001      	beq.n	800907e <__ssrefill_r+0x14>
 800907a:	f7ff fe19 	bl	8008cb0 <_free_r>
 800907e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	2000      	movs	r0, #0
 8009084:	6360      	str	r0, [r4, #52]	@ 0x34
 8009086:	b113      	cbz	r3, 800908e <__ssrefill_r+0x24>
 8009088:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	bd10      	pop	{r4, pc}
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	2300      	movs	r3, #0
 8009094:	6063      	str	r3, [r4, #4]
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f043 0320 	orr.w	r3, r3, #32
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	e7f3      	b.n	800908c <__ssrefill_r+0x22>

080090a4 <__ssvfiscanf_r>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80090ae:	2100      	movs	r1, #0
 80090b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80090b4:	49a5      	ldr	r1, [pc, #660]	@ (800934c <__ssvfiscanf_r+0x2a8>)
 80090b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80090b8:	f10d 0804 	add.w	r8, sp, #4
 80090bc:	49a4      	ldr	r1, [pc, #656]	@ (8009350 <__ssvfiscanf_r+0x2ac>)
 80090be:	4fa5      	ldr	r7, [pc, #660]	@ (8009354 <__ssvfiscanf_r+0x2b0>)
 80090c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80090c4:	4606      	mov	r6, r0
 80090c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	7813      	ldrb	r3, [r2, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8158 	beq.w	8009382 <__ssvfiscanf_r+0x2de>
 80090d2:	5cf9      	ldrb	r1, [r7, r3]
 80090d4:	f011 0108 	ands.w	r1, r1, #8
 80090d8:	f102 0501 	add.w	r5, r2, #1
 80090dc:	d019      	beq.n	8009112 <__ssvfiscanf_r+0x6e>
 80090de:	6863      	ldr	r3, [r4, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dd0f      	ble.n	8009104 <__ssvfiscanf_r+0x60>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	5cba      	ldrb	r2, [r7, r2]
 80090ea:	0712      	lsls	r2, r2, #28
 80090ec:	d401      	bmi.n	80090f2 <__ssvfiscanf_r+0x4e>
 80090ee:	462a      	mov	r2, r5
 80090f0:	e7eb      	b.n	80090ca <__ssvfiscanf_r+0x26>
 80090f2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80090f4:	3201      	adds	r2, #1
 80090f6:	9245      	str	r2, [sp, #276]	@ 0x114
 80090f8:	6862      	ldr	r2, [r4, #4]
 80090fa:	3301      	adds	r3, #1
 80090fc:	3a01      	subs	r2, #1
 80090fe:	6062      	str	r2, [r4, #4]
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	e7ec      	b.n	80090de <__ssvfiscanf_r+0x3a>
 8009104:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009106:	4621      	mov	r1, r4
 8009108:	4630      	mov	r0, r6
 800910a:	4798      	blx	r3
 800910c:	2800      	cmp	r0, #0
 800910e:	d0e9      	beq.n	80090e4 <__ssvfiscanf_r+0x40>
 8009110:	e7ed      	b.n	80090ee <__ssvfiscanf_r+0x4a>
 8009112:	2b25      	cmp	r3, #37	@ 0x25
 8009114:	d012      	beq.n	800913c <__ssvfiscanf_r+0x98>
 8009116:	4699      	mov	r9, r3
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f340 8093 	ble.w	8009246 <__ssvfiscanf_r+0x1a2>
 8009120:	6822      	ldr	r2, [r4, #0]
 8009122:	7813      	ldrb	r3, [r2, #0]
 8009124:	454b      	cmp	r3, r9
 8009126:	f040 812c 	bne.w	8009382 <__ssvfiscanf_r+0x2de>
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	3b01      	subs	r3, #1
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009132:	3201      	adds	r2, #1
 8009134:	3301      	adds	r3, #1
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	9345      	str	r3, [sp, #276]	@ 0x114
 800913a:	e7d8      	b.n	80090ee <__ssvfiscanf_r+0x4a>
 800913c:	9141      	str	r1, [sp, #260]	@ 0x104
 800913e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009140:	7853      	ldrb	r3, [r2, #1]
 8009142:	2b2a      	cmp	r3, #42	@ 0x2a
 8009144:	bf02      	ittt	eq
 8009146:	2310      	moveq	r3, #16
 8009148:	1c95      	addeq	r5, r2, #2
 800914a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800914c:	220a      	movs	r2, #10
 800914e:	46a9      	mov	r9, r5
 8009150:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009154:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009158:	2b09      	cmp	r3, #9
 800915a:	d91e      	bls.n	800919a <__ssvfiscanf_r+0xf6>
 800915c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009358 <__ssvfiscanf_r+0x2b4>
 8009160:	2203      	movs	r2, #3
 8009162:	4650      	mov	r0, sl
 8009164:	f7f7 f83c 	bl	80001e0 <memchr>
 8009168:	b138      	cbz	r0, 800917a <__ssvfiscanf_r+0xd6>
 800916a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800916c:	eba0 000a 	sub.w	r0, r0, sl
 8009170:	2301      	movs	r3, #1
 8009172:	4083      	lsls	r3, r0
 8009174:	4313      	orrs	r3, r2
 8009176:	9341      	str	r3, [sp, #260]	@ 0x104
 8009178:	464d      	mov	r5, r9
 800917a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800917e:	2b78      	cmp	r3, #120	@ 0x78
 8009180:	d806      	bhi.n	8009190 <__ssvfiscanf_r+0xec>
 8009182:	2b57      	cmp	r3, #87	@ 0x57
 8009184:	d810      	bhi.n	80091a8 <__ssvfiscanf_r+0x104>
 8009186:	2b25      	cmp	r3, #37	@ 0x25
 8009188:	d0c5      	beq.n	8009116 <__ssvfiscanf_r+0x72>
 800918a:	d857      	bhi.n	800923c <__ssvfiscanf_r+0x198>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d065      	beq.n	800925c <__ssvfiscanf_r+0x1b8>
 8009190:	2303      	movs	r3, #3
 8009192:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009194:	230a      	movs	r3, #10
 8009196:	9342      	str	r3, [sp, #264]	@ 0x108
 8009198:	e078      	b.n	800928c <__ssvfiscanf_r+0x1e8>
 800919a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800919c:	fb02 1103 	mla	r1, r2, r3, r1
 80091a0:	3930      	subs	r1, #48	@ 0x30
 80091a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80091a4:	464d      	mov	r5, r9
 80091a6:	e7d2      	b.n	800914e <__ssvfiscanf_r+0xaa>
 80091a8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80091ac:	2a20      	cmp	r2, #32
 80091ae:	d8ef      	bhi.n	8009190 <__ssvfiscanf_r+0xec>
 80091b0:	a101      	add	r1, pc, #4	@ (adr r1, 80091b8 <__ssvfiscanf_r+0x114>)
 80091b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	0800926b 	.word	0x0800926b
 80091bc:	08009191 	.word	0x08009191
 80091c0:	08009191 	.word	0x08009191
 80091c4:	080092c5 	.word	0x080092c5
 80091c8:	08009191 	.word	0x08009191
 80091cc:	08009191 	.word	0x08009191
 80091d0:	08009191 	.word	0x08009191
 80091d4:	08009191 	.word	0x08009191
 80091d8:	08009191 	.word	0x08009191
 80091dc:	08009191 	.word	0x08009191
 80091e0:	08009191 	.word	0x08009191
 80091e4:	080092db 	.word	0x080092db
 80091e8:	080092c1 	.word	0x080092c1
 80091ec:	08009243 	.word	0x08009243
 80091f0:	08009243 	.word	0x08009243
 80091f4:	08009243 	.word	0x08009243
 80091f8:	08009191 	.word	0x08009191
 80091fc:	0800927d 	.word	0x0800927d
 8009200:	08009191 	.word	0x08009191
 8009204:	08009191 	.word	0x08009191
 8009208:	08009191 	.word	0x08009191
 800920c:	08009191 	.word	0x08009191
 8009210:	080092eb 	.word	0x080092eb
 8009214:	08009285 	.word	0x08009285
 8009218:	08009263 	.word	0x08009263
 800921c:	08009191 	.word	0x08009191
 8009220:	08009191 	.word	0x08009191
 8009224:	080092e7 	.word	0x080092e7
 8009228:	08009191 	.word	0x08009191
 800922c:	080092c1 	.word	0x080092c1
 8009230:	08009191 	.word	0x08009191
 8009234:	08009191 	.word	0x08009191
 8009238:	0800926b 	.word	0x0800926b
 800923c:	3b45      	subs	r3, #69	@ 0x45
 800923e:	2b02      	cmp	r3, #2
 8009240:	d8a6      	bhi.n	8009190 <__ssvfiscanf_r+0xec>
 8009242:	2305      	movs	r3, #5
 8009244:	e021      	b.n	800928a <__ssvfiscanf_r+0x1e6>
 8009246:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009248:	4621      	mov	r1, r4
 800924a:	4630      	mov	r0, r6
 800924c:	4798      	blx	r3
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f af66 	beq.w	8009120 <__ssvfiscanf_r+0x7c>
 8009254:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009256:	2800      	cmp	r0, #0
 8009258:	f040 808b 	bne.w	8009372 <__ssvfiscanf_r+0x2ce>
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e08b      	b.n	800937a <__ssvfiscanf_r+0x2d6>
 8009262:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009264:	f042 0220 	orr.w	r2, r2, #32
 8009268:	9241      	str	r2, [sp, #260]	@ 0x104
 800926a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800926c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009270:	9241      	str	r2, [sp, #260]	@ 0x104
 8009272:	2210      	movs	r2, #16
 8009274:	2b6e      	cmp	r3, #110	@ 0x6e
 8009276:	9242      	str	r2, [sp, #264]	@ 0x108
 8009278:	d902      	bls.n	8009280 <__ssvfiscanf_r+0x1dc>
 800927a:	e005      	b.n	8009288 <__ssvfiscanf_r+0x1e4>
 800927c:	2300      	movs	r3, #0
 800927e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009280:	2303      	movs	r3, #3
 8009282:	e002      	b.n	800928a <__ssvfiscanf_r+0x1e6>
 8009284:	2308      	movs	r3, #8
 8009286:	9342      	str	r3, [sp, #264]	@ 0x108
 8009288:	2304      	movs	r3, #4
 800928a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800928c:	6863      	ldr	r3, [r4, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	dd39      	ble.n	8009306 <__ssvfiscanf_r+0x262>
 8009292:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009294:	0659      	lsls	r1, r3, #25
 8009296:	d404      	bmi.n	80092a2 <__ssvfiscanf_r+0x1fe>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	5cba      	ldrb	r2, [r7, r2]
 800929e:	0712      	lsls	r2, r2, #28
 80092a0:	d438      	bmi.n	8009314 <__ssvfiscanf_r+0x270>
 80092a2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	dc47      	bgt.n	8009338 <__ssvfiscanf_r+0x294>
 80092a8:	466b      	mov	r3, sp
 80092aa:	4622      	mov	r2, r4
 80092ac:	a941      	add	r1, sp, #260	@ 0x104
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 f9fa 	bl	80096a8 <_scanf_chars>
 80092b4:	2801      	cmp	r0, #1
 80092b6:	d064      	beq.n	8009382 <__ssvfiscanf_r+0x2de>
 80092b8:	2802      	cmp	r0, #2
 80092ba:	f47f af18 	bne.w	80090ee <__ssvfiscanf_r+0x4a>
 80092be:	e7c9      	b.n	8009254 <__ssvfiscanf_r+0x1b0>
 80092c0:	220a      	movs	r2, #10
 80092c2:	e7d7      	b.n	8009274 <__ssvfiscanf_r+0x1d0>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4640      	mov	r0, r8
 80092c8:	f000 fb3c 	bl	8009944 <__sccl>
 80092cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80092ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80092d4:	4605      	mov	r5, r0
 80092d6:	2301      	movs	r3, #1
 80092d8:	e7d7      	b.n	800928a <__ssvfiscanf_r+0x1e6>
 80092da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80092dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80092e2:	2300      	movs	r3, #0
 80092e4:	e7d1      	b.n	800928a <__ssvfiscanf_r+0x1e6>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e7cf      	b.n	800928a <__ssvfiscanf_r+0x1e6>
 80092ea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80092ec:	06c3      	lsls	r3, r0, #27
 80092ee:	f53f aefe 	bmi.w	80090ee <__ssvfiscanf_r+0x4a>
 80092f2:	9b00      	ldr	r3, [sp, #0]
 80092f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	9100      	str	r1, [sp, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	07c0      	lsls	r0, r0, #31
 80092fe:	bf4c      	ite	mi
 8009300:	801a      	strhmi	r2, [r3, #0]
 8009302:	601a      	strpl	r2, [r3, #0]
 8009304:	e6f3      	b.n	80090ee <__ssvfiscanf_r+0x4a>
 8009306:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009308:	4621      	mov	r1, r4
 800930a:	4630      	mov	r0, r6
 800930c:	4798      	blx	r3
 800930e:	2800      	cmp	r0, #0
 8009310:	d0bf      	beq.n	8009292 <__ssvfiscanf_r+0x1ee>
 8009312:	e79f      	b.n	8009254 <__ssvfiscanf_r+0x1b0>
 8009314:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009316:	3201      	adds	r2, #1
 8009318:	9245      	str	r2, [sp, #276]	@ 0x114
 800931a:	6862      	ldr	r2, [r4, #4]
 800931c:	3a01      	subs	r2, #1
 800931e:	2a00      	cmp	r2, #0
 8009320:	6062      	str	r2, [r4, #4]
 8009322:	dd02      	ble.n	800932a <__ssvfiscanf_r+0x286>
 8009324:	3301      	adds	r3, #1
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	e7b6      	b.n	8009298 <__ssvfiscanf_r+0x1f4>
 800932a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800932c:	4621      	mov	r1, r4
 800932e:	4630      	mov	r0, r6
 8009330:	4798      	blx	r3
 8009332:	2800      	cmp	r0, #0
 8009334:	d0b0      	beq.n	8009298 <__ssvfiscanf_r+0x1f4>
 8009336:	e78d      	b.n	8009254 <__ssvfiscanf_r+0x1b0>
 8009338:	2b04      	cmp	r3, #4
 800933a:	dc0f      	bgt.n	800935c <__ssvfiscanf_r+0x2b8>
 800933c:	466b      	mov	r3, sp
 800933e:	4622      	mov	r2, r4
 8009340:	a941      	add	r1, sp, #260	@ 0x104
 8009342:	4630      	mov	r0, r6
 8009344:	f000 fa0a 	bl	800975c <_scanf_i>
 8009348:	e7b4      	b.n	80092b4 <__ssvfiscanf_r+0x210>
 800934a:	bf00      	nop
 800934c:	08008ff5 	.word	0x08008ff5
 8009350:	0800906b 	.word	0x0800906b
 8009354:	0800a6ff 	.word	0x0800a6ff
 8009358:	0800a6b6 	.word	0x0800a6b6
 800935c:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <__ssvfiscanf_r+0x2e4>)
 800935e:	2b00      	cmp	r3, #0
 8009360:	f43f aec5 	beq.w	80090ee <__ssvfiscanf_r+0x4a>
 8009364:	466b      	mov	r3, sp
 8009366:	4622      	mov	r2, r4
 8009368:	a941      	add	r1, sp, #260	@ 0x104
 800936a:	4630      	mov	r0, r6
 800936c:	f3af 8000 	nop.w
 8009370:	e7a0      	b.n	80092b4 <__ssvfiscanf_r+0x210>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	065b      	lsls	r3, r3, #25
 8009376:	f53f af71 	bmi.w	800925c <__ssvfiscanf_r+0x1b8>
 800937a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009382:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009384:	e7f9      	b.n	800937a <__ssvfiscanf_r+0x2d6>
 8009386:	bf00      	nop
 8009388:	00000000 	.word	0x00000000

0800938c <_printf_common>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	4616      	mov	r6, r2
 8009392:	4698      	mov	r8, r3
 8009394:	688a      	ldr	r2, [r1, #8]
 8009396:	690b      	ldr	r3, [r1, #16]
 8009398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800939c:	4293      	cmp	r3, r2
 800939e:	bfb8      	it	lt
 80093a0:	4613      	movlt	r3, r2
 80093a2:	6033      	str	r3, [r6, #0]
 80093a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093a8:	4607      	mov	r7, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	b10a      	cbz	r2, 80093b2 <_printf_common+0x26>
 80093ae:	3301      	adds	r3, #1
 80093b0:	6033      	str	r3, [r6, #0]
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	0699      	lsls	r1, r3, #26
 80093b6:	bf42      	ittt	mi
 80093b8:	6833      	ldrmi	r3, [r6, #0]
 80093ba:	3302      	addmi	r3, #2
 80093bc:	6033      	strmi	r3, [r6, #0]
 80093be:	6825      	ldr	r5, [r4, #0]
 80093c0:	f015 0506 	ands.w	r5, r5, #6
 80093c4:	d106      	bne.n	80093d4 <_printf_common+0x48>
 80093c6:	f104 0a19 	add.w	sl, r4, #25
 80093ca:	68e3      	ldr	r3, [r4, #12]
 80093cc:	6832      	ldr	r2, [r6, #0]
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	42ab      	cmp	r3, r5
 80093d2:	dc26      	bgt.n	8009422 <_printf_common+0x96>
 80093d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	3b00      	subs	r3, #0
 80093dc:	bf18      	it	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	0692      	lsls	r2, r2, #26
 80093e2:	d42b      	bmi.n	800943c <_printf_common+0xb0>
 80093e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093e8:	4641      	mov	r1, r8
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c8      	blx	r9
 80093ee:	3001      	adds	r0, #1
 80093f0:	d01e      	beq.n	8009430 <_printf_common+0xa4>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	6922      	ldr	r2, [r4, #16]
 80093f6:	f003 0306 	and.w	r3, r3, #6
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	bf02      	ittt	eq
 80093fe:	68e5      	ldreq	r5, [r4, #12]
 8009400:	6833      	ldreq	r3, [r6, #0]
 8009402:	1aed      	subeq	r5, r5, r3
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	bf0c      	ite	eq
 8009408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800940c:	2500      	movne	r5, #0
 800940e:	4293      	cmp	r3, r2
 8009410:	bfc4      	itt	gt
 8009412:	1a9b      	subgt	r3, r3, r2
 8009414:	18ed      	addgt	r5, r5, r3
 8009416:	2600      	movs	r6, #0
 8009418:	341a      	adds	r4, #26
 800941a:	42b5      	cmp	r5, r6
 800941c:	d11a      	bne.n	8009454 <_printf_common+0xc8>
 800941e:	2000      	movs	r0, #0
 8009420:	e008      	b.n	8009434 <_printf_common+0xa8>
 8009422:	2301      	movs	r3, #1
 8009424:	4652      	mov	r2, sl
 8009426:	4641      	mov	r1, r8
 8009428:	4638      	mov	r0, r7
 800942a:	47c8      	blx	r9
 800942c:	3001      	adds	r0, #1
 800942e:	d103      	bne.n	8009438 <_printf_common+0xac>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009438:	3501      	adds	r5, #1
 800943a:	e7c6      	b.n	80093ca <_printf_common+0x3e>
 800943c:	18e1      	adds	r1, r4, r3
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	2030      	movs	r0, #48	@ 0x30
 8009442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009446:	4422      	add	r2, r4
 8009448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800944c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009450:	3302      	adds	r3, #2
 8009452:	e7c7      	b.n	80093e4 <_printf_common+0x58>
 8009454:	2301      	movs	r3, #1
 8009456:	4622      	mov	r2, r4
 8009458:	4641      	mov	r1, r8
 800945a:	4638      	mov	r0, r7
 800945c:	47c8      	blx	r9
 800945e:	3001      	adds	r0, #1
 8009460:	d0e6      	beq.n	8009430 <_printf_common+0xa4>
 8009462:	3601      	adds	r6, #1
 8009464:	e7d9      	b.n	800941a <_printf_common+0x8e>
	...

08009468 <_printf_i>:
 8009468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	7e0f      	ldrb	r7, [r1, #24]
 800946e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009470:	2f78      	cmp	r7, #120	@ 0x78
 8009472:	4691      	mov	r9, r2
 8009474:	4680      	mov	r8, r0
 8009476:	460c      	mov	r4, r1
 8009478:	469a      	mov	sl, r3
 800947a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800947e:	d807      	bhi.n	8009490 <_printf_i+0x28>
 8009480:	2f62      	cmp	r7, #98	@ 0x62
 8009482:	d80a      	bhi.n	800949a <_printf_i+0x32>
 8009484:	2f00      	cmp	r7, #0
 8009486:	f000 80d2 	beq.w	800962e <_printf_i+0x1c6>
 800948a:	2f58      	cmp	r7, #88	@ 0x58
 800948c:	f000 80b9 	beq.w	8009602 <_printf_i+0x19a>
 8009490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009498:	e03a      	b.n	8009510 <_printf_i+0xa8>
 800949a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800949e:	2b15      	cmp	r3, #21
 80094a0:	d8f6      	bhi.n	8009490 <_printf_i+0x28>
 80094a2:	a101      	add	r1, pc, #4	@ (adr r1, 80094a8 <_printf_i+0x40>)
 80094a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a8:	08009501 	.word	0x08009501
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009491 	.word	0x08009491
 80094b4:	08009491 	.word	0x08009491
 80094b8:	08009491 	.word	0x08009491
 80094bc:	08009491 	.word	0x08009491
 80094c0:	08009515 	.word	0x08009515
 80094c4:	08009491 	.word	0x08009491
 80094c8:	08009491 	.word	0x08009491
 80094cc:	08009491 	.word	0x08009491
 80094d0:	08009491 	.word	0x08009491
 80094d4:	08009615 	.word	0x08009615
 80094d8:	0800953f 	.word	0x0800953f
 80094dc:	080095cf 	.word	0x080095cf
 80094e0:	08009491 	.word	0x08009491
 80094e4:	08009491 	.word	0x08009491
 80094e8:	08009637 	.word	0x08009637
 80094ec:	08009491 	.word	0x08009491
 80094f0:	0800953f 	.word	0x0800953f
 80094f4:	08009491 	.word	0x08009491
 80094f8:	08009491 	.word	0x08009491
 80094fc:	080095d7 	.word	0x080095d7
 8009500:	6833      	ldr	r3, [r6, #0]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6032      	str	r2, [r6, #0]
 8009508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800950c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009510:	2301      	movs	r3, #1
 8009512:	e09d      	b.n	8009650 <_printf_i+0x1e8>
 8009514:	6833      	ldr	r3, [r6, #0]
 8009516:	6820      	ldr	r0, [r4, #0]
 8009518:	1d19      	adds	r1, r3, #4
 800951a:	6031      	str	r1, [r6, #0]
 800951c:	0606      	lsls	r6, r0, #24
 800951e:	d501      	bpl.n	8009524 <_printf_i+0xbc>
 8009520:	681d      	ldr	r5, [r3, #0]
 8009522:	e003      	b.n	800952c <_printf_i+0xc4>
 8009524:	0645      	lsls	r5, r0, #25
 8009526:	d5fb      	bpl.n	8009520 <_printf_i+0xb8>
 8009528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800952c:	2d00      	cmp	r5, #0
 800952e:	da03      	bge.n	8009538 <_printf_i+0xd0>
 8009530:	232d      	movs	r3, #45	@ 0x2d
 8009532:	426d      	negs	r5, r5
 8009534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009538:	4859      	ldr	r0, [pc, #356]	@ (80096a0 <_printf_i+0x238>)
 800953a:	230a      	movs	r3, #10
 800953c:	e011      	b.n	8009562 <_printf_i+0xfa>
 800953e:	6821      	ldr	r1, [r4, #0]
 8009540:	6833      	ldr	r3, [r6, #0]
 8009542:	0608      	lsls	r0, r1, #24
 8009544:	f853 5b04 	ldr.w	r5, [r3], #4
 8009548:	d402      	bmi.n	8009550 <_printf_i+0xe8>
 800954a:	0649      	lsls	r1, r1, #25
 800954c:	bf48      	it	mi
 800954e:	b2ad      	uxthmi	r5, r5
 8009550:	2f6f      	cmp	r7, #111	@ 0x6f
 8009552:	4853      	ldr	r0, [pc, #332]	@ (80096a0 <_printf_i+0x238>)
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	bf14      	ite	ne
 8009558:	230a      	movne	r3, #10
 800955a:	2308      	moveq	r3, #8
 800955c:	2100      	movs	r1, #0
 800955e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009562:	6866      	ldr	r6, [r4, #4]
 8009564:	60a6      	str	r6, [r4, #8]
 8009566:	2e00      	cmp	r6, #0
 8009568:	bfa2      	ittt	ge
 800956a:	6821      	ldrge	r1, [r4, #0]
 800956c:	f021 0104 	bicge.w	r1, r1, #4
 8009570:	6021      	strge	r1, [r4, #0]
 8009572:	b90d      	cbnz	r5, 8009578 <_printf_i+0x110>
 8009574:	2e00      	cmp	r6, #0
 8009576:	d04b      	beq.n	8009610 <_printf_i+0x1a8>
 8009578:	4616      	mov	r6, r2
 800957a:	fbb5 f1f3 	udiv	r1, r5, r3
 800957e:	fb03 5711 	mls	r7, r3, r1, r5
 8009582:	5dc7      	ldrb	r7, [r0, r7]
 8009584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009588:	462f      	mov	r7, r5
 800958a:	42bb      	cmp	r3, r7
 800958c:	460d      	mov	r5, r1
 800958e:	d9f4      	bls.n	800957a <_printf_i+0x112>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d10b      	bne.n	80095ac <_printf_i+0x144>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07df      	lsls	r7, r3, #31
 8009598:	d508      	bpl.n	80095ac <_printf_i+0x144>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	4299      	cmp	r1, r3
 80095a0:	bfde      	ittt	le
 80095a2:	2330      	movle	r3, #48	@ 0x30
 80095a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095ac:	1b92      	subs	r2, r2, r6
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	f8cd a000 	str.w	sl, [sp]
 80095b4:	464b      	mov	r3, r9
 80095b6:	aa03      	add	r2, sp, #12
 80095b8:	4621      	mov	r1, r4
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7ff fee6 	bl	800938c <_printf_common>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d14a      	bne.n	800965a <_printf_i+0x1f2>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b004      	add	sp, #16
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	f043 0320 	orr.w	r3, r3, #32
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	4833      	ldr	r0, [pc, #204]	@ (80096a4 <_printf_i+0x23c>)
 80095d8:	2778      	movs	r7, #120	@ 0x78
 80095da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6831      	ldr	r1, [r6, #0]
 80095e2:	061f      	lsls	r7, r3, #24
 80095e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095e8:	d402      	bmi.n	80095f0 <_printf_i+0x188>
 80095ea:	065f      	lsls	r7, r3, #25
 80095ec:	bf48      	it	mi
 80095ee:	b2ad      	uxthmi	r5, r5
 80095f0:	6031      	str	r1, [r6, #0]
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	bf44      	itt	mi
 80095f6:	f043 0320 	orrmi.w	r3, r3, #32
 80095fa:	6023      	strmi	r3, [r4, #0]
 80095fc:	b11d      	cbz	r5, 8009606 <_printf_i+0x19e>
 80095fe:	2310      	movs	r3, #16
 8009600:	e7ac      	b.n	800955c <_printf_i+0xf4>
 8009602:	4827      	ldr	r0, [pc, #156]	@ (80096a0 <_printf_i+0x238>)
 8009604:	e7e9      	b.n	80095da <_printf_i+0x172>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f023 0320 	bic.w	r3, r3, #32
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	e7f6      	b.n	80095fe <_printf_i+0x196>
 8009610:	4616      	mov	r6, r2
 8009612:	e7bd      	b.n	8009590 <_printf_i+0x128>
 8009614:	6833      	ldr	r3, [r6, #0]
 8009616:	6825      	ldr	r5, [r4, #0]
 8009618:	6961      	ldr	r1, [r4, #20]
 800961a:	1d18      	adds	r0, r3, #4
 800961c:	6030      	str	r0, [r6, #0]
 800961e:	062e      	lsls	r6, r5, #24
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	d501      	bpl.n	8009628 <_printf_i+0x1c0>
 8009624:	6019      	str	r1, [r3, #0]
 8009626:	e002      	b.n	800962e <_printf_i+0x1c6>
 8009628:	0668      	lsls	r0, r5, #25
 800962a:	d5fb      	bpl.n	8009624 <_printf_i+0x1bc>
 800962c:	8019      	strh	r1, [r3, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	4616      	mov	r6, r2
 8009634:	e7bc      	b.n	80095b0 <_printf_i+0x148>
 8009636:	6833      	ldr	r3, [r6, #0]
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	6032      	str	r2, [r6, #0]
 800963c:	681e      	ldr	r6, [r3, #0]
 800963e:	6862      	ldr	r2, [r4, #4]
 8009640:	2100      	movs	r1, #0
 8009642:	4630      	mov	r0, r6
 8009644:	f7f6 fdcc 	bl	80001e0 <memchr>
 8009648:	b108      	cbz	r0, 800964e <_printf_i+0x1e6>
 800964a:	1b80      	subs	r0, r0, r6
 800964c:	6060      	str	r0, [r4, #4]
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009658:	e7aa      	b.n	80095b0 <_printf_i+0x148>
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	4632      	mov	r2, r6
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d0ad      	beq.n	80095c4 <_printf_i+0x15c>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	079b      	lsls	r3, r3, #30
 800966c:	d413      	bmi.n	8009696 <_printf_i+0x22e>
 800966e:	68e0      	ldr	r0, [r4, #12]
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	4298      	cmp	r0, r3
 8009674:	bfb8      	it	lt
 8009676:	4618      	movlt	r0, r3
 8009678:	e7a6      	b.n	80095c8 <_printf_i+0x160>
 800967a:	2301      	movs	r3, #1
 800967c:	4632      	mov	r2, r6
 800967e:	4649      	mov	r1, r9
 8009680:	4640      	mov	r0, r8
 8009682:	47d0      	blx	sl
 8009684:	3001      	adds	r0, #1
 8009686:	d09d      	beq.n	80095c4 <_printf_i+0x15c>
 8009688:	3501      	adds	r5, #1
 800968a:	68e3      	ldr	r3, [r4, #12]
 800968c:	9903      	ldr	r1, [sp, #12]
 800968e:	1a5b      	subs	r3, r3, r1
 8009690:	42ab      	cmp	r3, r5
 8009692:	dcf2      	bgt.n	800967a <_printf_i+0x212>
 8009694:	e7eb      	b.n	800966e <_printf_i+0x206>
 8009696:	2500      	movs	r5, #0
 8009698:	f104 0619 	add.w	r6, r4, #25
 800969c:	e7f5      	b.n	800968a <_printf_i+0x222>
 800969e:	bf00      	nop
 80096a0:	0800a6c1 	.word	0x0800a6c1
 80096a4:	0800a6d2 	.word	0x0800a6d2

080096a8 <_scanf_chars>:
 80096a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	4615      	mov	r5, r2
 80096ae:	688a      	ldr	r2, [r1, #8]
 80096b0:	4680      	mov	r8, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b932      	cbnz	r2, 80096c4 <_scanf_chars+0x1c>
 80096b6:	698a      	ldr	r2, [r1, #24]
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	bf14      	ite	ne
 80096bc:	f04f 32ff 	movne.w	r2, #4294967295
 80096c0:	2201      	moveq	r2, #1
 80096c2:	608a      	str	r2, [r1, #8]
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009758 <_scanf_chars+0xb0>
 80096ca:	06d1      	lsls	r1, r2, #27
 80096cc:	bf5f      	itttt	pl
 80096ce:	681a      	ldrpl	r2, [r3, #0]
 80096d0:	1d11      	addpl	r1, r2, #4
 80096d2:	6019      	strpl	r1, [r3, #0]
 80096d4:	6816      	ldrpl	r6, [r2, #0]
 80096d6:	2700      	movs	r7, #0
 80096d8:	69a0      	ldr	r0, [r4, #24]
 80096da:	b188      	cbz	r0, 8009700 <_scanf_chars+0x58>
 80096dc:	2801      	cmp	r0, #1
 80096de:	d107      	bne.n	80096f0 <_scanf_chars+0x48>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	6963      	ldr	r3, [r4, #20]
 80096e6:	5c9b      	ldrb	r3, [r3, r2]
 80096e8:	b953      	cbnz	r3, 8009700 <_scanf_chars+0x58>
 80096ea:	2f00      	cmp	r7, #0
 80096ec:	d031      	beq.n	8009752 <_scanf_chars+0xaa>
 80096ee:	e022      	b.n	8009736 <_scanf_chars+0x8e>
 80096f0:	2802      	cmp	r0, #2
 80096f2:	d120      	bne.n	8009736 <_scanf_chars+0x8e>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80096fc:	071b      	lsls	r3, r3, #28
 80096fe:	d41a      	bmi.n	8009736 <_scanf_chars+0x8e>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	06da      	lsls	r2, r3, #27
 8009704:	bf5e      	ittt	pl
 8009706:	682b      	ldrpl	r3, [r5, #0]
 8009708:	781b      	ldrbpl	r3, [r3, #0]
 800970a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800970e:	682a      	ldr	r2, [r5, #0]
 8009710:	686b      	ldr	r3, [r5, #4]
 8009712:	3201      	adds	r2, #1
 8009714:	602a      	str	r2, [r5, #0]
 8009716:	68a2      	ldr	r2, [r4, #8]
 8009718:	3b01      	subs	r3, #1
 800971a:	3a01      	subs	r2, #1
 800971c:	606b      	str	r3, [r5, #4]
 800971e:	3701      	adds	r7, #1
 8009720:	60a2      	str	r2, [r4, #8]
 8009722:	b142      	cbz	r2, 8009736 <_scanf_chars+0x8e>
 8009724:	2b00      	cmp	r3, #0
 8009726:	dcd7      	bgt.n	80096d8 <_scanf_chars+0x30>
 8009728:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800972c:	4629      	mov	r1, r5
 800972e:	4640      	mov	r0, r8
 8009730:	4798      	blx	r3
 8009732:	2800      	cmp	r0, #0
 8009734:	d0d0      	beq.n	80096d8 <_scanf_chars+0x30>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	f013 0310 	ands.w	r3, r3, #16
 800973c:	d105      	bne.n	800974a <_scanf_chars+0xa2>
 800973e:	68e2      	ldr	r2, [r4, #12]
 8009740:	3201      	adds	r2, #1
 8009742:	60e2      	str	r2, [r4, #12]
 8009744:	69a2      	ldr	r2, [r4, #24]
 8009746:	b102      	cbz	r2, 800974a <_scanf_chars+0xa2>
 8009748:	7033      	strb	r3, [r6, #0]
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	443b      	add	r3, r7
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	2000      	movs	r0, #0
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	bf00      	nop
 8009758:	0800a6ff 	.word	0x0800a6ff

0800975c <_scanf_i>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	4698      	mov	r8, r3
 8009762:	4b74      	ldr	r3, [pc, #464]	@ (8009934 <_scanf_i+0x1d8>)
 8009764:	460c      	mov	r4, r1
 8009766:	4682      	mov	sl, r0
 8009768:	4616      	mov	r6, r2
 800976a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800976e:	b087      	sub	sp, #28
 8009770:	ab03      	add	r3, sp, #12
 8009772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009776:	4b70      	ldr	r3, [pc, #448]	@ (8009938 <_scanf_i+0x1dc>)
 8009778:	69a1      	ldr	r1, [r4, #24]
 800977a:	4a70      	ldr	r2, [pc, #448]	@ (800993c <_scanf_i+0x1e0>)
 800977c:	2903      	cmp	r1, #3
 800977e:	bf08      	it	eq
 8009780:	461a      	moveq	r2, r3
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	9201      	str	r2, [sp, #4]
 8009786:	1e5a      	subs	r2, r3, #1
 8009788:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800978c:	bf88      	it	hi
 800978e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009792:	4627      	mov	r7, r4
 8009794:	bf82      	ittt	hi
 8009796:	eb03 0905 	addhi.w	r9, r3, r5
 800979a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800979e:	60a3      	strhi	r3, [r4, #8]
 80097a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80097a4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80097a8:	bf98      	it	ls
 80097aa:	f04f 0900 	movls.w	r9, #0
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	463d      	mov	r5, r7
 80097b2:	f04f 0b00 	mov.w	fp, #0
 80097b6:	6831      	ldr	r1, [r6, #0]
 80097b8:	ab03      	add	r3, sp, #12
 80097ba:	7809      	ldrb	r1, [r1, #0]
 80097bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80097c0:	2202      	movs	r2, #2
 80097c2:	f7f6 fd0d 	bl	80001e0 <memchr>
 80097c6:	b328      	cbz	r0, 8009814 <_scanf_i+0xb8>
 80097c8:	f1bb 0f01 	cmp.w	fp, #1
 80097cc:	d159      	bne.n	8009882 <_scanf_i+0x126>
 80097ce:	6862      	ldr	r2, [r4, #4]
 80097d0:	b92a      	cbnz	r2, 80097de <_scanf_i+0x82>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	2108      	movs	r1, #8
 80097d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097da:	6061      	str	r1, [r4, #4]
 80097dc:	6022      	str	r2, [r4, #0]
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80097e4:	6022      	str	r2, [r4, #0]
 80097e6:	68a2      	ldr	r2, [r4, #8]
 80097e8:	1e51      	subs	r1, r2, #1
 80097ea:	60a1      	str	r1, [r4, #8]
 80097ec:	b192      	cbz	r2, 8009814 <_scanf_i+0xb8>
 80097ee:	6832      	ldr	r2, [r6, #0]
 80097f0:	1c51      	adds	r1, r2, #1
 80097f2:	6031      	str	r1, [r6, #0]
 80097f4:	7812      	ldrb	r2, [r2, #0]
 80097f6:	f805 2b01 	strb.w	r2, [r5], #1
 80097fa:	6872      	ldr	r2, [r6, #4]
 80097fc:	3a01      	subs	r2, #1
 80097fe:	2a00      	cmp	r2, #0
 8009800:	6072      	str	r2, [r6, #4]
 8009802:	dc07      	bgt.n	8009814 <_scanf_i+0xb8>
 8009804:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009808:	4631      	mov	r1, r6
 800980a:	4650      	mov	r0, sl
 800980c:	4790      	blx	r2
 800980e:	2800      	cmp	r0, #0
 8009810:	f040 8085 	bne.w	800991e <_scanf_i+0x1c2>
 8009814:	f10b 0b01 	add.w	fp, fp, #1
 8009818:	f1bb 0f03 	cmp.w	fp, #3
 800981c:	d1cb      	bne.n	80097b6 <_scanf_i+0x5a>
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	b90b      	cbnz	r3, 8009826 <_scanf_i+0xca>
 8009822:	230a      	movs	r3, #10
 8009824:	6063      	str	r3, [r4, #4]
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	4945      	ldr	r1, [pc, #276]	@ (8009940 <_scanf_i+0x1e4>)
 800982a:	6960      	ldr	r0, [r4, #20]
 800982c:	1ac9      	subs	r1, r1, r3
 800982e:	f000 f889 	bl	8009944 <__sccl>
 8009832:	f04f 0b00 	mov.w	fp, #0
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	6822      	ldr	r2, [r4, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d03d      	beq.n	80098ba <_scanf_i+0x15e>
 800983e:	6831      	ldr	r1, [r6, #0]
 8009840:	6960      	ldr	r0, [r4, #20]
 8009842:	f891 c000 	ldrb.w	ip, [r1]
 8009846:	f810 000c 	ldrb.w	r0, [r0, ip]
 800984a:	2800      	cmp	r0, #0
 800984c:	d035      	beq.n	80098ba <_scanf_i+0x15e>
 800984e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009852:	d124      	bne.n	800989e <_scanf_i+0x142>
 8009854:	0510      	lsls	r0, r2, #20
 8009856:	d522      	bpl.n	800989e <_scanf_i+0x142>
 8009858:	f10b 0b01 	add.w	fp, fp, #1
 800985c:	f1b9 0f00 	cmp.w	r9, #0
 8009860:	d003      	beq.n	800986a <_scanf_i+0x10e>
 8009862:	3301      	adds	r3, #1
 8009864:	f109 39ff 	add.w	r9, r9, #4294967295
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6873      	ldr	r3, [r6, #4]
 800986c:	3b01      	subs	r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	6073      	str	r3, [r6, #4]
 8009872:	dd1b      	ble.n	80098ac <_scanf_i+0x150>
 8009874:	6833      	ldr	r3, [r6, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	3b01      	subs	r3, #1
 800987e:	60a3      	str	r3, [r4, #8]
 8009880:	e7d9      	b.n	8009836 <_scanf_i+0xda>
 8009882:	f1bb 0f02 	cmp.w	fp, #2
 8009886:	d1ae      	bne.n	80097e6 <_scanf_i+0x8a>
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800988e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009892:	d1bf      	bne.n	8009814 <_scanf_i+0xb8>
 8009894:	2110      	movs	r1, #16
 8009896:	6061      	str	r1, [r4, #4]
 8009898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800989c:	e7a2      	b.n	80097e4 <_scanf_i+0x88>
 800989e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	780b      	ldrb	r3, [r1, #0]
 80098a6:	f805 3b01 	strb.w	r3, [r5], #1
 80098aa:	e7de      	b.n	800986a <_scanf_i+0x10e>
 80098ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098b0:	4631      	mov	r1, r6
 80098b2:	4650      	mov	r0, sl
 80098b4:	4798      	blx	r3
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d0df      	beq.n	800987a <_scanf_i+0x11e>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	05d9      	lsls	r1, r3, #23
 80098be:	d50d      	bpl.n	80098dc <_scanf_i+0x180>
 80098c0:	42bd      	cmp	r5, r7
 80098c2:	d909      	bls.n	80098d8 <_scanf_i+0x17c>
 80098c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098cc:	4632      	mov	r2, r6
 80098ce:	4650      	mov	r0, sl
 80098d0:	4798      	blx	r3
 80098d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80098d6:	464d      	mov	r5, r9
 80098d8:	42bd      	cmp	r5, r7
 80098da:	d028      	beq.n	800992e <_scanf_i+0x1d2>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	f012 0210 	ands.w	r2, r2, #16
 80098e2:	d113      	bne.n	800990c <_scanf_i+0x1b0>
 80098e4:	702a      	strb	r2, [r5, #0]
 80098e6:	6863      	ldr	r3, [r4, #4]
 80098e8:	9e01      	ldr	r6, [sp, #4]
 80098ea:	4639      	mov	r1, r7
 80098ec:	4650      	mov	r0, sl
 80098ee:	47b0      	blx	r6
 80098f0:	f8d8 3000 	ldr.w	r3, [r8]
 80098f4:	6821      	ldr	r1, [r4, #0]
 80098f6:	1d1a      	adds	r2, r3, #4
 80098f8:	f8c8 2000 	str.w	r2, [r8]
 80098fc:	f011 0f20 	tst.w	r1, #32
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	d00f      	beq.n	8009924 <_scanf_i+0x1c8>
 8009904:	6018      	str	r0, [r3, #0]
 8009906:	68e3      	ldr	r3, [r4, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60e3      	str	r3, [r4, #12]
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	1bed      	subs	r5, r5, r7
 8009910:	445d      	add	r5, fp
 8009912:	442b      	add	r3, r5
 8009914:	6123      	str	r3, [r4, #16]
 8009916:	2000      	movs	r0, #0
 8009918:	b007      	add	sp, #28
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991e:	f04f 0b00 	mov.w	fp, #0
 8009922:	e7ca      	b.n	80098ba <_scanf_i+0x15e>
 8009924:	07ca      	lsls	r2, r1, #31
 8009926:	bf4c      	ite	mi
 8009928:	8018      	strhmi	r0, [r3, #0]
 800992a:	6018      	strpl	r0, [r3, #0]
 800992c:	e7eb      	b.n	8009906 <_scanf_i+0x1aa>
 800992e:	2001      	movs	r0, #1
 8009930:	e7f2      	b.n	8009918 <_scanf_i+0x1bc>
 8009932:	bf00      	nop
 8009934:	0800a070 	.word	0x0800a070
 8009938:	08009b7d 	.word	0x08009b7d
 800993c:	08009c5d 	.word	0x08009c5d
 8009940:	0800a6f3 	.word	0x0800a6f3

08009944 <__sccl>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	780b      	ldrb	r3, [r1, #0]
 8009948:	4604      	mov	r4, r0
 800994a:	2b5e      	cmp	r3, #94	@ 0x5e
 800994c:	bf0b      	itete	eq
 800994e:	784b      	ldrbeq	r3, [r1, #1]
 8009950:	1c4a      	addne	r2, r1, #1
 8009952:	1c8a      	addeq	r2, r1, #2
 8009954:	2100      	movne	r1, #0
 8009956:	bf08      	it	eq
 8009958:	2101      	moveq	r1, #1
 800995a:	3801      	subs	r0, #1
 800995c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009960:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009964:	42a8      	cmp	r0, r5
 8009966:	d1fb      	bne.n	8009960 <__sccl+0x1c>
 8009968:	b90b      	cbnz	r3, 800996e <__sccl+0x2a>
 800996a:	1e50      	subs	r0, r2, #1
 800996c:	bd70      	pop	{r4, r5, r6, pc}
 800996e:	f081 0101 	eor.w	r1, r1, #1
 8009972:	54e1      	strb	r1, [r4, r3]
 8009974:	4610      	mov	r0, r2
 8009976:	4602      	mov	r2, r0
 8009978:	f812 5b01 	ldrb.w	r5, [r2], #1
 800997c:	2d2d      	cmp	r5, #45	@ 0x2d
 800997e:	d005      	beq.n	800998c <__sccl+0x48>
 8009980:	2d5d      	cmp	r5, #93	@ 0x5d
 8009982:	d016      	beq.n	80099b2 <__sccl+0x6e>
 8009984:	2d00      	cmp	r5, #0
 8009986:	d0f1      	beq.n	800996c <__sccl+0x28>
 8009988:	462b      	mov	r3, r5
 800998a:	e7f2      	b.n	8009972 <__sccl+0x2e>
 800998c:	7846      	ldrb	r6, [r0, #1]
 800998e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009990:	d0fa      	beq.n	8009988 <__sccl+0x44>
 8009992:	42b3      	cmp	r3, r6
 8009994:	dcf8      	bgt.n	8009988 <__sccl+0x44>
 8009996:	3002      	adds	r0, #2
 8009998:	461a      	mov	r2, r3
 800999a:	3201      	adds	r2, #1
 800999c:	4296      	cmp	r6, r2
 800999e:	54a1      	strb	r1, [r4, r2]
 80099a0:	dcfb      	bgt.n	800999a <__sccl+0x56>
 80099a2:	1af2      	subs	r2, r6, r3
 80099a4:	3a01      	subs	r2, #1
 80099a6:	1c5d      	adds	r5, r3, #1
 80099a8:	42b3      	cmp	r3, r6
 80099aa:	bfa8      	it	ge
 80099ac:	2200      	movge	r2, #0
 80099ae:	18ab      	adds	r3, r5, r2
 80099b0:	e7e1      	b.n	8009976 <__sccl+0x32>
 80099b2:	4610      	mov	r0, r2
 80099b4:	e7da      	b.n	800996c <__sccl+0x28>

080099b6 <__submore>:
 80099b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ba:	460c      	mov	r4, r1
 80099bc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80099be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099c2:	4299      	cmp	r1, r3
 80099c4:	d11d      	bne.n	8009a02 <__submore+0x4c>
 80099c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80099ca:	f7fe ff8b 	bl	80088e4 <_malloc_r>
 80099ce:	b918      	cbnz	r0, 80099d8 <__submore+0x22>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80099de:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80099e2:	6360      	str	r0, [r4, #52]	@ 0x34
 80099e4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80099e8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80099ec:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80099f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80099f4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80099f8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80099fc:	6020      	str	r0, [r4, #0]
 80099fe:	2000      	movs	r0, #0
 8009a00:	e7e8      	b.n	80099d4 <__submore+0x1e>
 8009a02:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009a04:	0077      	lsls	r7, r6, #1
 8009a06:	463a      	mov	r2, r7
 8009a08:	f000 f80f 	bl	8009a2a <_realloc_r>
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d0de      	beq.n	80099d0 <__submore+0x1a>
 8009a12:	eb00 0806 	add.w	r8, r0, r6
 8009a16:	4601      	mov	r1, r0
 8009a18:	4632      	mov	r2, r6
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	f7ff f93a 	bl	8008c94 <memcpy>
 8009a20:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009a24:	f8c4 8000 	str.w	r8, [r4]
 8009a28:	e7e9      	b.n	80099fe <__submore+0x48>

08009a2a <_realloc_r>:
 8009a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4615      	mov	r5, r2
 8009a32:	460c      	mov	r4, r1
 8009a34:	b921      	cbnz	r1, 8009a40 <_realloc_r+0x16>
 8009a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	f7fe bf52 	b.w	80088e4 <_malloc_r>
 8009a40:	b92a      	cbnz	r2, 8009a4e <_realloc_r+0x24>
 8009a42:	f7ff f935 	bl	8008cb0 <_free_r>
 8009a46:	2400      	movs	r4, #0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4e:	f000 f907 	bl	8009c60 <_malloc_usable_size_r>
 8009a52:	4285      	cmp	r5, r0
 8009a54:	4606      	mov	r6, r0
 8009a56:	d802      	bhi.n	8009a5e <_realloc_r+0x34>
 8009a58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a5c:	d8f4      	bhi.n	8009a48 <_realloc_r+0x1e>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4640      	mov	r0, r8
 8009a62:	f7fe ff3f 	bl	80088e4 <_malloc_r>
 8009a66:	4607      	mov	r7, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d0ec      	beq.n	8009a46 <_realloc_r+0x1c>
 8009a6c:	42b5      	cmp	r5, r6
 8009a6e:	462a      	mov	r2, r5
 8009a70:	4621      	mov	r1, r4
 8009a72:	bf28      	it	cs
 8009a74:	4632      	movcs	r2, r6
 8009a76:	f7ff f90d 	bl	8008c94 <memcpy>
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	f7ff f917 	bl	8008cb0 <_free_r>
 8009a82:	463c      	mov	r4, r7
 8009a84:	e7e0      	b.n	8009a48 <_realloc_r+0x1e>
	...

08009a88 <_strtol_l.constprop.0>:
 8009a88:	2b24      	cmp	r3, #36	@ 0x24
 8009a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8e:	4686      	mov	lr, r0
 8009a90:	4690      	mov	r8, r2
 8009a92:	d801      	bhi.n	8009a98 <_strtol_l.constprop.0+0x10>
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <_strtol_l.constprop.0+0x1e>
 8009a98:	f7ff f8d0 	bl	8008c3c <__errno>
 8009a9c:	2316      	movs	r3, #22
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	4834      	ldr	r0, [pc, #208]	@ (8009b78 <_strtol_l.constprop.0+0xf0>)
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	462a      	mov	r2, r5
 8009aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ab0:	5d06      	ldrb	r6, [r0, r4]
 8009ab2:	f016 0608 	ands.w	r6, r6, #8
 8009ab6:	d1f8      	bne.n	8009aaa <_strtol_l.constprop.0+0x22>
 8009ab8:	2c2d      	cmp	r4, #45	@ 0x2d
 8009aba:	d12d      	bne.n	8009b18 <_strtol_l.constprop.0+0x90>
 8009abc:	782c      	ldrb	r4, [r5, #0]
 8009abe:	2601      	movs	r6, #1
 8009ac0:	1c95      	adds	r5, r2, #2
 8009ac2:	f033 0210 	bics.w	r2, r3, #16
 8009ac6:	d109      	bne.n	8009adc <_strtol_l.constprop.0+0x54>
 8009ac8:	2c30      	cmp	r4, #48	@ 0x30
 8009aca:	d12a      	bne.n	8009b22 <_strtol_l.constprop.0+0x9a>
 8009acc:	782a      	ldrb	r2, [r5, #0]
 8009ace:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ad2:	2a58      	cmp	r2, #88	@ 0x58
 8009ad4:	d125      	bne.n	8009b22 <_strtol_l.constprop.0+0x9a>
 8009ad6:	786c      	ldrb	r4, [r5, #1]
 8009ad8:	2310      	movs	r3, #16
 8009ada:	3502      	adds	r5, #2
 8009adc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ae0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	fbbc f9f3 	udiv	r9, ip, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	fb03 ca19 	mls	sl, r3, r9, ip
 8009af0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009af4:	2f09      	cmp	r7, #9
 8009af6:	d81b      	bhi.n	8009b30 <_strtol_l.constprop.0+0xa8>
 8009af8:	463c      	mov	r4, r7
 8009afa:	42a3      	cmp	r3, r4
 8009afc:	dd27      	ble.n	8009b4e <_strtol_l.constprop.0+0xc6>
 8009afe:	1c57      	adds	r7, r2, #1
 8009b00:	d007      	beq.n	8009b12 <_strtol_l.constprop.0+0x8a>
 8009b02:	4581      	cmp	r9, r0
 8009b04:	d320      	bcc.n	8009b48 <_strtol_l.constprop.0+0xc0>
 8009b06:	d101      	bne.n	8009b0c <_strtol_l.constprop.0+0x84>
 8009b08:	45a2      	cmp	sl, r4
 8009b0a:	db1d      	blt.n	8009b48 <_strtol_l.constprop.0+0xc0>
 8009b0c:	fb00 4003 	mla	r0, r0, r3, r4
 8009b10:	2201      	movs	r2, #1
 8009b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b16:	e7eb      	b.n	8009af0 <_strtol_l.constprop.0+0x68>
 8009b18:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b1a:	bf04      	itt	eq
 8009b1c:	782c      	ldrbeq	r4, [r5, #0]
 8009b1e:	1c95      	addeq	r5, r2, #2
 8009b20:	e7cf      	b.n	8009ac2 <_strtol_l.constprop.0+0x3a>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1da      	bne.n	8009adc <_strtol_l.constprop.0+0x54>
 8009b26:	2c30      	cmp	r4, #48	@ 0x30
 8009b28:	bf0c      	ite	eq
 8009b2a:	2308      	moveq	r3, #8
 8009b2c:	230a      	movne	r3, #10
 8009b2e:	e7d5      	b.n	8009adc <_strtol_l.constprop.0+0x54>
 8009b30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b34:	2f19      	cmp	r7, #25
 8009b36:	d801      	bhi.n	8009b3c <_strtol_l.constprop.0+0xb4>
 8009b38:	3c37      	subs	r4, #55	@ 0x37
 8009b3a:	e7de      	b.n	8009afa <_strtol_l.constprop.0+0x72>
 8009b3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b40:	2f19      	cmp	r7, #25
 8009b42:	d804      	bhi.n	8009b4e <_strtol_l.constprop.0+0xc6>
 8009b44:	3c57      	subs	r4, #87	@ 0x57
 8009b46:	e7d8      	b.n	8009afa <_strtol_l.constprop.0+0x72>
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	e7e1      	b.n	8009b12 <_strtol_l.constprop.0+0x8a>
 8009b4e:	1c53      	adds	r3, r2, #1
 8009b50:	d108      	bne.n	8009b64 <_strtol_l.constprop.0+0xdc>
 8009b52:	2322      	movs	r3, #34	@ 0x22
 8009b54:	f8ce 3000 	str.w	r3, [lr]
 8009b58:	4660      	mov	r0, ip
 8009b5a:	f1b8 0f00 	cmp.w	r8, #0
 8009b5e:	d0a0      	beq.n	8009aa2 <_strtol_l.constprop.0+0x1a>
 8009b60:	1e69      	subs	r1, r5, #1
 8009b62:	e006      	b.n	8009b72 <_strtol_l.constprop.0+0xea>
 8009b64:	b106      	cbz	r6, 8009b68 <_strtol_l.constprop.0+0xe0>
 8009b66:	4240      	negs	r0, r0
 8009b68:	f1b8 0f00 	cmp.w	r8, #0
 8009b6c:	d099      	beq.n	8009aa2 <_strtol_l.constprop.0+0x1a>
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	d1f6      	bne.n	8009b60 <_strtol_l.constprop.0+0xd8>
 8009b72:	f8c8 1000 	str.w	r1, [r8]
 8009b76:	e794      	b.n	8009aa2 <_strtol_l.constprop.0+0x1a>
 8009b78:	0800a6ff 	.word	0x0800a6ff

08009b7c <_strtol_r>:
 8009b7c:	f7ff bf84 	b.w	8009a88 <_strtol_l.constprop.0>

08009b80 <_strtoul_l.constprop.0>:
 8009b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b84:	4e34      	ldr	r6, [pc, #208]	@ (8009c58 <_strtoul_l.constprop.0+0xd8>)
 8009b86:	4686      	mov	lr, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b90:	5d37      	ldrb	r7, [r6, r4]
 8009b92:	f017 0708 	ands.w	r7, r7, #8
 8009b96:	d1f8      	bne.n	8009b8a <_strtoul_l.constprop.0+0xa>
 8009b98:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b9a:	d12f      	bne.n	8009bfc <_strtoul_l.constprop.0+0x7c>
 8009b9c:	782c      	ldrb	r4, [r5, #0]
 8009b9e:	2701      	movs	r7, #1
 8009ba0:	1c85      	adds	r5, r0, #2
 8009ba2:	f033 0010 	bics.w	r0, r3, #16
 8009ba6:	d109      	bne.n	8009bbc <_strtoul_l.constprop.0+0x3c>
 8009ba8:	2c30      	cmp	r4, #48	@ 0x30
 8009baa:	d12c      	bne.n	8009c06 <_strtoul_l.constprop.0+0x86>
 8009bac:	7828      	ldrb	r0, [r5, #0]
 8009bae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009bb2:	2858      	cmp	r0, #88	@ 0x58
 8009bb4:	d127      	bne.n	8009c06 <_strtoul_l.constprop.0+0x86>
 8009bb6:	786c      	ldrb	r4, [r5, #1]
 8009bb8:	2310      	movs	r3, #16
 8009bba:	3502      	adds	r5, #2
 8009bbc:	f04f 38ff 	mov.w	r8, #4294967295
 8009bc0:	2600      	movs	r6, #0
 8009bc2:	fbb8 f8f3 	udiv	r8, r8, r3
 8009bc6:	fb03 f908 	mul.w	r9, r3, r8
 8009bca:	ea6f 0909 	mvn.w	r9, r9
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009bd4:	f1bc 0f09 	cmp.w	ip, #9
 8009bd8:	d81c      	bhi.n	8009c14 <_strtoul_l.constprop.0+0x94>
 8009bda:	4664      	mov	r4, ip
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	dd2a      	ble.n	8009c36 <_strtoul_l.constprop.0+0xb6>
 8009be0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009be4:	d007      	beq.n	8009bf6 <_strtoul_l.constprop.0+0x76>
 8009be6:	4580      	cmp	r8, r0
 8009be8:	d322      	bcc.n	8009c30 <_strtoul_l.constprop.0+0xb0>
 8009bea:	d101      	bne.n	8009bf0 <_strtoul_l.constprop.0+0x70>
 8009bec:	45a1      	cmp	r9, r4
 8009bee:	db1f      	blt.n	8009c30 <_strtoul_l.constprop.0+0xb0>
 8009bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8009bf4:	2601      	movs	r6, #1
 8009bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bfa:	e7e9      	b.n	8009bd0 <_strtoul_l.constprop.0+0x50>
 8009bfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bfe:	bf04      	itt	eq
 8009c00:	782c      	ldrbeq	r4, [r5, #0]
 8009c02:	1c85      	addeq	r5, r0, #2
 8009c04:	e7cd      	b.n	8009ba2 <_strtoul_l.constprop.0+0x22>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1d8      	bne.n	8009bbc <_strtoul_l.constprop.0+0x3c>
 8009c0a:	2c30      	cmp	r4, #48	@ 0x30
 8009c0c:	bf0c      	ite	eq
 8009c0e:	2308      	moveq	r3, #8
 8009c10:	230a      	movne	r3, #10
 8009c12:	e7d3      	b.n	8009bbc <_strtoul_l.constprop.0+0x3c>
 8009c14:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009c18:	f1bc 0f19 	cmp.w	ip, #25
 8009c1c:	d801      	bhi.n	8009c22 <_strtoul_l.constprop.0+0xa2>
 8009c1e:	3c37      	subs	r4, #55	@ 0x37
 8009c20:	e7dc      	b.n	8009bdc <_strtoul_l.constprop.0+0x5c>
 8009c22:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009c26:	f1bc 0f19 	cmp.w	ip, #25
 8009c2a:	d804      	bhi.n	8009c36 <_strtoul_l.constprop.0+0xb6>
 8009c2c:	3c57      	subs	r4, #87	@ 0x57
 8009c2e:	e7d5      	b.n	8009bdc <_strtoul_l.constprop.0+0x5c>
 8009c30:	f04f 36ff 	mov.w	r6, #4294967295
 8009c34:	e7df      	b.n	8009bf6 <_strtoul_l.constprop.0+0x76>
 8009c36:	1c73      	adds	r3, r6, #1
 8009c38:	d106      	bne.n	8009c48 <_strtoul_l.constprop.0+0xc8>
 8009c3a:	2322      	movs	r3, #34	@ 0x22
 8009c3c:	f8ce 3000 	str.w	r3, [lr]
 8009c40:	4630      	mov	r0, r6
 8009c42:	b932      	cbnz	r2, 8009c52 <_strtoul_l.constprop.0+0xd2>
 8009c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c48:	b107      	cbz	r7, 8009c4c <_strtoul_l.constprop.0+0xcc>
 8009c4a:	4240      	negs	r0, r0
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	d0f9      	beq.n	8009c44 <_strtoul_l.constprop.0+0xc4>
 8009c50:	b106      	cbz	r6, 8009c54 <_strtoul_l.constprop.0+0xd4>
 8009c52:	1e69      	subs	r1, r5, #1
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	e7f5      	b.n	8009c44 <_strtoul_l.constprop.0+0xc4>
 8009c58:	0800a6ff 	.word	0x0800a6ff

08009c5c <_strtoul_r>:
 8009c5c:	f7ff bf90 	b.w	8009b80 <_strtoul_l.constprop.0>

08009c60 <_malloc_usable_size_r>:
 8009c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c64:	1f18      	subs	r0, r3, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfbc      	itt	lt
 8009c6a:	580b      	ldrlt	r3, [r1, r0]
 8009c6c:	18c0      	addlt	r0, r0, r3
 8009c6e:	4770      	bx	lr

08009c70 <_init>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	bf00      	nop
 8009c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c76:	bc08      	pop	{r3}
 8009c78:	469e      	mov	lr, r3
 8009c7a:	4770      	bx	lr

08009c7c <_fini>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	bf00      	nop
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr
